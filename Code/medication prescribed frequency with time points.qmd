---
title: "Medication usage associated with time points and lifetime"
format: html
editor: visual
---

# Medication prescribing associations with time points and frequency

Load in medications dataset and endpoints datasets:

```{r}
library(tidyverse)
library(lubridate)
medications <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/GRLS_medications_initial_tidy.csv")
endpoints<- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/study_endpoints.csv")
#death date file
dog_profile <-read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/dog_profile.csv")
#keep only date of death and subject id
dog_profile <- dog_profile %>%
  dplyr::select(c(subject_id,death_date))
endpoints_profile <- endpoints %>%
  left_join(dog_profile, by="subject_id")
```

Load in HSA cohort for endpoint of final point 31/12/24 or diagnosis point or earlier if died:

```{r}
HSA_cohort <-read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/HSA_study_pop_with_final_date_with_final_study_record_year.csv")
HSA_cohort <- HSA_cohort %>%
  dplyr::select(-c(X))
```

## Frequency of prescription of a drug group in whole life:

-   using active ingredients group as this is broad and can try medication ingredient itself if this shows any interesting results

Group for each dog rows by active ingredient group

```{r}
number_of_prescriptions_drug_groups_whole_life <- medications %>%
  group_by(subject_id, active_ingredient_groups) %>%  # Group by both dog and drug category
  summarise(lifetime_total_prescriptions = n(), .groups = "drop") 


# Pivot the table to wide format
number_of_prescriptions_drug_groups_whole_life_wide <- number_of_prescriptions_drug_groups_whole_life %>%
  pivot_wider(
    names_from = active_ingredient_groups,  # Make drug groups into column names
    values_from = lifetime_total_prescriptions,      # Fill columns with the counts
    values_fill = 0                         # Replace NA with 0 for drug groups not prescribed
  )
```

Group for each dog rows by medication ingredient top 100 group

```{r}
number_of_prescriptions_ingredient_100_groups_whole_life <- medications %>%
  group_by(subject_id, medication_ingredients_100) %>%  # Group by both dog and drug category
  summarise(lifetime_total_prescriptions = n(), .groups = "drop") 


# Pivot the table to wide format
number_of_prescriptions_ingredient_100_groups_whole_life_wide <- number_of_prescriptions_ingredient_100_groups_whole_life %>%
  pivot_wider(
    names_from = medication_ingredients_100,  # Make drug groups into column names
    values_from = lifetime_total_prescriptions,      # Fill columns with the counts
    values_fill = 0                         # Replace NA with 0 for drug groups not prescribed
  )
```

## Endpoint/dead dogs only calculations

## Incorporating diagnosis date into medication usage

Approx 50 dogs from endpoint data do not have meds data submitted

```{r}
#combine endpoints and medications dataset, NB only the endpoints  ~1800 dogs retained rahter than the 3000
endpoints_medications <- medications %>%
  inner_join(endpoints_profile, by = "subject_id")

#sense check same num unique IDs in data
unique_end <- unique(endpoints$subject_id)
unique_endmed <- unique(endpoints_medications$subject_id)

#delete pointless columns
endpoints_medications <- endpoints_medications %>%
  dplyr::select(-c(X,public_id.x,public_id.y,status.x,status.y))

```

Join to HSA cohort

```{r}
HSA_medications <- medications %>%
  inner_join(HSA_cohort,by="subject_id")
HSA_medications <- HSA_medications %>%
  dplyr::select(-c(X))
```

## Medications length of time/number of times prescribed:

Non use vs intermediate use vs long term use.

There are a few (human) papers defining this usage:

"We classiﬁed use as non-use (0–1 prescription), intermediate use (2–7 prescriptions), and long-term use (≥8 prescriptions). Eight prescriptions was chosen as a cut-off as drugs for chronic treatment are typically supplied for 3 months use for each dispensing in Denmark, whereby our deﬁnition of long-term use would correspond to two years' cumulative treatment." - Pottegard et al., 2016

\- exclude drug usage for the year prior to diagnosis (recognised that increased prescribing in year prior to diagnosis possibly due to cancer diagnosing issues PLUS likely wont be involved in cancer diagnosis

First steps, code to retain rows only where X number of years between prescription ('record_date') and diagnosis date('diagnosis_date')

```{r}
#make sure date columns in dateformat
endpoints_medications <- endpoints_medications %>%
      mutate(
    diagnosis_date2 = as.Date(diagnosis_date, format = "%Y-%m-%d"),  # yyyy-mm-dd
    record_date2= as.Date(record_date, format = "%Y-%m-%d")         # dd-mm-yyyy
  )
endpoints_medications$mapped_duration <- as.numeric(endpoints_medications$mapped_duration)

#trial to retain rows ?5y before diagnosis?
endpoints_medication_5y_filt <-  endpoints_medications %>%
  mutate(
    # Calculate the time difference in years between record_date and diagnosis_date
    year_difference = as.numeric(difftime(record_date2, diagnosis_date2, units = "days")) / 365.25
  ) %>%
  # Filter rows where the year difference is 5 years or less
  filter(abs(year_difference) <= 5) 




#trial to retain rows ?3y before diagnosis?
endpoints_medication_3y_filt <-  endpoints_medications %>%
  mutate(
    # Calculate the time difference in years between record_date and diagnosis_date
    year_difference = as.numeric(difftime(record_date2, diagnosis_date2, units = "days")) / 365.25
  ) %>%
  # Filter rows where the year difference is 5 years or less
  filter(abs(year_difference) <= 3) 


```

Now perform non-use, intermediate and chronic use calculations:

NB. using mapped_duration column where duration has been modified so that a value of 1=4 weeks ie. 1m and all other values are multiples or fractions of that eg. 3 = 3 month course, 0.25 = 1 week course of drug. Based on this, value of 24 would constitute chronic use

Using same cut-offs as humans:

```{r}


classify_drug_prescription_freq_duration_5y <- endpoints_medication_5y_filt %>%
  group_by(subject_id, active_ingredient_groups) %>%
  # Sum mapped_duration for each active_ingredient_group per subject_id
  summarise(total_duration = sum(mapped_duration, na.rm = TRUE)) %>%
  # Classify based on total_duration
  mutate(
    duration_category = case_when(
      total_duration >= 24 ~ "chronic_use",   # 24 months or more
      total_duration < 24 & total_duration >= 6 ~ "intermediate_use",  # 6 to less than 24 months
      TRUE ~ "non_use"  # less than 6 months or no duration info
    )
  ) %>%  # Count the number of prescriptions grouped by active_ingredient_groups and duration_category
  count(active_ingredient_groups, duration_category, name = "prescription_count") %>%
  # Spread the counts into separate columns for each duration category
  pivot_wider(names_from = duration_category, values_from = prescription_count, values_fill = 0)
```

From this human classifying, we have only got \~15 dogs with any drug prescription classified as "chronic". Probably a lower classification for chronic is required however, also \~20k of the \~36k records do not have a duration mapped so need to think on potential way to exclude duration?

```{r}
table(endpoints_medications$mapped_duration)

sum(is.na(endpoints_medications$mapped_duration))

missing_duration <-endpoints_medications %>%
  filter(is.na(mapped_duration))


table(missing_duration$duration)

```

Issue of what to do with "continuous" and "as needed" as this is almost all the missing ones ?

-   Could reclass to give any that are "continuous months" value of 1m and "continuous days" value of 1d etc.?

-   Alternatively perhaps just do number of rows for these time points and base calcs on number of times a drug prescribed rather than length of time??

```{r}
continuous <- endpoints_medications %>%
  filter(duration=="continuous")
```

### Trialing with number of times drug prescribed rather than duration:

#### 5 years prior to endpoint

```{r}
classify_drug_prescription_freq_events_5y <- endpoints_medication_5y_filt %>%
  group_by(subject_id, active_ingredient_groups) %>%
  summarise(total_prescriptions_5y = n(), .groups = "drop") 
#now classify the counts
classify_drug_prescription_freq_events_5y <- classify_drug_prescription_freq_events_5y %>%
  mutate(total_prescriptions_5y_cat = case_when(
    total_prescriptions_5y >= 24 ~ "chronic_use",   # 24 months or more
      total_prescriptions_5y< 24 & total_prescriptions_5y>= 6 ~ "intermediate_use",  # 6 to less than 24 months
      TRUE ~ "non_use"  # less than 6 months or no info
  )
  )

# Pivot the table to wide format
classify_drug_prescription_freq_events_5y_wide <- classify_drug_prescription_freq_events_5y %>%
  #remove the actual counts of useage from this table
  dplyr::select(-total_prescriptions_5y)%>%
  pivot_wider(
    names_from = active_ingredient_groups,  # Make drug groups into column names
    values_from = total_prescriptions_5y_cat,      # Fill columns with the counts
 #for those with no use put down as non_use
 values_fill = "non_use"                        # Replace NA with 0 for drug groups not prescribed
     )

```

Even with this, \~70 dogs only fit the chronic use category.

#### 3 years prior to endpoint

```{r}
classify_drug_prescription_freq_events_3y <- endpoints_medication_3y_filt %>%
  group_by(subject_id, active_ingredient_groups) %>%
  summarise(total_prescriptions_3y = n(), .groups = "drop") 
#now classify the counts
classify_drug_prescription_freq_events_3y <- classify_drug_prescription_freq_events_3y %>%
  mutate(total_prescriptions_3y_cat = case_when(
    total_prescriptions_3y >= 24 ~ "chronic_use",   # 24 months or more
      total_prescriptions_3y< 24 & total_prescriptions_3y>= 6 ~ "intermediate_use",  # 6 to less than 24 months
      TRUE ~ "non_use"  # less than 6 months or no info
  )
  )

# Pivot the table to wide format
classify_drug_prescription_freq_events_3y_wide <- classify_drug_prescription_freq_events_3y %>%
  #remove the actual counts of useage from this table
  dplyr::select(-total_prescriptions_3y)%>%
  pivot_wider(
    names_from = active_ingredient_groups,  # Make drug groups into column names
    values_from = total_prescriptions_3y_cat,      # Fill columns with the counts
 #for those with no use put down as non_use
 values_fill = "non_use"                        # Replace NA with 0 for drug groups not prescribed
     )
```

Alternative methodology rather than high,intermed or non-use = median drug usage and then make split based on that (e.g quartiles around median)

```{r}
#trial to retain rows ?5y before diagnosis?
HSA_medication_5y_filt <-  HSA_medications %>%
  group_by(subject_id) %>%
  filter(year_in_study >= (year_in_study_diagnosis_or_final_record_year - 5))




```

This code is calculating quartiles and halves for each active ingredient group rather than prev code (now deleted which did it for overall medication counts)

```{r}
# Step 1: Count occurrences per dog per active ingredient group
meds_per_dog <- HSA_medication_5y_filt %>%
  group_by(subject_id, active_ingredient_groups) %>%
  summarise(count = n(), .groups = "drop")

# Step 2: Compute quartiles *within* each active ingredient group
medication_summary <- meds_per_dog %>%
  group_by(active_ingredient_groups) %>%
  summarise(
    min=min(count),
    Q1 = quantile(count, 0.25, na.rm = TRUE),
    median_count_per_dog = quantile(count, 0.50, na.rm = TRUE),  # Use quantile for clarity
    Q3 = quantile(count, 0.75, na.rm = TRUE),
    .groups = "drop",
    max = max(count)
  )



# Step 3: Join quartiles back to individual dog data and assign quartile categories
meds_per_dog_quart <- meds_per_dog %>%
  left_join(medication_summary, by = "active_ingredient_groups") %>%
  mutate(
    quartile = case_when(
      count <= Q1 ~ "Q1",
      count > Q1 & count <= median_count_per_dog ~ "Q2",
      count > median_count_per_dog & count <= Q3 ~ "Q3",
      count > Q3 ~ "Q4"
    ),
    # Assign halves based on median
    half = ifelse(count <= median_count_per_dog, "lower_half", "upper_half")
  ) %>%
  dplyr::select(c(subject_id, active_ingredient_groups, quartile, half))


# Step 4: Reshape so each medication group is a column with Q1-Q4 values per dog
meds_wide_quart <- meds_per_dog_quart %>%
  pivot_wider(names_from = active_ingredient_groups, values_from = c(half,quartile))

# View the final data
meds_wide_quart
```

Now examining the completeness of this data

```{r}
colSums(is.na(meds_wide_quart))

meds_wide_no_sub_quart <- meds_wide_quart %>%
  dplyr::select(-subject_id)
lapply(meds_wide_no_sub_quart, function(x) table(x, useNA = "ifany"))

```

Majority of rows (of the 2800 dogs with meds records for these 5y) are missing a lot for all dogs - except anti-inflam, anti-microbials and anti-parasites

some drugs not enough variablity to split into quartiles, so also create halves variable - although actually when examining this it just looks like probably many dogs are not prescribed certain drugs = lots of NAs

Tidy up quartiles data then save csv of dataset at end of medications:

```{r}
meds_wide_quart <- meds_wide_quart %>%
  rename_with(~ paste0(.x, "_5y_prior_endpoint"), -1)
```

Seperate variable creation to count lifetime drug admin prior to endpoint and split into quartiles

```{r}
lifetime_meds_per_dog <- HSA_medications %>%
  group_by(subject_id, active_ingredient_groups) %>%
  summarise(count = n(), .groups = "drop")  # Count occurrences per dog per group

# Step 2: Get summary stats across all dogs for each medication group
lifetime_meds_summary <- lifetime_meds_per_dog %>%
  group_by(active_ingredient_groups) %>%
  summarise(
    min=min(count),
    Q1 = quantile(count, 0.25, na.rm = TRUE),
    median_count_per_dog = quantile(count, 0.50, na.rm = TRUE),  # Use quantile for clarity
    Q3 = quantile(count, 0.75, na.rm = TRUE),
    max=max(count),
    .groups = "drop"
  )

# Step 3: Join quartiles back to individual dog data and assign quartile categories
lifetime_meds_per_dog_quart <- lifetime_meds_per_dog %>%
  left_join(lifetime_meds_summary, by = "active_ingredient_groups") %>%
  mutate(
    quartile = case_when(
      count <= Q1 ~ "Q1",
      count > Q1 & count <= median_count_per_dog ~ "Q2",
      count > median_count_per_dog & count <= Q3 ~ "Q3",
      count > Q3 ~ "Q4"
    ),
    # Assign halves based on median
    half = ifelse(count <= median_count_per_dog, "lower_half", "upper_half")
  ) %>%
  dplyr::select(c(subject_id, active_ingredient_groups, quartile, half))


# Step 4: Reshape so each medication group is a column with Q1-Q4 values per dog
lifetime_meds_wide_quart <- lifetime_meds_per_dog_quart %>%
  pivot_wider(names_from = active_ingredient_groups, values_from = c(half,quartile))




# View the final data
lifetime_meds_wide_quart






lifetime_meds_wide_quart <- lifetime_meds_wide_quart %>%
  rename_with(~ paste0(.x, "_lifetime"), -1)


```

### Examine for specific potential RF medications:

-   NSAIDs exposure

    -   ever Y N and 5y prior Y N

-   steroids exposure

    -   ever Y N and 5y prior Y N

-   Fenbendazole exposure

    -   ever Y N and 5y prior Y N

```{r}
NSAID_names<-c("carprofen","meloxicam","firocoxib","deracoxib","flurbiprofen","piroxicam","ketotifen","ketoprofen","rimadyl","metacam","meloxidyl","previcox","vetprofen","ketorolac opthalmic ointment","toradol","acular","voltaren
","diclofenac","flurbiprofen eye drops
","carprovet","carprieve","truprofen","ofloxacin ophthalmic ointment + nsaid
")
steroid_names<-c("dexamethasone, neomycin sulfate, thiabendazole
","prednisolone acetate
","betamethasone, clotrimazole, gentamicin sulfate
","betamethasone, gentamicin sulfate
","dexamethasone","dexamethasone, miconazole nitrate
","dexamethasone, miconazole nitrate
","methylprednisolone","prednisone","betamethasone, florfenicol, terbinafine
","clotrimazole, gentamicin sulfate, mometasone furoate
","dexamethasone, methylprednisolone
","mometasone furoate, orbifloxacin, posaconazole
","dexamethasone, neomycin sulfate, polymyxin b
","bacitracin zinc, dexamethasone, neomycin sulfate, polymyxin b
","miconazole nitrate, polymyxin b, prednisolone acetate
","hydrocortisone, gentamicin sulfate, miconazole nitrate
","gentamicin sulfate, hydrocortisone, miconazole nitrate
","burow's solution, hydrocortisone
","acetic acid, boric acid, hydrocortisone, ketoconazole
","hydrocortisone","bacitracin zinc, hydrocortisone, neomycin sulfate, polymyxin b
","dexamethasone, enrofloxacin, miconazole nitrate
","clotrimazole, dexamethasone, enrofloxacin
","hydrocortisone, ketoconazole
","dexamethasone, ketoconazole, phytosphingosine
","betamethasone","acetic acid, boric acid, ceramide complex, hydrocortisone, ketoconazole
","hydrocortisone, troleandomycin
","dexamethasone, enrofloxacin, ketoconazole, tris-edta
","bacitracin zinc, neomycin sulfate, polymyxin b, unspecified steroid
","clotrimazole, dexamethasone
","dexamethasone, ketoconazole, tris-edta
","dexamethasone, ketoconazole
","betamethasone, clotrimazole, gentamicin sulfate, mometasone furoate
","dexamethasone, diphenhydramine
","beclomethasone, clotrimazole, neomycin sulfate
","dexamethasone, enrofloxacin, ketoconazole
","dexamethasone, dimethyl sulfoxide, enrofloxacin, lidocaine
","dexamethasone, enrofloxacin
","betamethasone, gentamicin sulfate, miconazole nitrate
","chloramphenicol, dexamethasone
","hydrocortisone, pramoxine
","dexamethasone, penicillin
","betamethasone, chloramphenicol, ketoconazole
","dexamethasone, tobramycin
","enrofloxacin, dexamethasone, tris-edta
","dexamethasone, miconazole nitrate, neomycin sulfate, nystatin, thiostrepton, triamcinolone acetonide
","betamethasone, burow's solution, gentamicin sulfate, hydrocortisone, miconazole nitrate
","ketoconazole, hydrocortisone
","bacitracin, hydrocortisone
","dexamethasone, miconazole nitrate, tris-edta
","chlorhexidine gluconate, dexamethasone
","dexamethasone, enrofloxacin, tris-edta
","dexamethasone, enrofloxacin, silver sulfadiazine
","dexamethasone, miconazole nitrate, neomycin sulfate, polymyxin b, prednisolone acetate, thiabendazole
","betamethasone, enrofloxacin
","dexamethasone, ear cleaner (epi-otic advanced), enrofloxacin
","betamethasone, tobramycin
","dexamethasone ophthalmic ointment
","miconazole + dexamethasone ear solution
","amikacin + dexamethasone ear solution
","depo-medrol
","prednisolone acetate ophthalmic suspension
","neo-poly-dex ophthalmic ointment
","neo-poly-bac ophthalmic ointment + dexamethasone
","betamethasone + gentamicin ear solution
","conofite + dexamethasone ear solution
","neo-poly-bac ophthalmic ointment + hydrocortisone
","baytril + conofite + dexamethasone ear solution
","betamethasone + gentamicin spray
","baytil + clotrimazole + dexamethasone ear solution
","baytril + dexamethasone + miconazole ear solution
","baytril + conzol + dexamethasone ear solution
","trizulta + keto + baytril + dexamethasone flush
","clotrimazole + dexamethasone ear solution
","burow's solution + hydrocortisone
","betamethasone + clotrimazole + gentamicin ear solution
","trizulta + keto + dexamethasone flush
","cortalone
","baytril + dexamethasone + ketoconazole ear solution
","betamethasone + gentamicin sulfate + miconazole nitrate ear solution
","dexamethasone otic
","baytril + trizulta + dexamethasone ear solution
","neomycin sulfate + nystatin + triamcinolone acetonide
","chloramphenicol + ketoconazole + triamcinolone acetonide ear solution
","triamcinolone","trizedta + dexamethasone + miconazole flush
","chlorhexiderm + dexamethasone spray
","trizedta + baytril + dexamethasone flush
","neomycin sulfate + tetracaine + triamcinolone acetonide
","clotrimazole + gentamicin + mometasone ear solution
","baytril + dexamethasone + silvadene ear solution
","itraconazole + ketoconazole + triamcinolone acetonide ear solution
","baytril + triamcinolone acetonide
","troleandomycin + hydrocortisone
","neo-poly-bac ophthalmic ointment + steroid
","t8 keto flush + dexamethasone
","dexamethasone + miconazole
","dermacool + hydrocortisone
","trizchlor 4 + hydrocortisone
","dexamethasone + diphenhydramine
","tear stimulation forte + betamethasone + ofloxacin
","baytril + dexamethasone + dimethyl sulfoxide + lidocaine
","dexamethasone + baytril
","ketoconazole + mupirocin + triamcinolone acetonide
","penicillin + dexamethasone
","tobramycin + betamethasone ophthalmic ointment
","lotramin + dexamethasone
","bacitracin + hydrocortisone
")
fenbendazole_names<-c("fenbendazole","fenbendazole, maropitant citrate, metronidazole, omeprazole, sucralfate
","cerenia + fenbendazole + metronidazole + omeprazole + sucralfate
","panacur","safe-guard")
```

Ever exposed for each of these drugs :

-   need to go across "medication_name", "medication_name_specify", "medication_ingredients" columns

```{r}
#NSAID
NSAID_ever<- HSA_medications %>%
  mutate(NSAID_ever = apply(select(., medication_name, medication_name_specify, medication_ingredients), 
                            1, 
                            function(row) {
                              # Check each column in the row for a match with NSAID_names
                              any(tolower(str_trim(row)) %in% tolower(str_trim(NSAID_names)))
                            })) %>%
  mutate(NSAID_ever= ifelse(NSAID_ever, 1, 0)) %>%
  arrange(subject_id, desc(NSAID_ever)) %>%  # Ensure NSAID_5y = 1 rows come first
  distinct(subject_id, .keep_all = TRUE) %>%  # Keep first row for each subject_id
  select(subject_id, NSAID_ever)

#steroid
steroid_ever<- HSA_medications %>%
  mutate(steroid_ever = apply(select(., medication_name, medication_name_specify, medication_ingredients), 
                            1, 
                            function(row) {
                              # Check each column in the row for a match with NSAID_names
                              any(tolower(str_trim(row)) %in% tolower(str_trim(steroid_names)))
                            })) %>%
  mutate(steroid_ever = ifelse(steroid_ever, 1, 0)) %>%
  arrange(subject_id, desc(steroid_ever)) %>%  # Ensure NSAID_ever = 1 rows come first
  distinct(subject_id, .keep_all = TRUE) %>%  # Keep first row for each subject_id
  select(subject_id, steroid_ever)
#fenbendazole
fenbendazole_ever <- HSA_medications %>%
  mutate(fenbendazole_ever = apply(select(., medication_name, medication_name_specify, medication_ingredients), 
                            1, 
                            function(row) {
                              # Check each column in the row for a match with NSAID_names
                              any(tolower(str_trim(row)) %in% tolower(str_trim(fenbendazole_names)))
                            })) %>%
  mutate(fenbendazole_ever = ifelse(fenbendazole_ever, 1, 0)) %>%
  arrange(subject_id, desc(fenbendazole_ever)) %>%  # Ensure NSAID_ever = 1 rows come first
  distinct(subject_id, .keep_all = TRUE) %>%  # Keep first row for each subject_id
  select(subject_id, fenbendazole_ever)
```

5 y prior - apply to the previously generated 5y filtered HSA dogs data

```{r}

#NSAID
NSAID_5y <-HSA_medication_5y_filt %>%
  ungroup()%>%
  mutate(NSAID_5y = apply(select(., medication_name, medication_name_specify, medication_ingredients), 
                            1, 
                            function(row) {
                              # Check each column in the row for a match with NSAID_names
                              any(tolower(str_trim(row)) %in% tolower(str_trim(NSAID_names)))
                            })) %>%
  mutate(NSAID_5y = ifelse(NSAID_5y, 1, 0)) %>%
  arrange(subject_id, desc(NSAID_5y)) %>%  # Ensure NSAID_5y = 1 rows come first
  distinct(subject_id, .keep_all = TRUE) %>%  # Keep first row for each subject_id
  select(subject_id, NSAID_5y)

#steroid
steroid_5y <- HSA_medication_5y_filt %>%
    ungroup()%>%
  mutate(steroid_5y = apply(select(., medication_name, medication_name_specify, medication_ingredients), 
                            1, 
                            function(row) {
                              # Check each column in the row for a match with NSAID_names
                              any(tolower(str_trim(row)) %in% tolower(str_trim(steroid_names)))
                            })) %>%
  mutate(steroid_5y = ifelse(steroid_5y, 1, 0)) %>%
  arrange(subject_id, desc(steroid_5y)) %>%  # Ensure NSAID_5y = 1 rows come first
  distinct(subject_id, .keep_all = TRUE) %>%  # Keep first row for each subject_id
  select(subject_id, steroid_5y)
#fenbendazole
fenbendazole_5y <- HSA_medication_5y_filt %>%
    ungroup()%>%
  mutate(fenbendazole_5y = apply(select(., medication_name, medication_name_specify, medication_ingredients), 
                            1, 
                            function(row) {
                              # Check each column in the row for a match with NSAID_names
                              any(tolower(str_trim(row)) %in% tolower(str_trim(fenbendazole_names)))
                            })) %>%
  mutate(fenbendazole_5y = ifelse(fenbendazole_5y, 1, 0)) %>%
  arrange(subject_id, desc(fenbendazole_5y)) %>%  # Ensure NSAID_5y = 1 rows come first
  distinct(subject_id, .keep_all = TRUE) %>%  # Keep first row for each subject_id
  select(subject_id, fenbendazole_5y)
```

Combine 5y and lifetime for these 3 drugs

```{r}
combined_df <- reduce(list(NSAID_ever,NSAID_5y,steroid_ever,steroid_5y,fenbendazole_ever,fenbendazole_5y), full_join, by = "subject_id")

```

```{r}
HSA_5y_and_lifetime <- lifetime_meds_wide_quart %>%
  left_join(meds_wide_quart, by="subject_id")

#now replace Nas with 
HSA_5y_and_lifetime <- HSA_5y_and_lifetime %>%
  mutate_all(~ replace(., is.na(.), "drug_not_administered"))

#join to 3044 cohort
HSA_5y_and_lifetime_all_dogs <- HSA_cohort %>%
  left_join(HSA_5y_and_lifetime,by="subject_id")


#add the combined df of the specific extra drugds
HSA_5y_and_lifetime_all_dogs <- HSA_5y_and_lifetime_all_dogs %>%
  left_join(combined_df,by="subject_id")
#now replace NA with not recorded
HSA_5y_and_lifetime_all_dogs <- HSA_5y_and_lifetime_all_dogs %>%
  mutate_all(~ replace(., is.na(.), "drug_not_administered"))




write.csv(HSA_5y_and_lifetime_all_dogs,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/HSA_cohort_medications_5y_and_lifetime.csv")
```

### Medications to signal comorbidities & cross check with comorbidities dogs

```{r}
lifetime_comorbs <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/HSA_cohort_comorbidities.csv")
```

List of unique medication names/ingredients and pick which ones from there are exclusive to a lifelong disease:

```{r}
#medication name
medication_names_unique <- unique(HSA_medications$medication_name)
medication_names_unique_2 <- unique(HSA_medications$medication_name_specify)
#combine list

#medication ingredient 
medication_ingredients_unique <- unique(HSA_medications$medication_ingredients)
medication_ingredients_unique_2 <- unique(HSA_medications$medication_ingredients_100)


#combine these all together and export 
all_unique_med_ingredients_or_names<-unique(c(medication_ingredients_unique,medication_ingredients_unique_2,medication_names_unique,medication_names_unique_2))


#as df for reading in here with ease as too long to print whole list
all_unique_med_ingredients_or_names_df <-as.data.frame(all_unique_med_ingredients_or_names)
write.csv(all_unique_med_ingredients_or_names,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/GRLS_all_unique_medication_names_or_ingredients.csv")
```

Specific medications (names and ingredients) from manual examination of list:

```{r}
long_term_meds <- c("insulin","telmisartan","pimobendan","phenobarbital","levetiracetam","potassium bromide","zonisamide", "thyroxine","sotalol","timolol","mexiletine","allopurinol","prazosin","lefulonomide","pyridostigmine bromide","amiodarone","insulin","librela","bedinvetmab","benazepril","levothyroxine","telmisartan","thyrosyn","soloxine","keppra","lypex","pancrezyme","purina ha diet", "thyrocare","thyrokare","levocrine","vetmedin","sotalol","timolol","propanolol","cyclopsorine","atopica","mexiletine","amlodipine","diltiazem","trilostane","vetoryl","sirolimus","tacrolimus","methazolamide","leflunomide","sildenafil","pyridostigmine bromide","vetsulin")
disease_specific_lifetime_meds<-c("insulin","vetsulin","thyroxine","thyrosyn","thyrocare","thyrokare","levocrine","librela","trilostane","vetoryl","pyridostigmine bromide","vetmedin","pimobendan")
```

Creating a more in depth NSAID variable so can look at NSAID numbers of prescriptions rather than just NSAID YN exposure in current GRLS log reg HSA model

```{r}
# use HSA medications df to get list of NSAIDs in df
table(HSA_medication_5y_filt$medication_ingredients_100)
unique(HSA_medication_5y_filt$medication_ingredients_100)
unique(HSA_medication_5y_filt$medication_ingredients)
NSAID_meds <- c("carprofen","meloxicam","firocoxib","deracoxib","flurbiprofen","ketoprofen")

HSA_medication_5y_filt <- HSA_medication_5y_filt %>%
  mutate(NSAID_use = if_else(
    str_detect(tolower(medication_ingredients), str_c(NSAID_meds, collapse = "|")),
    "NSAID_yes",
    "NSAID_no"
  ))

#a count of these for each dog exc if NSAID no then just NSAID no
NSAID_5y_meds_per_dog <- HSA_medication_5y_filt %>%
  group_by(subject_id, NSAID_use) %>%
  summarise(count = n(), .groups = "drop")
  #remove rows where if subject has ANY NSAID_yes value then remove the NSAID_no row/s for that subject id
  # Step 1: Get subject_ids that have NSAID_yes
NSAID_yes_subjects <- NSAID_5y_meds_per_dog %>%
  filter(NSAID_use == "NSAID_yes") %>%
  pull(subject_id)

# Step 2: Keep NSAID_yes rows or NSAID_no only if no NSAID_yes exists for that dog
NSAID_5y_meds_per_dog_clean <- NSAID_5y_meds_per_dog %>%
  filter(NSAID_use == "NSAID_yes" | !(subject_id %in% NSAID_yes_subjects))

#calculate NSAID yes quartiles
NSAID_yes <- NSAID_5y_meds_per_dog_clean %>%
  filter(NSAID_use=="NSAID_yes")

NSAID_summary <- NSAID_yes %>%
  summarise(
    min=min(count),
    Q1 = quantile(count, 0.25, na.rm = TRUE),
    median_count_per_dog = quantile(count, 0.50, na.rm = TRUE),  # Use quantile for clarity
    Q3 = quantile(count, 0.75, na.rm = TRUE),
    max=max(count),
    .groups = "drop"
  )

NSAID_5y_meds_per_dog_clean_quartiles <- NSAID_5y_meds_per_dog_clean %>%
  mutate(NSAID_quantile = case_when(
    NSAID_use == "NSAID_no" ~ "no_NSAID_admin",
    NSAID_use == "NSAID_yes" & count <= 1 ~ "Q1(1)",
    NSAID_use == "NSAID_yes" & count > 1 & count <= 2 ~ "Q2(1-2)",
    NSAID_use == "NSAID_yes" & count > 2 & count <= 3 ~ "Q3(2-3)",
    NSAID_use == "NSAID_yes" & count > 3 ~ "Q4(3-11)"
  ))
#then filt down to unique single row for each dog of its count or NSAID no, then join back to the 3044 dogs and if no count or no NSAID no then "no_NSAID_recorded_in_time_period"
NSAID_5y_meds_per_dog_clean_quartiles_whole_HSA_pop <- HSA_5y_and_lifetime_all_dogs %>% left_join(NSAID_5y_meds_per_dog_clean_quartiles, by="subject_id")

#now replace NAs in NSAID_quantile column with "no_med_records_this_time_period"
NSAID_5y_meds_per_dog_clean_quartiles_whole_HSA_pop <- NSAID_5y_meds_per_dog_clean_quartiles_whole_HSA_pop %>%
    mutate(NSAID_quantile = replace_na(NSAID_quantile, "no_med_use_recorded"))

#ditch count column 
NSAID_5y_meds_per_dog_clean_quartiles_whole_HSA_pop <- NSAID_5y_meds_per_dog_clean_quartiles_whole_HSA_pop %>%
  dplyr::select(c(-"count"))
#rename NSAID_quantile to make clear its a 5y column
NSAID_5y_meds_per_dog_clean_quartiles_whole_HSA_pop <- NSAID_5y_meds_per_dog_clean_quartiles_whole_HSA_pop %>%
  rename(NSAID_5y_quantiles = NSAID_quantile)

```

Creating a split of ecto vs endoparasites from the parasite treatment variables:

NB lists from this script "GRLS medications 250123.qmd"

```{r}


anti_parasites <-c("ivermectin, pyrantel pamoate","afoxolaner","lufenuron, milbemycin oxime","ivermectin","milbemycin oxime","fluralaner","fipronil, (s)-methoprene","milbemycin oxime, spinosad", "neomycin sulfate, nystatin, thiostrepton, triamcinolone acetonide","fenbendazole"<"pyrantel pamoate","dinotefuran, permethrin, pyriproxyfen","imidacloprid, pyriproxyfen","sarolaner" , "milbemycin oxime, praziquantel","ivermectin, praziquantel, pyrantel pamoate","selamectin", "flumethrin, imidacloprid","moxidectin","lufenuron, milbemycin oxime, praziquantel", "spinosad","fipronil, permethrin, pyriproxyfen","febantel, praziquantel, pyrantel pamoate","imidacloprid, permethrin", "praziquantel","praziquantel, pyrantel pamoate", "imidacloprid, moxidectin", "fipronil, pyriproxyfen, (s)-methoprene", "fipronil","lotilaner", "lufenuron", "cyphenothrin, fipronil","ponazuril","cyphenothrin, fipronil, (s)-methoprene","clorsulon, ivermectin","imidacloprid", "nitenpyram","terbinafine","indoxacarb","deltamethrin","(s)-methoprene","mebendazole","itraconazole","fipronil, permethrin", "unspecified heartworm preventative", "amitraz", "epsiprantel","permethrin","afoxolaner, milbemycin oxime","indoxacarb, permethrin","permethrin, pyriproxyfen","dinotefuran","ivermectin, lufenuron, mebendazole, praziquantel, pyrantel pamoate","febantel", "milbemycin oxime", "moxidectin", "fenbendazole", "praziquantel", 
                  "pyrantel pamoate", "oxantel", "diethylcarbamazine citrate","amitraz", "permethrin", "imidacloprid", "fipronil","etofenprox","selamectin", "pyriproxyfen", "s-methoprene", "diatomaceous earth", "nitenpyram","amitraz, metaflurimon", "etofenprox, (s)-methoprene, piperonyl butoxide", 
  "etofenprox, n-octyl bicycloheptene dicarboximide, piperonyl butoxide, pyriproxyfen, (s)-methoprene", 
  "unspecified herbal flea/tick preventative", "unspecified flea/tick preventative","Ivermectin",  "milbemycin oxime",
  "oxantel",
  "praziquantel",
  "moxidectin",
  "pyrantel pamoate",
  "sarolaner",
  "unspecified parasite preventative",
    "moxidectin, pyrantel pamoate, sarolaner", "milbemycin oxime, oxantel, praziquantel", "fatal plus","unspecified flea preventative","toltrazuril","mebendazole, praziquantel, pyrantel pamoate","imidacloprid, permethrin, pyriproxyfen","fenbendazole, maropitant citrate, metronidazole, omeprazole, sucralfate"        
)

ecto <-c("afoxolaner",
  "fluralaner",
  "fipronil",
  "spinosad",
  "sarolaner",
  "selamectin",
  "moxidectin",
  "nitenpyram",
  "lufenuron",
  "imidacloprid",
  "permethrin",
  "pyriproxyfen",
  "(s)-methoprene",
  "cyphenothrin",
  "etofenprox",
  "deltamethrin",
  "indoxacarb",
  "amitraz",
  "dinotefuran",
  "terbinafine",
  "benzyl benzoate",
  "malathion",
  "crotamiton",
  "lindane",
  "pyrethrins",
  "piperonyl butoxide",
  "cyclomethicone",
  "dimethicone")
endo <-c( "ivermectin",
  "pyrantel pamoate",
  "milbemycin oxime",
  "fenbendazole",
  "praziquantel",
  "oxantel",
  "diethylcarbamazine citrate",
  "mebendazole",
  "epsiprantel",
  "ponazuril",
  "toltrazuril",
  "clorsulon",
  "albendazole",
  "niclosamide",
  "thiabendazole",
  "nitazoxanide",
  "paromomycin",
  "metronidazole",
  "tinidazole",
  "doxycycline",
  "atovaquone",
  "proguanil",
  "quinine",
  "pyrimethamine",
  "sulfadiazine")

#NB broad spectrum ones that do both here
broad_spectrum <- c(
  "ivermectin, pyrantel pamoate",
  "lufenuron, milbemycin oxime",
  "milbemycin oxime, spinosad",
  "milbemycin oxime, praziquantel",
  "ivermectin, praziquantel, pyrantel pamoate",
  "lufenuron, milbemycin oxime, praziquantel",
  "moxidectin, pyrantel pamoate, sarolaner",
  "milbemycin oxime, oxantel, praziquantel",
  "afoxolaner, milbemycin oxime",
  "fenbendazole, maropitant citrate, metronidazole, omeprazole, sucralfate",
  "mebendazole, praziquantel, pyrantel pamoate",
  "imidacloprid, moxidectin",
  "fipronil, permethrin, pyriproxyfen",
  "fipronil, pyriproxyfen, (s)-methoprene",
  "cyphenothrin, fipronil, (s)-methoprene",
  "imidacloprid, permethrin, pyriproxyfen",
  "etofenprox, (s)-methoprene, piperonyl butoxide",
  "etofenprox, n-octyl bicycloheptene dicarboximide, piperonyl butoxide, pyriproxyfen, (s)-methoprene",
  "indoxacarb, permethrin",
  "flumethrin, imidacloprid"
)

```

First for ecto

```{r}

HSA_medication_5y_filt <- HSA_medication_5y_filt %>%
  mutate(ecto_use = if_else(
    str_detect(tolower(medication_ingredients), str_c(ecto, collapse = "|")),
    "ecto_yes",
    "ecto_no"
  ))

#a count of these for each dog exc if ecto no then just ecto no
ecto_5y_meds_per_dog <- HSA_medication_5y_filt %>%
  group_by(subject_id, ecto_use) %>%
  summarise(count = n(), .groups = "drop")
  #remove rows where if subject has ANY ecto_yes value then remove the ecto_no row/s for that subject id
  # Step 1: Get subject_ids that have ecto_yes
ecto_yes_subjects <- ecto_5y_meds_per_dog %>%
  filter(ecto_use == "ecto_yes") %>%
  pull(subject_id)

# Step 2: Keep ecto_yes rows or ecto_no only if no ecto_yes exists for that dog
ecto_5y_meds_per_dog_clean <- ecto_5y_meds_per_dog %>%
  filter(ecto_use == "ecto_yes" | !(subject_id %in% ecto_yes_subjects))

#calculate ecto yes quartiles
ecto_yes <- ecto_5y_meds_per_dog_clean %>%
  filter(ecto_use=="ecto_yes")

ecto_summary <- ecto_yes %>%
  summarise(
    min=min(count),
    Q1 = quantile(count, 0.25, na.rm = TRUE),
    median_count_per_dog = quantile(count, 0.50, na.rm = TRUE),  # Use quantile for clarity
    Q3 = quantile(count, 0.75, na.rm = TRUE),
    max=max(count),
    .groups = "drop"
  )

ecto_5y_meds_per_dog_clean_quartiles <- ecto_5y_meds_per_dog_clean %>%
  mutate(ecto_quantile = case_when(
    ecto_use == "ecto_no" ~ "no_ecto_admin",
    ecto_use == "ecto_yes" & count <= 1 ~ "Q1(1)",
    ecto_use == "ecto_yes" & count > 1 & count <= 2 ~ "Q2(1-2)",
    ecto_use == "ecto_yes" & count > 2 & count <= 4 ~ "Q3(2-4)",
    ecto_use == "ecto_yes" & count > 4 ~ "Q4(4-17)"
  ))
#then filt down to unique single row for each dog of its count or ecto no, then join back to the 3044 dogs and if no count or no ecto no then "no_ecto_recorded_in_time_period"
ecto_5y_meds_per_dog_clean_quartiles_whole_HSA_pop <- HSA_5y_and_lifetime_all_dogs %>% left_join(ecto_5y_meds_per_dog_clean_quartiles, by="subject_id")

#now replace NAs in ecto_quantile column with "no_med_records_this_time_period"
ecto_5y_meds_per_dog_clean_quartiles_whole_HSA_pop <- ecto_5y_meds_per_dog_clean_quartiles_whole_HSA_pop %>%
    mutate(ecto_quantile = replace_na(ecto_quantile, "no_med_use_recorded"))

#ditch count column 
ecto_5y_meds_per_dog_clean_quartiles_whole_HSA_pop <- ecto_5y_meds_per_dog_clean_quartiles_whole_HSA_pop %>%
  dplyr::select(c(-"count"))
#rename ecto_quantile to make clear its a 5y column
ecto_5y_meds_per_dog_clean_quartiles_whole_HSA_pop <- ecto_5y_meds_per_dog_clean_quartiles_whole_HSA_pop %>%
  rename(ecto_5y_quantiles = ecto_quantile)
```

Endo

```{r}
HSA_medication_5y_filt <- HSA_medication_5y_filt %>%
  mutate(endo_use = if_else(
    str_detect(tolower(medication_ingredients), str_c(endo, collapse = "|")),
    "endo_yes",
    "endo_no"
  ))

#a count of these for each dog exc if endo no then just endo no
endo_5y_meds_per_dog <- HSA_medication_5y_filt %>%
  group_by(subject_id, endo_use) %>%
  summarise(count = n(), .groups = "drop")
  #remove rows where if subject has ANY endo_yes value then remove the endo_no row/s for that subject id
  # Step 1: Get subject_ids that have endo_yes
endo_yes_subjects <- endo_5y_meds_per_dog %>%
  filter(endo_use == "endo_yes") %>%
  pull(subject_id)

# Step 2: Keep endo_yes rows or endo_no only if no endo_yes exists for that dog
endo_5y_meds_per_dog_clean <- endo_5y_meds_per_dog %>%
  filter(endo_use == "endo_yes" | !(subject_id %in% endo_yes_subjects))

#calculate endo yes quartiles
endo_yes <- endo_5y_meds_per_dog_clean %>%
  filter(endo_use=="endo_yes")

endo_summary <- endo_yes %>%
  summarise(
    min=min(count),
    Q1 = quantile(count, 0.25, na.rm = TRUE),
    median_count_per_dog = quantile(count, 0.50, na.rm = TRUE),  # Use quantile for clarity
    Q3 = quantile(count, 0.75, na.rm = TRUE),
    max=max(count),
    .groups = "drop"
  )

endo_5y_meds_per_dog_clean_quartiles <- endo_5y_meds_per_dog_clean %>%
  mutate(endo_quantile = case_when(
    endo_use == "endo_no" ~ "no_endo_admin",
    endo_use == "endo_yes" & count <= 1 ~ "Q1(1-2)",
    endo_use == "endo_yes" & count > 2 & count <= 3 ~ "Q2(2-3)",
    endo_use == "endo_yes" & count > 3 & count <= 4 ~ "Q3(3-4)",
    endo_use == "endo_yes" & count > 4 ~ "Q4(4-17)"
  ))
#then filt down to unique single row for each dog of its count or endo no, then join back to the 3044 dogs and if no count or no endo no then "no_endo_recorded_in_time_period"
endo_5y_meds_per_dog_clean_quartiles_whole_HSA_pop <- HSA_5y_and_lifetime_all_dogs %>% left_join(endo_5y_meds_per_dog_clean_quartiles, by="subject_id")

#now replace NAs in endo_quantile column with "no_med_records_this_time_period"
endo_5y_meds_per_dog_clean_quartiles_whole_HSA_pop <- endo_5y_meds_per_dog_clean_quartiles_whole_HSA_pop %>%
    mutate(endo_quantile = replace_na(endo_quantile, "no_med_use_recorded"))

#ditch count column 
endo_5y_meds_per_dog_clean_quartiles_whole_HSA_pop <- endo_5y_meds_per_dog_clean_quartiles_whole_HSA_pop %>%
  dplyr::select(c(-"count"))
#rename endo_quantile to make clear its a 5y column
endo_5y_meds_per_dog_clean_quartiles_whole_HSA_pop <- endo_5y_meds_per_dog_clean_quartiles_whole_HSA_pop %>%
  rename(endo_5y_quantiles = endo_quantile)
```

Re-combine ecto, endo and NSAID ones

```{r}
#parasites
ecto_endo <- ecto_5y_meds_per_dog_clean_quartiles_whole_HSA_pop %>% 
  left_join(endo_5y_meds_per_dog_clean_quartiles_whole_HSA_pop,by="subject_id")
#add back in NSAID exploration
ecto_endo_NSAID <- ecto_endo %>% 
  left_join(NSAID_5y_meds_per_dog_clean_quartiles_whole_HSA_pop,by="subject_id")
#delete duplicate .x and .y across the 3 dfs
ecto_endo_NSAID <- ecto_endo_NSAID %>%
  dplyr::select(-c(2:71,74:143))

write.csv(ecto_endo_NSAID,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/HSA_cohort_medications_5y_and_lifetime.csv")
```

### Get all medications data for endpoint dogs for 5y prior to endpoint for GRLS lymphoma clinical records cross-checking:

```{r}
write.csv(endpoints_medication_5y_filt,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/GRLS_endpoints_5y_prior_medications.csv")
```
