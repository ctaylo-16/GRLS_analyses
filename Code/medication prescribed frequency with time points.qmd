---
title: "Medication usage associated with time points and lifetime"
format: html
editor: visual
---

# Medication prescribing associations with time points and frequency

Load in medications dataset and endpoints datasets:

```{r}
library(tidyverse)
library(lubridate)
medications <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/GRLS_medications_initial_tidy.csv")
endpoints<- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/study_endpoints.csv")
#death date file
dog_profile <-read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/dog_profile.csv")
#keep only date of death and subject id
dog_profile <- dog_profile %>%
  dplyr::select(c(subject_id,death_date))
endpoints_profile <- endpoints %>%
  left_join(dog_profile, by="subject_id")
```

Load in HSA cohort for endpoint of final point 31/12/24 or diagnosis point or earlier if died:

```{r}
HSA_cohort <-read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/HSA_study_pop_with_final_date_with_final_study_record_year.csv")
HSA_cohort <- HSA_cohort %>%
  dplyr::select(-c(X))
```

## Frequency of prescription of a drug group in whole life:

-   using active ingredients group as this is broad and can try medication ingredient itself if this shows any interesting results

Group for each dog rows by active ingredient group

```{r}
number_of_prescriptions_drug_groups_whole_life <- medications %>%
  group_by(subject_id, active_ingredient_groups) %>%  # Group by both dog and drug category
  summarise(lifetime_total_prescriptions = n(), .groups = "drop") 


# Pivot the table to wide format
number_of_prescriptions_drug_groups_whole_life_wide <- number_of_prescriptions_drug_groups_whole_life %>%
  pivot_wider(
    names_from = active_ingredient_groups,  # Make drug groups into column names
    values_from = lifetime_total_prescriptions,      # Fill columns with the counts
    values_fill = 0                         # Replace NA with 0 for drug groups not prescribed
  )
```

Group for each dog rows by medication ingredient top 100 group

```{r}
number_of_prescriptions_ingredient_100_groups_whole_life <- medications %>%
  group_by(subject_id, medication_ingredients_100) %>%  # Group by both dog and drug category
  summarise(lifetime_total_prescriptions = n(), .groups = "drop") 


# Pivot the table to wide format
number_of_prescriptions_ingredient_100_groups_whole_life_wide <- number_of_prescriptions_ingredient_100_groups_whole_life %>%
  pivot_wider(
    names_from = medication_ingredients_100,  # Make drug groups into column names
    values_from = lifetime_total_prescriptions,      # Fill columns with the counts
    values_fill = 0                         # Replace NA with 0 for drug groups not prescribed
  )
```

## Endpoint/dead dogs only calculations

## Incorporating diagnosis date into medication usage

Approx 50 dogs from endpoint data do not have meds data submitted

```{r}
#combine endpoints and medications dataset, NB only the endpoints  ~1800 dogs retained rahter than the 3000
endpoints_medications <- medications %>%
  inner_join(endpoints_profile, by = "subject_id")

#sense check same num unique IDs in data
unique_end <- unique(endpoints$subject_id)
unique_endmed <- unique(endpoints_medications$subject_id)

#delete pointless columns
endpoints_medications <- endpoints_medications %>%
  dplyr::select(-c(X,public_id.x,public_id.y,status.x,status.y))

```

Join to HSA cohort

```{r}
HSA_medications <- medications %>%
  inner_join(HSA_cohort,by="subject_id")
HSA_medications <- HSA_medications %>%
  dplyr::select(-c(X))
```

## Medications length of time/number of times prescribed:

Non use vs intermediate use vs long term use.

There are a few (human) papers defining this usage:

"We classiﬁed use as non-use (0–1 prescription), intermediate use (2–7 prescriptions), and long-term use (≥8 prescriptions). Eight prescriptions was chosen as a cut-off as drugs for chronic treatment are typically supplied for 3 months use for each dispensing in Denmark, whereby our deﬁnition of long-term use would correspond to two years' cumulative treatment." - Pottegard et al., 2016

\- exclude drug usage for the year prior to diagnosis (recognised that increased prescribing in year prior to diagnosis possibly due to cancer diagnosing issues PLUS likely wont be involved in cancer diagnosis

First steps, code to retain rows only where X number of years between prescription ('record_date') and diagnosis date('diagnosis_date')

```{r}
#make sure date columns in dateformat
endpoints_medications <- endpoints_medications %>%
      mutate(
    diagnosis_date2 = as.Date(diagnosis_date, format = "%Y-%m-%d"),  # yyyy-mm-dd
    record_date2= as.Date(record_date, format = "%Y-%m-%d")         # dd-mm-yyyy
  )
endpoints_medications$mapped_duration <- as.numeric(endpoints_medications$mapped_duration)

#trial to retain rows ?5y before diagnosis?
endpoints_medication_5y_filt <-  endpoints_medications %>%
  mutate(
    # Calculate the time difference in years between record_date and diagnosis_date
    year_difference = as.numeric(difftime(record_date2, diagnosis_date2, units = "days")) / 365.25
  ) %>%
  # Filter rows where the year difference is 5 years or less
  filter(abs(year_difference) <= 5) 




#trial to retain rows ?3y before diagnosis?
endpoints_medication_3y_filt <-  endpoints_medications %>%
  mutate(
    # Calculate the time difference in years between record_date and diagnosis_date
    year_difference = as.numeric(difftime(record_date2, diagnosis_date2, units = "days")) / 365.25
  ) %>%
  # Filter rows where the year difference is 5 years or less
  filter(abs(year_difference) <= 3) 


```

Now perform non-use, intermediate and chronic use calculations:

NB. using mapped_duration column where duration has been modified so that a value of 1=4 weeks ie. 1m and all other values are multiples or fractions of that eg. 3 = 3 month course, 0.25 = 1 week course of drug. Based on this, value of 24 would constitute chronic use

Using same cut-offs as humans:

```{r}


classify_drug_prescription_freq_duration_5y <- endpoints_medication_5y_filt %>%
  group_by(subject_id, active_ingredient_groups) %>%
  # Sum mapped_duration for each active_ingredient_group per subject_id
  summarise(total_duration = sum(mapped_duration, na.rm = TRUE)) %>%
  # Classify based on total_duration
  mutate(
    duration_category = case_when(
      total_duration >= 24 ~ "chronic_use",   # 24 months or more
      total_duration < 24 & total_duration >= 6 ~ "intermediate_use",  # 6 to less than 24 months
      TRUE ~ "non_use"  # less than 6 months or no duration info
    )
  ) %>%  # Count the number of prescriptions grouped by active_ingredient_groups and duration_category
  count(active_ingredient_groups, duration_category, name = "prescription_count") %>%
  # Spread the counts into separate columns for each duration category
  pivot_wider(names_from = duration_category, values_from = prescription_count, values_fill = 0)
```

From this human classifying, we have only got \~15 dogs with any drug prescription classified as "chronic". Probably a lower classification for chronic is required however, also \~20k of the \~36k records do not have a duration mapped so need to think on potential way to exclude duration?

```{r}
table(endpoints_medications$mapped_duration)

sum(is.na(endpoints_medications$mapped_duration))

missing_duration <-endpoints_medications %>%
  filter(is.na(mapped_duration))


table(missing_duration$duration)

```

Issue of what to do with "continuous" and "as needed" as this is almost all the missing ones ?

-   Could reclass to give any that are "continuous months" value of 1m and "continuous days" value of 1d etc.?

-   Alternatively perhaps just do number of rows for these time points and base calcs on number of times a drug prescribed rather than length of time??

```{r}
continuous <- endpoints_medications %>%
  filter(duration=="continuous")
```

### Trialing with number of times drug prescribed rather than duration:

#### 5 years prior to endpoint

```{r}
classify_drug_prescription_freq_events_5y <- endpoints_medication_5y_filt %>%
  group_by(subject_id, active_ingredient_groups) %>%
  summarise(total_prescriptions_5y = n(), .groups = "drop") 
#now classify the counts
classify_drug_prescription_freq_events_5y <- classify_drug_prescription_freq_events_5y %>%
  mutate(total_prescriptions_5y_cat = case_when(
    total_prescriptions_5y >= 24 ~ "chronic_use",   # 24 months or more
      total_prescriptions_5y< 24 & total_prescriptions_5y>= 6 ~ "intermediate_use",  # 6 to less than 24 months
      TRUE ~ "non_use"  # less than 6 months or no info
  )
  )

# Pivot the table to wide format
classify_drug_prescription_freq_events_5y_wide <- classify_drug_prescription_freq_events_5y %>%
  #remove the actual counts of useage from this table
  dplyr::select(-total_prescriptions_5y)%>%
  pivot_wider(
    names_from = active_ingredient_groups,  # Make drug groups into column names
    values_from = total_prescriptions_5y_cat,      # Fill columns with the counts
 #for those with no use put down as non_use
 values_fill = "non_use"                        # Replace NA with 0 for drug groups not prescribed
     )

```

Even with this, \~70 dogs only fit the chronic use category.

#### 3 years prior to endpoint

```{r}
classify_drug_prescription_freq_events_3y <- endpoints_medication_3y_filt %>%
  group_by(subject_id, active_ingredient_groups) %>%
  summarise(total_prescriptions_3y = n(), .groups = "drop") 
#now classify the counts
classify_drug_prescription_freq_events_3y <- classify_drug_prescription_freq_events_3y %>%
  mutate(total_prescriptions_3y_cat = case_when(
    total_prescriptions_3y >= 24 ~ "chronic_use",   # 24 months or more
      total_prescriptions_3y< 24 & total_prescriptions_3y>= 6 ~ "intermediate_use",  # 6 to less than 24 months
      TRUE ~ "non_use"  # less than 6 months or no info
  )
  )

# Pivot the table to wide format
classify_drug_prescription_freq_events_3y_wide <- classify_drug_prescription_freq_events_3y %>%
  #remove the actual counts of useage from this table
  dplyr::select(-total_prescriptions_3y)%>%
  pivot_wider(
    names_from = active_ingredient_groups,  # Make drug groups into column names
    values_from = total_prescriptions_3y_cat,      # Fill columns with the counts
 #for those with no use put down as non_use
 values_fill = "non_use"                        # Replace NA with 0 for drug groups not prescribed
     )
```

Alternative methodology rather than high,intermed or non-use = median drug usage and then make split based on that (e.g quartiles around median)

```{r}
#trial to retain rows ?5y before diagnosis?
HSA_medication_5y_filt <-  HSA_medications %>%
  group_by(subject_id) %>%
  filter(year_in_study >= (year_in_study_diagnosis_or_final_record_year - 5))




```


This code is calculating quartiles and halves for each active ingredient group rather than prev code (now deleted which did it for overall medication counts)


```{r}
# Step 1: Count occurrences per dog per active ingredient group
meds_per_dog <- HSA_medication_5y_filt %>%
  group_by(subject_id, active_ingredient_groups) %>%
  summarise(count = n(), .groups = "drop")

# Step 2: Compute quartiles *within* each active ingredient group
medication_summary <- meds_per_dog %>%
  group_by(active_ingredient_groups) %>%
  summarise(
    Q1 = quantile(count, 0.25, na.rm = TRUE),
    median_count_per_dog = quantile(count, 0.50, na.rm = TRUE),  # Use quantile for clarity
    Q3 = quantile(count, 0.75, na.rm = TRUE),
    .groups = "drop"
  )



# Step 3: Join quartiles back to individual dog data and assign quartile categories
meds_per_dog_quart <- meds_per_dog %>%
  left_join(medication_summary, by = "active_ingredient_groups") %>%
  mutate(
    quartile = case_when(
      count <= Q1 ~ "Q1",
      count > Q1 & count <= median_count_per_dog ~ "Q2",
      count > median_count_per_dog & count <= Q3 ~ "Q3",
      count > Q3 ~ "Q4"
    ),
    # Assign halves based on median
    half = ifelse(count <= median_count_per_dog, "lower_half", "upper_half")
  ) %>%
  select(subject_id, active_ingredient_groups, quartile, half)


# Step 4: Reshape so each medication group is a column with Q1-Q4 values per dog
meds_wide_quart <- meds_per_dog_quart %>%
  pivot_wider(names_from = active_ingredient_groups, values_from = c(half,quartile))

# View the final data
meds_wide_quart
```




Now examining the completeness of this data

```{r}
colSums(is.na(meds_wide_quart))

meds_wide_no_sub_quart <- meds_wide_quart %>%
  dplyr::select(-subject_id)
lapply(meds_wide_no_sub_quart, function(x) table(x, useNA = "ifany"))

```

Majority of rows (of the 2800 dogs with meds records for these 5y) are missing a lot for all dogs - except anti-inflam, anti-microbials and anti-parasites

some drugs not enough variablity to split into quartiles, so also create halves variable - although actually when examining this it just looks like probably many dogs are not prescribed certain drugs = lots of NAs

Tidy up quartiles data then save csv of dataset at end of medications:

```{r}
meds_wide_quart <- meds_wide_quart %>%
  rename_with(~ paste0(.x, "_5y_prior_endpoint"), -1)
```

Seperate variable creation to count lifetime drug admin prior to endpoint and split into quartiles

```{r}
lifetime_meds_per_dog <- HSA_medications %>%
  group_by(subject_id, active_ingredient_groups) %>%
  summarise(count = n(), .groups = "drop")  # Count occurrences per dog per group

# Step 2: Get summary stats across all dogs for each medication group
lifetime_meds_summary <- lifetime_meds_per_dog %>%
  group_by(active_ingredient_groups) %>%
  summarise(
    Q1 = quantile(count, 0.25, na.rm = TRUE),
    median_count_per_dog = quantile(count, 0.50, na.rm = TRUE),  # Use quantile for clarity
    Q3 = quantile(count, 0.75, na.rm = TRUE),
    .groups = "drop"
  )

# Step 3: Join quartiles back to individual dog data and assign quartile categories
lifetime_meds_per_dog_quart <- lifetime_meds_per_dog %>%
  left_join(lifetime_meds_summary, by = "active_ingredient_groups") %>%
  mutate(
    quartile = case_when(
      count <= Q1 ~ "Q1",
      count > Q1 & count <= median_count_per_dog ~ "Q2",
      count > median_count_per_dog & count <= Q3 ~ "Q3",
      count > Q3 ~ "Q4"
    ),
    # Assign halves based on median
    half = ifelse(count <= median_count_per_dog, "lower_half", "upper_half")
  ) %>%
  select(subject_id, active_ingredient_groups, quartile, half)


# Step 4: Reshape so each medication group is a column with Q1-Q4 values per dog
lifetime_meds_wide_quart <- lifetime_meds_per_dog_quart %>%
  pivot_wider(names_from = active_ingredient_groups, values_from = c(half,quartile))




# View the final data
lifetime_meds_wide_quart






lifetime_meds_wide_quart <- lifetime_meds_wide_quart %>%
  rename_with(~ paste0(.x, "_lifetime"), -1)


```

Combine 5y and lifetime

```{r}
HSA_5y_and_lifetime <- lifetime_meds_wide_quart %>%
  left_join(meds_wide_quart, by="subject_id")

#now replace Nas with 
HSA_5y_and_lifetime <- HSA_5y_and_lifetime %>%
  mutate_all(~ replace(., is.na(.), "drug_not_administered"))

write.csv(HSA_5y_and_lifetime,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/HSA_cohort_medications_5y_and_lifetime.csv")
```
