house <- house %>%
mutate(pipes_metal_any = case_when(
#only keeping the no_records_available for these columns as the specify columns are super messy and missing loads
pipes_copper_metal == "no_records_available" |
sec_pipes_copper_metal == "no_records_available" ~ "no_records_available",
pipes_other_specify %in% metal ~ "1",
sec_pipes_other_specify %in% metal ~ "1",
pipes_copper_metal == "1" ~ "1",
sec_pipes_copper_metal == "1" ~ "1",
TRUE ~ "0"
))
house <- house %>%
mutate(pipes_plastic_any = case_when(
pipes_pvc_plastic == "no_records_available" |
sec_pipes_pvc_plastic == "no_records_available" ~ "no_records_available",
pipes_other_specify %in% plastic ~ "1",
sec_pipes_other_specify %in% plastic ~"1",
pipes_pvc_plastic == "1" ~ "1",
sec_pipes_pvc_plastic == "1" ~ "1",
TRUE ~ "0"
))
municipal <-c("municipal","municipal at home, well at work with me daily","municipal well","filtered municipal","municipal from lake","municipal filtered via reverse osmosis","municiapl wells with home filtration system","municipal with town well water","highly filtered municipal","private through municipal","municipal and well","both municipal and well","municipal and private well","municipal filtered","municipal with a reverse osmosis filtration unit","municipal but reverse osmosis filtered","filtered muni water","municipal but reverse osmosis water system")
groundwater <-c("well","ground","underground aquifers","underground aquifer","community owned wells","town well water","town well","community well w/chlorine","community well chlorine filter","subdivision well","community well for subdivision  has chloroine  we filter all chlorine out and have a filtration system","well water with chlorine filter","comunity well with a clorine station  we have a filter in our home to filter out the chlorine","well and municipal","both well and municipal","well 50%, municipal 50%", "fox river and well","1/2 well 1/2 municipal","reverse osmosis from well","aquifer","town wells"," community well, treated & filtered", "wel and municipal","well and spring","well water goes to municipal","community well water","well/bottle/city","aquafer")
spring_surface <-c("berkeley springs spring water","spring","hicknley springs","spring water","lake water via city","neighborhood water tanks from lake tahoe water","lake tahoe","lake michigan","natural spring","spring on property", "lake filtered/treated","lake filtered system")
bottled<-c("bottled","bottled spring water","bottled water","bottled water/municipal",".bottle","bottled spring","dogs drink bottled","bottled and municipal")
rainwater_cistern<-c("cistern", "rain fed cistern","rain fed cistern filtered and uv sanitized","uv and filtered rain filled cistern","rain water","rain","rain water tanks","rainwater","rain water ")
house <- house %>%
mutate(water_source_2 = case_when(
water_source_other %in% municipal ~ "municipal",
water_source_other %in% groundwater ~ "groundwater",
water_source_other %in% spring_surface ~ "spring_surface",
water_source_other %in% bottled ~ "bottled",
water_source_other %in% rainwater_cistern ~ "rainwater_cistern",
TRUE ~ water_source
))
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")
#early life
columns_to_check <- c("area_type","house_type","water_source","pipes_metal_any","pipes_plastic_any","heating_fuel_primary","cooking_fuel_primary","heating_fuel_secondary","cooking_fuel_secondary")
study_years <- c(0,1,2)
year_column <-"year_in_study"
house <- check_exposure_mode(house, columns_to_check, study_years,year_column)
#rest of life
study_years <- c(3,4,5,6,7,8,9,10)
year_column <-"year_in_study"
house <- check_exposure_mode(house, columns_to_check, study_years,year_column)
#late life
study_years <- c(0,1,2,3,4,5,6,7,8,9,10)
year_column <-"year_in_study"
house <- check_exposure_mode(house, columns_to_check, study_years,year_column)
print(colnames(house))
house_tidy <- house %>%
rename_with(
~ gsub("_0_1_2$", "_early_life", .),
ends_with("_0_1_2")
)
house_tidy <- house_tidy%>%
rename_with(
~ gsub("_0_1_2_3_4_5_6_7_8_9_10$", "_whole_life", .),
ends_with("_0_1_2_3_4_5_6_7_8_9_10")
)
house_tidy <- house_tidy %>%
rename_with(
~ gsub("_3_4_5_6_7_8_9_10$","_rest_of_life",.),
ends_with("_3_4_5_6_7_8_9_10")
)
#check renaming all OK
print(colnames(house_tidy))
house_tidy <- house_tidy %>%
group_by(subject_id) %>%
mutate(
avg_house_age = mean(
# convert "no_records_available" to NA, others to numeric
as.numeric(ifelse(house_age == "no_records_available", NA, house_age)),
na.rm = TRUE
)
)
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")
#early life
columns_to_check <- c("region_name","state","zip")
study_years <- c(0,1,2)
year_column <-"year_in_study"
location <- check_exposure_mode(location, columns_to_check, study_years,year_column)
#rest of life
study_years <- c(3,4,5,6,7,8,9,10)
year_column <-"year_in_study"
location <- check_exposure_mode(location, columns_to_check, study_years,year_column)
#late life
study_years <- c(0,1,2,3,4,5,6,7,8,9,10)
year_column <-"year_in_study"
location <- check_exposure_mode(location, columns_to_check, study_years,year_column)
result_df3 <- location %>%
rename_with(
~ gsub("_0_1_2$", "_early_life", .),
ends_with("_0_1_2")
)
result_df3 <- result_df3 %>%
rename_with(
~ gsub("_0_1_2_3_4_5_6_7_8_9_10$", "_whole_life", .),
ends_with("_0_1_2_3_4_5_6_7_8_9_10")
)
result_df3 <- result_df3 %>%
rename_with(
~ gsub("_3_4_5_6_7_8_9_10$","_rest_of_life",.),
ends_with("_3_4_5_6_7_8_9_10")
)
#check renaming all OK
print(colnames(result_df3))
#make distinct house and locaiton dfs with 1 row per dog
location_distinct <- result_df3 %>%
distinct(subject_id,.keep_all = TRUE)
house_tidy_distinct <- house_tidy %>%
distinct(subject_id,.keep_all = TRUE)
#keep only relevant cols
location_distinct_abr <- location_distinct %>%
dplyr::select(subject_id,13:25)
house_tidy_distinct_abr <- house_tidy_distinct %>%
dplyr::select(c(subject_id,57:84))
dog_pop_deprivation_enviro_smoking_sleep_lifestyle_all_house_location <- dog_pop_deprivation_enviro_smoking_sleep_lifestyle_all %>% left_join(location_distinct_abr,by="subject_id")
dog_pop_deprivation_enviro_smoking_sleep_lifestyle_all_house_location <- dog_pop_deprivation_enviro_smoking_sleep_lifestyle_all_house_location %>% left_join(house_tidy_distinct_abr,by="subject_id")
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")
#add to house tidy the final record year column
cohort_dogs_final_date <- dog_pop_deprivation_enviro_smoking_sleep_lifestyle_all_house_location %>%
dplyr::select(c(subject_id,year_in_study_diagnosis_or_final_record_year))
#join to house tidy
house_tidy <- house_tidy %>% left_join(cohort_dogs_final_date,by="subject_id")
house_tidy$year_in_study_diagnosis_or_final_record_year <-as.numeric(house_tidy$year_in_study_diagnosis_or_final_record_year)
house_tidy$year_in_study <-as.numeric(house_tidy$year_in_study)
#1 dog has an NA value for final diagnosis year replace with a 1
house_tidy <- house_tidy %>%
mutate(year_in_study_diagnosis_or_final_record_year = replace_na(year_in_study_diagnosis_or_final_record_year, 1))
columns_to_check <- c("area_type","house_type","water_source","pipes_metal_any","pipes_plastic_any","heating_fuel_primary","cooking_fuel_primary","heating_fuel_secondary","cooking_fuel_secondary")
cohort_house <- check_exposure_mode_X_prev_years(
data = house_tidy,
columns_to_check = columns_to_check,
year_range = 5, # Number of years prior to consider
year_column = "year_in_study_diagnosis_or_final_record_year",
study_year_column = "year_in_study"
)
#now keeping 1 row per dog
cohort_house_per_dog <- cohort_house %>%
distinct(subject_id,.keep_all = TRUE)
#keep only rel columns
cohort_house_per_dog_abr <- cohort_house_per_dog %>%
dplyr::select(c(subject_id,86:94))
dog_pop_deprivation_enviro_smoking_sleep_lifestyle_all_house_location2 <- dog_pop_deprivation_enviro_smoking_sleep_lifestyle_all_house_location %>% left_join(cohort_house_per_dog_abr,by="subject_id")
#read in all csvs that start with the string "conditions_
folder_path <- "C:/Users/ctaylor18/GitHub/GRLS_analyses/Data"
# Get a list of all CSV files that start with "conditions_with"
csv_files <- list.files(path = folder_path, pattern = "^conditions_.*\\.csv$", full.names = TRUE)
for (file in csv_files) {
# Extract the file name (without the path and extension) for the data frame name
dataframe_name <- tools::file_path_sans_ext(basename(file))
# Dynamically assign each file to a data frame with the extracted name
assign(dataframe_name, read.csv(file))
}
#remove not relevant ones
rm(conditions_dictionary)
#combine the comorbidities datasets
comorbs_all <- cbind(conditions_cardio,conditions_dental,conditions_ear_nose_throat,conditions_endocrine,conditions_eye,conditions_gastrointestinal,conditions_hematologic,conditions_infectious,conditions_musculoskeletal)
#remove duplicate subjectid columns
comorbs_unique <- comorbs_all %>%
dplyr::select(unique(names(.)))
#potential chronic inflam conditions
comorbs_to_find <-c("congestive_heart_failure",
"cardiomyopathy",
"hypertension",
"heartworm_infection",
"lower_airway_disease",
"dental_tarter_calculus",
"addisons_disease",
"autoimmune_thyroiditis",
"cushings_disease",
"diabetes_insipidus",
"diabetes_mellitus",
"hyperadrenalestrogenism",
"hypercalcemia",
"hypothyroidism",
"pancreatic_insufficiency",
"keratoconjunctivitis_sicca",
"pigmentary_uveitis",
"uveitis",
"chronic_colitis",
"malabsorptive_disorder",
"megaesophagus",
"pancreatitis",
"anaplasma",
"babesia",
"canine_herpesvirus",
"coccidia",
"cryptosporidium",
"ear_mites",
"ehrlichia",
"eimeria",
"fleas",
"fungal_infection",
"giardia",
"granuloma",
"hookworms",
"influenza",
"isospora",
"leptospirosis",
"lyme_disease",
"other_ectoparasite",
"parvovirus",
"rocky_mountain_spotted_fever",
"roundworms",
"tapeworms",
"ticks",
"tracheobronchitis",
"unspecified_gastrointestinal_parasite",
"valley_fever",
"whipworms",
"immune_related_musculoskeletal_disorder",
"osteoarthritis",
"rheumatoid_arthritis",
"laryngeal_paralysis",
"meningitis",
"meningoencephalitis",
"myasthenia_gravis",
"erythema_multiforme",
"flea_allergy_dermatitis",
"food_allergy_dermatitis",
"r_o_atopy")
#specific comorb groups
intestinal_parasitism <- c("giardia", "hookworms", "coccidia", "tapeworms", "whipworms", "roundworms", "eimeria", "isospora","cryptosporidium","eimeria","tapeworms")
tick_borne_parasitism <-c("lyme_disease", "anaplasma", "rocky_mountain_spotted_fever", "ticks", "ehrlichia", "lyme disease", "lyme diseases, oa?", "lyme/anaplasma", "lyme+", "anaplasma and lyme +", "positive anaplasma", "erlichia +", "erlichia","valley_fever","babesia","anaplasma","ehrlichia","lyme_disease")
other_parasitism <-c("fleas", "fungal_infection", "heartworm", "ear_mites","other_ectoparasite","heartworm_infection")
all_parasitism<-c("giardia", "hookworms", "coccidia", "tapeworms", "whipworms", "roundworms", "eimeria", "isospora","lyme_disease", "anaplasma", "rocky_mountain_spotted_fever", "ticks", "ehrlichia", "lyme disease", "lyme diseases, oa?", "lyme/anaplasma", "lyme+", "anaplasma and lyme +", "positive anaplasma", "erlichia +", "erlichia","fleas", "fungal_infection", "heartworm", "ear_mites","heartworm_infection","other_ectoparasite")
infectious <- c("leptospirosis","parvovirus","bacterial cystitis/recurrent uti", "chronic uti's/ bacterial cystitis", "cystitis", "uti", "frequent utis", "previous utis", "chronic urinary incontinence","history of valley fever", "mma- coccidioides")
orthopaedic <-c("osteoarthritis", "l ccl partial tear", "oa of stifle", "hip dysplasia", "right elbow dysplasia grade ii", "ccl rupture", "acl tear", "tendonitis/ arthritis", "arthritis- cervical neck spine", "lh partial ccl tear, lh iliopsoas injury", "chronic lameness- hx of car accident", "lameness","hypothyroidism, chronic lameness, obesity","overweight, arthritis","dvd, larpar", "seizures, oa","tail fracture", "broken leg, histiocytoma","osteochondritis_dissecans","intervertebral_disc_disease","lameness","musculoskeletal_pain","osteomyeltiis","cruciate_ligament_rupture","hip_dysplasia","elbow_dysplasia","crepitus_decreased_range_of_motion","bone_fractures","limber_tail_syndrome","panosteitis")
immune_mediated <- c("uveitis", "autoimmune_thyroiditis", "keratoconjunctivitis_sicca", "megaesophagus", "diabetes_mellitus", "cushings_disease", "hypothyroidism", "granuloma", "immune complex formation", "suspected cushings/ thyroid carcinoma","dvd, larpar","immune_related_musculoskeletal_disorder","rheumatoid_arthritis","diabetes_insipidus","hypothyroidism","pancreatic_insuficiency","addisons_disease","autoimmune_thyroiditis","cushings_disease","hyperadrenalestrogenism","hypercalcemia")
cardiovascular <- c("cardiomyopathy", "hypertension", "heart base tumor", "heart base mass", "mild degenerative valve disease", "degenerative mitral and tricuspid valve disease", "mitral valve disease", "pulmonary thrombosis", "portal vein thrombus","arrhythmia","atrial enlargement","cardiomegaly","cardiomyopathy","congestive_heart_failure","hypertension","murmur","lower_airway_disease","myocardial_dysfunction","pleural_effusion","pulmonic_stenosis","pneumothorax","pulmonic_stenosis","subaortic_stenosis","tachycardia","valvular_disease")
gastrointestinal <-c("chronic_colitis", "pancreatitis", "malabsorptive_disorder", "chronic pancreatitis", "cystic endometrial hyperplasia", "intermittent mixed bowel diarrhea", "intermittent diarrhea - bacterial", "gastric ulcers","mesenteric volvulus","fb","esophagitis","diarrhea","dietary_indiscretion","food_sensitivity","gastrointestinal_foreign_body","gastorintestinal_ulcer","intussusception","malabsorptive_disorder","megaesophagus")
inflammatory_other <- c("tracheobronchitis", "hypercalcaemia", "pigmentary_uveitis", "ear infections", "chronic pyoderma", "chronic pruritis", "chronic rhinitis/ nasal discharge", "allergy, obesity", "pruritis", "severe allergies", "atopy", "allergies, chronic otitis", "chronic hot spots, skin infections", "many pyodera/dermatitis events", "chronic otitis, allergic dermatitis", "dermatitis", "food allergy", "skin allergies", "chronic otitis, overweight", "atopic dermatitis, allergies", "seasonal allergies/pyoderma", "chronic otitis, chronic allergies", "dermatitis lip fold","anal sac infection","otitis_externa","otitis_media","aural_haematoma","aural_foreign_body","pharyngitis","rhinitis","hypercalcaemia","keratoconjunctivitis_sicca","hypercalcemia","influenza","parvovirus")
chronic_inflammatory <-c("congestive_heart_failure",
"cardiomyopathy",
"hypertension",
"heartworm_infection",
"lower_airway_disease",
"dental_tarter_calculus",
"addisons_disease",
"autoimmune_thyroiditis",
"cushings_disease",
"diabetes_insipidus",
"diabetes_mellitus",
"hyperadrenalestrogenism",
"hypercalcemia",
"hypothyroidism",
"pancreatic_insufficiency",
"keratoconjunctivitis_sicca",
"pigmentary_uveitis",
"uveitis",
"chronic_colitis",
"malabsorptive_disorder",
"megaesophagus",
"pancreatitis",
"anaplasma",
"babesia",
"canine_herpesvirus",
"coccidia",
"cryptosporidium",
"ear_mites",
"ehrlichia",
"eimeria",
"fleas",
"fungal_infection",
"giardia",
"granuloma",
"hookworms",
"influenza",
"isospora",
"leptospirosis",
"lyme_disease",
"other_ectoparasite",
"parvovirus",
"rocky_mountain_spotted_fever",
"roundworms",
"tapeworms",
"ticks",
"tracheobronchitis",
"unspecified_gastrointestinal_parasite",
"valley_fever",
"whipworms",
"immune_related_musculoskeletal_disorder",
"osteoarthritis",
"rheumatoid_arthritis",
"laryngeal_paralysis",
"meningitis",
"meningoencephalitis",
"myasthenia_gravis",
"erythema_multiforme",
"flea_allergy_dermatitis",
"food_allergy_dermatitis",
"r_o_atopy")
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")
conditions_in_df_and_list <- intersect(colnames(comorbs_unique),comorbs_to_find)
comorbs_unique_2 <- comorbs_unique %>%
#get rid of the to_date row for each dog
filter(to_date !=1) %>%
#get rid of the NA rows in the dataset - then add in later at the 3044 level to be "no_records_available" across the comorbs
dplyr::select(-c(relationship_category,year_in_study,record_date,to_date))
###not using currently as want to keep the NA to tidy at end into "no_records_available"
#comorbs_unique_2<- comorbs_unique_2%>%
# replacing NA values with 0 across comorbidity columns
# mutate_at(vars(3:196), ~replace_na(., 0))
#remove the rows in the comorbs_unique_2 that have got NAs across whole dataset for each dog. then when creating cohort variable at end can recode any of these dogs with no records as "no_records_available" (very few missing records across WHOLE study period, generally just occ year)
cols_to_check <- c(7:21,164:196)
comorbs_unique_2 <- comorbs_unique_2[complete.cases(comorbs_unique_2[, cols_to_check]), ]
comorbs_unique <- unique(comorbs_unique_2$subject_id)
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")
conditions_in_df_and_list <- intersect(colnames(comorbs_unique),comorbs_to_find)
comorbs_unique_2 <- comorbs_unique %>%
#get rid of the to_date row for each dog
filter(to_date !=1) %>%
#get rid of the NA rows in the dataset - then add in later at the 3044 level to be "no_records_available" across the comorbs
dplyr::select(-c(relationship_category,year_in_study,record_date,to_date))
#read in all csvs that start with the string "conditions_
folder_path <- "C:/Users/ctaylor18/GitHub/GRLS_analyses/Data"
# Get a list of all CSV files that start with "conditions_with"
csv_files <- list.files(path = folder_path, pattern = "^conditions_.*\\.csv$", full.names = TRUE)
for (file in csv_files) {
# Extract the file name (without the path and extension) for the data frame name
dataframe_name <- tools::file_path_sans_ext(basename(file))
# Dynamically assign each file to a data frame with the extracted name
assign(dataframe_name, read.csv(file))
}
#remove not relevant ones
rm(conditions_dictionary)
#combine the comorbidities datasets
comorbs_all <- cbind(conditions_cardio,conditions_dental,conditions_ear_nose_throat,conditions_endocrine,conditions_eye,conditions_gastrointestinal,conditions_hematologic,conditions_infectious,conditions_musculoskeletal)
#remove duplicate subjectid columns
comorbs_unique <- comorbs_all %>%
dplyr::select(unique(names(.)))
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")
conditions_in_df_and_list <- intersect(colnames(comorbs_unique),comorbs_to_find)
comorbs_unique_2 <- comorbs_unique %>%
#get rid of the to_date row for each dog
filter(to_date !=1) %>%
#get rid of the NA rows in the dataset - then add in later at the 3044 level to be "no_records_available" across the comorbs
dplyr::select(-c(relationship_category,year_in_study,record_date,to_date))
###not using currently as want to keep the NA to tidy at end into
cols_to_check <- c(7:21,164:196)
comorbs_unique_2 <- comorbs_unique_2[complete.cases(comorbs_unique_2[, cols_to_check]), ]
#checking all dogs have some records to see if need to code any with "no_records_available" at end - all dogs have comorbs records in their lifetime
comorbs_unique <- unique(comorbs_unique_2$subject_id)
df_result2 <- comorbs_unique_2 %>%
group_by(subject_id) %>%
mutate(
#is there any chronic inflam condition present in at least 1 row for subject id
chronic_inflam_present_lifetime = if_else(
rowSums(across(all_of(conditions_in_df_and_list))) > 0 &
rowSums(across(all_of(conditions_in_df_and_list), ~ sum(. == 1)) > 1),
1,
0
),
#how many chronic inflam conditions
number_comorbs_present_lifetime = if_else(
chronic_inflam_present_lifetime == 1,
rowSums(across(all_of(conditions_in_df_and_list))),
0
),
,
#what were the comorbidities
comorbidities_lifetime = if_else(
chronic_inflam_present_lifetime == 1,
apply(across(all_of(conditions_in_df_and_list)), 1, function(x) paste(names(which(x == 1)), collapse = "_")),
"")
) %>%
ungroup()
#keeping record_date for linking up to cancer diagnosis but remove to_date column
comorbs_unique_3 <- comorbs_unique %>%
#  mutate_at(vars(5:200), ~replace_na(., 0)) %>%
filter(to_date !=1) %>%
dplyr::select(-c(relationship_category,to_date)) %>%
rename(year_in_study_comorb = year_in_study)
comorbs_unique2 <- comorbs_all %>%
dplyr::select(unique(names(.)))
#keeping record_date for linking up to cancer diagnosis but remove to_date column
comorbs_unique_3 <- comorbs_unique2 %>%
#  mutate_at(vars(5:200), ~replace_na(., 0)) %>%
filter(to_date !=1) %>%
dplyr::select(-c(relationship_category,to_date)) %>%
rename(year_in_study_comorb = year_in_study)
cols_to_check <- c(5:23,26:164,165:198)
comorbs_unique_3 <- comorbs_unique_3[complete.cases(comorbs_unique_3[, cols_to_check]), ]
##checking all dogs have some records to see if need to code any with "no_records_available" at end - all dogs have comorbs records in their lifetime
comorbs_unique_5y <- unique(comorbs_unique_3$subject_id)
#run all functions above onto this dataset
df_result3 <- comorbs_unique_3 %>%
group_by(subject_id) %>%
mutate(
#is there any chronic inflam condition present in at least 1 row for subject id
chronic_inflam_present_5y = if_else(
rowSums(across(all_of(conditions_in_df_and_list))) > 0 &
rowSums(across(all_of(conditions_in_df_and_list), ~ sum(. == 1)) > 1),
1,
0
),
#how many chronic inflam conditions
number_comorbs_present_5y = if_else(
chronic_inflam_present_5y == 1,
rowSums(across(all_of(conditions_in_df_and_list))),
0
),
,
#what were the comorbidities
comorbidities_5y = if_else(
chronic_inflam_present_5y == 1,
apply(across(all_of(conditions_in_df_and_list)), 1, function(x) paste(names(which(x == 1)), collapse = "_")),
"")
) %>%
ungroup()
#keep only top 5 rows per patient
df_result_restricted <- df_result3 %>%
group_by(subject_id) %>%
filter(year_in_study_comorb %in% sort(unique(year_in_study_comorb), decreasing = TRUE)[1:5]) %>%
ungroup()
# Function to detect comorbidities for each subject_id based on index range
detect_comorbidity <- function(df, subject_id_col, index_range, comorbidity_groups) {
# Extract actual column names within the index range
valid_columns <- colnames(df)[index_range]
df %>%
group_by(!!sym(subject_id_col)) %>%  # Group by subject_id
summarise(across(all_of(valid_columns), ~ any(. == 1), .names = "temp_{.col}"), .groups = "drop") %>%  # Check for 1s
mutate(
!!!map(comorbidity_groups, function(cols) {
# Identify valid columns that exist in the dataset
matched_cols <- intersect(paste0("temp_", cols), colnames(.))
# Assign "Y" if any value in matched columns is 1, else "N"
if (length(matched_cols) > 0) {
ifelse(rowSums(dplyr::select(., all_of(matched_cols))) > 0, "Y", "N")
} else {
"N"  # If no matching columns exist, default to "N"
}
})
) %>%
dplyr::select(-starts_with("temp_"))  # Remove temporary columns
}
# Define comorbidity groups (list of column names matching each category)
comorbidity_groups <- list(
intestinal_parasitism = intestinal_parasitism,
tick_borne_parasitism = tick_borne_parasitism,
other_parasitism = other_parasitism,
all_parasitism = all_parasitism,
infectious = infectious,
orthopaedic = orthopaedic,
immune_mediated = immune_mediated,
cardiovascular = cardiovascular,
gastrointestinal = gastrointestinal,
inflammatory_other = inflammatory_other,
chronic_inflammatory = chronic_inflammatory
)
# Apply function to data
GRLS_data <- df_result_restricted %>%
left_join(detect_comorbidity(df_result_restricted, "subject_id", 5:198, comorbidity_groups),
by = "subject_id")
#keep only a single row for each patient
# Define the index range of comorbidity columns
comorbidity_index <- c(199:212)  # Keep subject_id out of this list
# Create a second dataframe with one row per subject_id, summarizing only the selected columns - not using this as need to ensure rows with a 1 are preferentially kept
#GRLS_summary <- GRLS_data %>%
#  group_by(subject_id) %>%
#   arrange(desc(number_comorbs_present_5y)) %>%
#  summarise(
#    subject_id = first(subject_id),  # Keep subject_id as is
#    across(all_of(colnames(GRLS_data)[comorbidity_index]), ~ ifelse(any(. == "Y"), "Y", "N")),
#   .groups = "drop"
# )
GRLS_summary <- GRLS_data %>%
group_by(subject_id) %>%
arrange(desc(number_comorbs_present_5y)) %>%  # prioritise higher values
slice(1) %>%  # keep only the top row per subject
ungroup()
### recode any NA as "no_record_available"
GRLS_summary <- GRLS_summary%>%
mutate(across(where(~ is.character(.) | is.factor(.)| is.numeric(.)),
~ replace(., is.na(.) | . == "", "no_records_available")))
comorbs_single_record <- c(
"atrial_enlargement",
"cardiomegaly",
"cardiomyopathy",
"congestive_heart_failure",
"hypertension",
"myocardial_dysfunction",
"valvular_disease",
"addisons_disease",
"autoimmune_thyroiditis",
"cushings_disease",
"diabetes_insipidus",
"diabetes_mellitus",
"hyperadrenalestrogenism",
"hypercalcemia",
"hypothyroidism",
"pancreatic_insufficiency",
"cataracts",
"glaucoma",
"keratoconjunctivitis_sicca",
"progressive_retinal_atrophy_or_degeneration",
"pigmentary_uveitis",
"lymphangiectasia",
"malabsorptive_disorder",
"megaesophagus",
"motility_disorder",
"elbow_dysplasia",
"hip_dysplasia",
"osteoarthritis",
"rheumatoid_arthritis",
"spondylosis"
)
#identify in records
comorbs_ever <- comorbs_unique %>%
dplyr::select(-c(relationship_category,year_in_study,record_date,to_date))
