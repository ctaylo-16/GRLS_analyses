---
title: "Cox HSA time to diagnosis"
format: html
editor: visual
---

# Time to HSA diagnosis in GRLS cohort

-   Examining all 3044 dogs in cohort through Cox PH model to determine time to HSA diagnosis

-   Endpoint - date of HSA diagnosis or censor date December 1 2024

-   Censor status - 1= had HSA diagnosed before Dec 1 2024 and 0= no HSA diagnosis by Dec 1 2024

## Import data

```{r, echo=FALSE}
library(tidyverse)
library(dplyr)
library(survival)
library(ggplot2)
library(tibble)
library(kableExtra)
#devtools::install_github("zabore/ezfun")
ezfun::set_ccf_palette("contrast")
library(lubridate)
library(ggsurvfit)
library(gtsummary)
library(tidycmprsk)
library(gtable)
#devtools::install_github("zabore/condsurv")
library(condsurv)
library(survminer)
library(cardx)
library(finalfit)

#load in dataset
cohort <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/HSA_cohort_all_RFs_data.csv")
colnames(cohort)
cohort <- cohort %>%
  dplyr::select(-c(X,X.x))
cohort <- cohort %>%
  rename(had_HSA = had_HSA.x.x)
HSA <- cohort %>%
  dplyr::filter(had_HSA==1)
non_HSA <- cohort %>%
   dplyr::filter(had_HSA==0)


#replace all missing with NA (so "" and NA)
cohort <- cohort %>%
  mutate(across(everything(), as.character)) %>%  # Ensure all columns are character
  mutate(across(everything(), ~na_if(.x, "n/a"))) %>%
  mutate(across(everything(), ~na_if(.x, "NA"))) %>%
  mutate(across(everything(), ~na_if(.x, "nr"))) %>%
  mutate(across(everything(), ~na_if(.x, "not recorded"))) %>%
  mutate(across(everything(), ~na_if(.x, ""))) %>%
  mutate(across(everything(), ~replace_na(.x, "not_recorded")))
```

## Descriptives of cohort

Age at endpoint

```{r}
cohort$age_at_final_date <- as.numeric(cohort$age_at_final_date)

summary(cohort$age_at_final_date)

summary(HSA$age_at_final_date)
summary(non_HSA$age_at_final_date)
```

Also split age into quartiles

```{r}
age_summary <- cohort %>%
  summarise(
      Mean  = mean(age_at_final_date),
      SD = sd(age_at_final_date),
      Median = median(age_at_final_date),
      LQ = quantile(age_at_final_date, 0.25),
      UQ = quantile(age_at_final_date, 0.75),
      Min = min(age_at_final_date),
      Max = max(age_at_final_date)
    )
age_summary
cohort <- cohort %>%
  mutate(
    age_at_final_date_quartiles = case_when(
      (age_at_final_date < age_summary$LQ) ~ ">0.74-<8.47 years",
      (age_at_final_date >= age_summary$LQ & age_at_final_date < age_summary$Median) ~ ">=8.47-<10.68 years",
      (age_at_final_date >= age_summary$Median & age_at_final_date < age_summary$UQ) ~ ">=10.68-<11.64 years",
      (age_at_final_date >= age_summary$UQ) ~ ">=11.64-14.51 years",
    )
  )
```

```{r}
cross_table <- table(cohort$had_HSA,cohort$age_at_final_date_quartiles)
cross_table_percent <- prop.table(cross_table) * 100
print(cross_table)
print(cross_table_percent)

```

Neuter status endpoint

```{r}
cross_table <- table(cohort$had_HSA,cohort$neuter)
cross_table_percent <- prop.table(cross_table) * 100
print(cross_table)
print(cross_table_percent)

```

Sex

```{r}
cross_table <- table(cohort$had_HSA,cohort$sex_status)
# Get column-wise percentages
cross_table_percent <- prop.table(cross_table, margin = 1) * 100
print(cross_table)
print(cross_table_percent)
```

```{r}
cross_table <- table(cohort$had_HSA,cohort$sex)
cross_table_percent <- prop.table(cross_table, margin = 1) * 100
print(cross_table)
print(cross_table_percent)
```

```{r}
#tidy up redundant cols - not wanted for univar and those that are essentially duplicats
cohort_abr <- cohort %>%
  dplyr::select(c(1,2,4:12,23:27,227:239,243:249,251:374,final_date.y,379:382,384:443))

#also need to add in a survival time variable (days/weeks/months/years)
enrol_date <-read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/dog_profile.csv")
enrol_date <- enrol_date %>%
  dplyr::select(c(subject_id, enrolled_date))

cohort_abr<- cohort_abr%>%
  left_join(enrol_date,by="subject_id")
cohort_abr <- cohort_abr %>%
  mutate(final_date =as.Date(final_date.y,format="%Y-%m-%d"),
         enrolled_date = as.Date(enrolled_date,format="%Y-%m-%d") )
  
  
#survival time days
#survival time weeks
#survival time months
#survival time years
cohort_abr <- cohort_abr %>%
  mutate(
    survival_time_days = round(as.numeric(difftime(final_date, enrolled_date, units = "days")), 2),
    survival_time_weeks = round(as.numeric(difftime(final_date, enrolled_date, units = "weeks")), 2),
    survival_time_months = round(time_length(interval(enrolled_date, final_date), "months"), 2),
    survival_time_year = round(time_length(interval(enrolled_date, final_date), "years"), 2)
  )
summary(cohort_abr$survival_time_days)
summary(cohort_abr$survival_time_weeks)
summary(cohort_abr$survival_time_months)
summary(cohort_abr$survival_time_year)


# set HSA status as numeric for KM curves
cohort_abr$had_HSA <-as.numeric(cohort_abr$had_HSA)
```

I think months maybe is best option of the 4 (days,weeks, months, years)

## Kaplan Meier curves

```{r}
survfit(Surv(cohort_abr$survival_time_months, cohort_abr$had_HSA) ~ 1, data = cohort_abr) %>% 
  ggsurvfit() +
  labs(
    x = "Months",
    y = "Overall survival probability of cohort"
  ) +  add_confidence_interval() +
  add_risktable()
```

## Univariable Cox PH of variables

```{r}

```
