---
title: "GRLS comorbidities"
format: html
editor: visual
---

## GRLS comorbidities dataset

Load packages and datasets

```{r}
library(ggplot2)
library(tidyverse)

#read in all csvs that start with the string "conditions_
folder_path <- "C:/Users/ctaylor18/GitHub/GRLS_analyses/Data"

# Get a list of all CSV files that start with "conditions_with"
csv_files <- list.files(path = folder_path, pattern = "^conditions_.*\\.csv$", full.names = TRUE)

for (file in csv_files) {
  # Extract the file name (without the path and extension) for the data frame name
  dataframe_name <- tools::file_path_sans_ext(basename(file))
  
  # Dynamically assign each file to a data frame with the extracted name
  assign(dataframe_name, read.csv(file))
}

#remove not relevant ones
rm(conditions_dictionary)


#combine the comorbidities datasets
comorbs_all <- cbind(conditions_cardio,conditions_dental,conditions_ear_nose_throat,conditions_endocrine,conditions_eye,conditions_gastrointestinal,conditions_hematologic,conditions_infectious,conditions_musculoskeletal,conditions_neoplasia,conditions_reproductive,conditions_urinary)

#remove duplicate subjectid columns
comorbs_unique <- comorbs_all %>%
  select(unique(names(.)))



# View the combined dataframe
head(comorbs_unique)
#endpoints to join up conditions dataset
endpoints <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/study_endpoints.csv")

#load in HSA cohort for endpoints calcs
HSA<- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/HSA_study_pop_with_final_date_with_final_study_record_year.csv")

```

## Look for potentially relevant comorbidities:

#### All comorbidities

```{r}
print(colnames(comorbs_unique))

comorbs_list <- colnames(comorbs_unique)
```

#### Potential chronic inflam conditions e.g diabetes, rheumatoid arthritis, IBD

```{r}
comorbs_to_find <-c("congestive_heart_failure",
  "cardiomyopathy",
  "hypertension",
  "heartworm_infection",
  "lower_airway_disease",
  "dental_tarter_calculus",
  "addisons_disease",
  "autoimmune_thyroiditis",
  "cushings_disease",
  "diabetes_insipidus",
  "diabetes_mellitus",
  "hyperadrenalestrogenism",
  "hypercalcemia",
  "hypothyroidism",
  "pancreatic_insufficiency",
  "keratoconjunctivitis_sicca",
  "pigmentary_uveitis",
  "uveitis",
  "chronic_colitis",
  "malabsorptive_disorder",
  "megaesophagus",
  "pancreatitis",
  "anaplasma",
  "babesia",
  "canine_herpesvirus",
  "coccidia",
  "cryptosporidium",
  "ear_mites",
  "ehrlichia",
  "eimeria",
  "fleas",
  "fungal_infection",
  "giardia",
  "granuloma",
  "hookworms",
  "influenza",
  "isospora",
  "leptospirosis",
  "lyme_disease",
  "other_ectoparasite",
  "parvovirus",
  "rocky_mountain_spotted_fever",
  "roundworms",
  "tapeworms",
  "ticks",
  "tracheobronchitis",
  "unspecified_gastrointestinal_parasite",
  "valley_fever",
  "whipworms",
  "immune_related_musculoskeletal_disorder",
  "osteoarthritis",
  "rheumatoid_arthritis",
  "laryngeal_paralysis",
  "meningitis",
  "meningoencephalitis",
  "myasthenia_gravis",
  "erythema_multiforme",
  "flea_allergy_dermatitis",
  "food_allergy_dermatitis",
  "r_o_atopy",
  "kidney_failure")



```

### Comorbidities ever in all years of study:

Looking in only all the columns in 'comorbs_to_find' columns, identify if there is record of these conditions and for \>1 year of records and if so record in new columns: "chronic_inflam_comorb_present" (YN), "number of chronic_inflam_comorbs_present" (count), "which comorbs_to_find present?" (each comorb name separated by comma) :

```{r}
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")

conditions_in_df_and_list <- intersect(colnames(comorbs_unique),comorbs_to_find)

comorbs_unique_2 <- comorbs_unique %>%
  #get rid of the to_date row for each dog
  filter(to_date !=1) %>%
  # replacing NA values with 0 across comorbidity columns
    mutate_at(vars(5:271), ~replace_na(., 0)) %>%
  dplyr::select(-c(relationship_category,year_in_study,record_date,to_date))


# This method doesnt make sure condition has been there for >1 year of records, which I think should be for chronic inflam really


  

df_result <- comorbs_unique_2 %>%
  group_by(subject_id) %>%
  mutate(
    ## ANY chronic inflam present
    chronic_inflam_present = if_else(rowSums(across(all_of(conditions_in_df_and_list))) > 0, 1, 0),
    ### NUMBER OF chronic inflam conditions present
    number_comorbs_present = rowSums(across(all_of(conditions_in_df_and_list))) # 
  ) %>%
  ungroup()  



```

#### Chronic comorbdities ever in all years of study

This bit of code to check that a condition has been recorded for \>1 year to be 'chronic' (ensures things like infectious agents are not just a one-off acute)

```{r}

df_result2 <- comorbs_unique_2 %>%
  group_by(subject_id) %>%
  mutate(
    #is there any chronic inflam condition present in at least 1 row for subject id
    chronic_inflam_present = if_else(
      rowSums(across(all_of(conditions_in_df_and_list))) > 0 & 
        rowSums(across(all_of(conditions_in_df_and_list), ~ sum(. == 1)) > 1), 
      1, 
      0
    ),
    #how many chronic inflam conditions
    number_comorbs_present = if_else(
      chronic_inflam_present == 1,
      rowSums(across(all_of(conditions_in_df_and_list))),
      0
    ),
    ,
    #what were the comorbidities
    comorbidities = if_else(
      chronic_inflam_present == 1,
      apply(across(all_of(conditions_in_df_and_list)), 1, function(x) paste(names(which(x == 1)), collapse = "_")),
      "")
  ) %>%
  ungroup()


```

### Comorbidities before end point diagnosis/diagnoses:

```{r}
#keeping record_date for linking up to cancer diagnosis but remove to_date column
comorbs_unique_3 <- comorbs_unique %>%
  mutate_at(vars(5:275), ~replace_na(., 0)) %>%
  filter(to_date !=1) %>%
  dplyr::select(-c(relationship_category,to_date)) %>%
  rename(year_in_study_comorb = year_in_study)


#run all functions above onto this dataset
df_result3 <- comorbs_unique_3 %>%
  group_by(subject_id) %>%
  mutate(
    #is there any chronic inflam condition present in at least 1 row for subject id
    chronic_inflam_present = if_else(
      rowSums(across(all_of(conditions_in_df_and_list))) > 0 & 
        rowSums(across(all_of(conditions_in_df_and_list), ~ sum(. == 1)) > 1), 
      1, 
      0
    ),
    #how many chronic inflam conditions
    number_comorbs_present = if_else(
      chronic_inflam_present == 1,
      rowSums(across(all_of(conditions_in_df_and_list))),
      0
    ),
    ,
    #what were the comorbidities
    comorbidities = if_else(
      chronic_inflam_present == 1,
      apply(across(all_of(conditions_in_df_and_list)), 1, function(x) paste(names(which(x == 1)), collapse = "_")),
      "")
  ) %>%
  ungroup()


#keeping less columns 
df_result4<- df_result3 %>%
  dplyr::select(c(subject_id,year_in_study_comorb,record_date,274:276))

#year first chronic inflam comorb present
df_result4 <- df_result4 %>%
  group_by(subject_id) %>%
  mutate(study_year_first_chronic_inflam =  if_else(
      any(chronic_inflam_present == 1),
      min(year_in_study_comorb[chronic_inflam_present == 1], na.rm = TRUE),
      as.numeric(NA)
    )
  ) %>%
  ungroup()
# what was the first chronic inflam comorb
df_result5 <- df_result4 %>%
  group_by(subject_id) %>%
  mutate(
    first_chronic_inflam_condition = if_else(
      chronic_inflam_present == 1 & year_in_study_comorb == study_year_first_chronic_inflam,
      comorbidities,
      NA_character_
    )
  ) %>%
  # Fill the first condition for all rows within each subject_id
  mutate(first_chronic_inflam_condition = first(na.omit(first_chronic_inflam_condition))) %>%
  ungroup()

#number of lifetime chronic inflam conditions
df_result6<-df_result5 %>%
  group_by(subject_id) %>%
  mutate(
    num_lifetime_chronic_inflam = n_distinct(comorbidities[chronic_inflam_present == 1])
  ) %>%
  ungroup()
#what were the chronic lifetime inflam conditions
df_result7 <- df_result6 %>%
  group_by(subject_id) %>%
  mutate(
    all_comorbidities_ever = paste(unique(comorbidities[chronic_inflam_present == 1]), collapse = "_")
  ) %>%
  ungroup()



```

Shortening this endpoints df to only keep specific rows for each dog

```{r}
end_df_result7 <- df_result7 %>%
  filter(chronic_inflam_present ==1)
##keeping only certain columns to join to endpoints data
end_df_result7 <- end_df_result7 %>%
  dplyr::select(c(subject_id,chronic_inflam_present,study_year_first_chronic_inflam,first_chronic_inflam_condition,num_lifetime_chronic_inflam,all_comorbidities_ever))

#keep only distinct rows
end_df_result7_distinct <- end_df_result7 %>%
  distinct(subject_id, .keep_all = TRUE)
```

Adding endpoints data to chronic inflam dogs

```{r}

endpoints_abr <- endpoints %>%
  dplyr::select(-c(public_id,location,phenotype,status, tier_of_confidence,is_cause_of_death,is_recurrence,is_adjudicated)) %>%
  rename(year_in_study_diagnosis=year_in_study)

#join to endpoints dogs 
endpoints_comorbs <- endpoints_abr %>%
  left_join(end_df_result7_distinct, by="subject_id")

#chronic_inflam column edit so those without chronic inflam is 0 not NA
endpoints_comorbs <- endpoints_comorbs %>%
   mutate(chronic_inflam_present = replace_na(chronic_inflam_present, 0))

#code to check if study year in diagnosis endpoint is > than comorbs study year and if so how many years
endpoints_comorbs_2 <- endpoints_comorbs%>%
  group_by(subject_id) %>%
  mutate(diagnosis_after_comorb = 
      if_else(year_in_study_diagnosis > study_year_first_chronic_inflam, 1, 0
    ),
    time_between = if_else(
      diagnosis_after_comorb == 1,
      year_in_study_diagnosis - study_year_first_chronic_inflam,
      as.numeric(NA))
    )%>%
  ungroup()

endpoints_comorbs_2 


```

Create csv of single row for endpoint dogs with (\~1900 rows):

-   did they have chronic inflam comorbidities present at all? how many? which?

-   were they present before endpoint diagnoses and if so how long before?

```{r}
write.csv(endpoints_comorbs_2,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/endpoint_comorbidities.csv")
```

Create csv of all dog records with (\~30k rows):

-   did they have chronic inflam comorbidities present at all? how many? which?

-   were they present before endpoint diagnoses and if so how long before? (NB. only 1800 dogs have end points so there will be lots of NA rows)

```{r}
write.csv(df_result7,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/all_records_comorbidities.csv")
```

Rerun with HSA dog endpoints and censor date and final year of study record:\

```{r}
HSA_comorbs_unique3 <- comorbs_unique_3 %>%
  left_join(HSA, by="subject_id")


#calc for all comorbs ever and year first present et
  HSA_comorbs_unique3 <-HSA_comorbs_unique3 %>%
    group_by(subject_id) %>%
  mutate(
    #is there any chronic inflam condition present in at least 1 row for subject id
    chronic_inflam_present_lifetime = if_else(
      rowSums(across(all_of(conditions_in_df_and_list))) > 0 & 
        rowSums(across(all_of(conditions_in_df_and_list), ~ sum(. == 1)) > 1), 
      1, 
      0
    ),
    #how many chronic inflam conditions
    number_comorbs_present_lifetime = if_else(
      chronic_inflam_present_lifetime == 1,
      rowSums(across(all_of(conditions_in_df_and_list))),
      0
    ),
    ,
    #what were the comorbidities
    comorbidities_lifetime = if_else(
      chronic_inflam_present_lifetime == 1,
      apply(across(all_of(conditions_in_df_and_list)), 1, function(x) paste(names(which(x == 1)), collapse = "_")),
      "")
  ) %>%
  ungroup()
  
  
  
  HSA_comorbs_unique3 <- HSA_comorbs_unique3 %>%
  group_by(subject_id) %>%
  mutate(study_year_first_chronic_inflam =  if_else(
      any(chronic_inflam_present_lifetime == 1),
      min(year_in_study_comorb[chronic_inflam_present_lifetime == 1], na.rm = TRUE),
      as.numeric(NA)
    )
  ) %>%
    ungroup()
  
```

HSA cohort comorbs within 5y of endpoint date

```{r}
#only keep rows that are within 5y of the endpoint for this calculation
HSA_comorbs_unique4 <- HSA_comorbs_unique3 %>%
    group_by(subject_id) %>%
  filter(year_in_study_comorb >= (year_in_study_diagnosis_or_final_record_year - 5))
#calc for all comorbs ever and year first present et
  HSA_comorbs_unique4 <-HSA_comorbs_unique4 %>%
    group_by(subject_id) %>%
  mutate(
    #is there any chronic inflam condition present in at least 1 row for subject id
    chronic_inflam_present_5y= if_else(
      rowSums(across(all_of(conditions_in_df_and_list))) > 0 & 
        rowSums(across(all_of(conditions_in_df_and_list), ~ sum(. == 1)) > 1), 
      1, 
      0
    ),
    #how many chronic inflam conditions
    number_comorbs_present_5y = if_else(
      chronic_inflam_present_5y == 1,
      rowSums(across(all_of(conditions_in_df_and_list))),
      0
    ),
    ,
    #what were the comorbidities
    comorbidities_5y = if_else(
      chronic_inflam_present_5y == 1,
      apply(across(all_of(conditions_in_df_and_list)), 1, function(x) paste(names(which(x == 1)), collapse = "_")),
      "")
  ) %>%
  ungroup()
```

Focussing more on comorbidities that are more likely to be chronic by diagnosis and removing the \>1y presence required aspect

```{r}
comorbs_to_find_v2 <-c("congestive_heart_failure",
  "cardiomyopathy",
  "hypertension",
  "lower_airway_disease",
  "dental_tarter_calculus",
  "addisons_disease",
  "autoimmune_thyroiditis",
  "cushings_disease",
  "diabetes_insipidus",
  "diabetes_mellitus",
  "hyperadrenalestrogenism",
  "hypercalcemia",
  "hypothyroidism",
  "pancreatic_insufficiency",
  "keratoconjunctivitis_sicca",
  "pigmentary_uveitis",
  "uveitis",
  "chronic_colitis",
  "malabsorptive_disorder",
  "megaesophagus",
  "pancreatitis",
  "tracheobronchitis",
  "immune_related_musculoskeletal_disorder",
  "osteoarthritis",
  "rheumatoid_arthritis",
  "laryngeal_paralysis",
  "meningitis",
  "meningoencephalitis",
  "myasthenia_gravis",
  "erythema_multiforme",
  "food_allergy_dermatitis",
  "r_o_atopy")



conditions_in_df_and_list2 <- intersect(colnames(comorbs_unique),comorbs_to_find_v2)

HSA_comorbs_unique4 <- HSA_comorbs_unique4 %>%
  group_by(subject_id) %>%
  mutate(  ## You need mutate() to create new columns
    ## ANY chronic inflam present
    chronic_inflam_present_no_min_year = if_else(rowSums(across(all_of(conditions_in_df_and_list2))) > 0, 1, 0),
    ## NUMBER OF chronic inflam conditions present
    number_comorbs_present_no_min_year = rowSums(across(all_of(conditions_in_df_and_list2))),
    ## Creating a comorbidities column
    comorbidities_no_min_year = if_else(
      chronic_inflam_present_no_min_year == 1,
      apply(across(all_of(conditions_in_df_and_list2)), 1, function(x) paste(names(which(x == 1)), collapse = "_")),
      ""
    )
  ) %>% 
  ungroup()


HSA_comorbs_unique4 <- HSA_comorbs_unique4 %>%
  group_by(subject_id) %>%
     mutate(diagnosis_after_comorb = 
      if_else(year_in_study_diagnosis_or_final_record_year > study_year_first_chronic_inflam, 1, 0
    ),
    time_between_first_comorb_and_endpoint = if_else(
      diagnosis_after_comorb == 1,
      year_in_study_diagnosis_or_final_record_year - study_year_first_chronic_inflam,
      as.numeric(NA))
    )%>%
  ungroup()
```

### Adding in a neoplasia variable - not techinically chronic inflammation but as a RF for diagnosis/ survival factor:

NB. haemangiosarcoma not included in these lists for the HSA dataset but will need including back in for other studies

NB. this is in the 5y prior to diagnosis or endpoint

```{r}
#ggrouping these
all_cancers <- c("adrenal_tumor","basal_cell_tumor","bile_duct_tumor","bladder_tumor","brain_spinal_cord_tumor","breast_or_mammary_tumor","eye_tumor","hair_matrix_tumor","heart_tumor",#"hemangiosarcoma",
                 "histiocytic_sarcoma","kidney_tumor","liver_tumor","lung_tumor","lymphoma","mast_cell_tumor","melanmoma","multiple_myeloma","nasal_tumor","osteosarcoma","pancreatic_tumor","perianal_adenoma","pituitary_tumor","plasma_cell_tumor","plasmacytoma","prostate_tumor","soft_tissue_sarcoma","splenic_tumor","squamous_cell_carcinoma","stomach_intestinal_tumor","testicular_tumor","thymoma","thyroid_tumor")
malig_cancers <- c(#"hemangiosarcoma",
  "histiocytic_sarcoma", "lymphoma", "melanoma", "multiple_myeloma", "osteosarcoma", "pancreatic_tumor", "plasma_cell_tumor", "plasmacytoma", "soft_tissue_sarcoma", "squamous_cell_carcinoma")
benign_cancers <- c("adrenal_tumor", "basal_cell_tumor", "bile_duct_tumor", "bladder_tumor", "brain_spinal_cord_tumor", "breast_or_mammary_tumor", "eye_tumor", "hair_matrix_tumor", "heart_tumor", "kidney_tumor", "liver_tumor", "lung_tumor", "mast_cell_tumor", "nasal_tumor", "perianal_adenoma", "pituitary_tumor", "prostate_tumor", "splenic_tumor", "stomach_intestinal_tumor", "testicular_tumor", "thymoma", "thyroid_tumor")

```

```{r}
HSA_comorbs_unique4$all_cancers_count <- 0
HSA_comorbs_unique4$malig_cancers_count <- 0
HSA_comorbs_unique4$benign_cancers_count <- 0

# Define the cancer columns indices (from index 2 to the last column)
cancer_columns <- 199:232

# Loop through the cancer columns by index
for (col_index in cancer_columns) {
  col_name <- colnames(HSA_comorbs_unique4)[col_index]  # Get column name
  
  # Count for all cancers
  HSA_comorbs_unique4$all_cancers_count <- HSA_comorbs_unique4$all_cancers_count + (HSA_comorbs_unique4[[col_name]] == 1)
  
  # Count for malignant cancers
  if (col_name %in% malig_cancers) {
    HSA_comorbs_unique4$malig_cancers_count <- HSA_comorbs_unique4$malig_cancers_count + (HSA_comorbs_unique4[[col_name]] == 1)
  }
  
  # Count for benign cancers
  if (col_name %in% benign_cancers) {
    HSA_comorbs_unique4$benign_cancers_count <- HSA_comorbs_unique4$benign_cancers_count + (HSA_comorbs_unique4[[col_name]] == 1)
  }
}

#create Y N columns for each in addition to counts
HSA_comorbs_unique4 <- HSA_comorbs_unique4 %>%
  mutate(
    all_cancers_YN = ifelse(all_cancers_count >= 1, 1, 0),
    malig_cancers_YN = ifelse(malig_cancers_count >= 1, 1, 0),
    benign_cancers_YN = ifelse(benign_cancers_count >= 1, 1, 0)
  )
```

Adding in lifetime data

```{r}
HSA_comorbs_unique4_distinct <- HSA_comorbs_unique4 %>%
  distinct(subject_id,.keep_all = TRUE)

#join in other df with further lifetime calcs
df_result7_distinct <- df_result7 %>%
  distinct(subject_id,.keep_all = TRUE)
HSA_comorbs_unique4_df7_distinct <- HSA_comorbs_unique4_distinct %>%
  left_join(df_result7_distinct,by="subject_id")
```

Output to csv

```{r}
#remove some random colnames not needed
HSA_comorbs_unique4_df7_distinct <- HSA_comorbs_unique4_df7_distinct %>%
  dplyr::select(-c(year_in_study_comorb.x,year_in_study_comorb.y,record_date.x,record_date,record_date.y))
write.csv(HSA_comorbs_unique4_df7_distinct,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/HSA_cohort_comorbs_with_HSA_final_date_calculations.csv")
```

Rerun this singular comorbs list for whole cohort ever:

```{r}
#col names to check through
comorbs_columns <- colnames(comorbs_unique[7:275]) 
#only look in these columns and then if a 1 value then put name of col in the comorb_name column


whole_cohort2 <- comorbs_unique %>%
  rowwise() %>%
  mutate(comorb_name = paste0(comorbs_columns[which(c_across(all_of(comorbs_columns)) == 1)], collapse = ", ")) %>%
  ungroup()
whole_cohort_abr2 <- whole_cohort2 %>%
  dplyr::select(c(subject_id,year_in_study,comorb_name))

whole_cohort_abr_unique2 <- whole_cohort_abr2 %>%
  distinct(subject_id, comorb_name, .keep_all = TRUE)
write.csv(whole_cohort_abr_unique2,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/all_cohort_all_comorbs_ever.csv")
```
