---
title: "GRLS comorbidities"
format: html
editor: visual
---

## GRLS comorbidities dataset

Load packages and datasets

```{r}
library(ggplot2)
library(tidyverse)

#read in all csvs that start with the string "conditions_
folder_path <- "C:/Users/ctaylor18/GitHub/GRLS_analyses/Data"

# Get a list of all CSV files that start with "conditions_with"
csv_files <- list.files(path = folder_path, pattern = "^conditions_.*\\.csv$", full.names = TRUE)

for (file in csv_files) {
  # Extract the file name (without the path and extension) for the data frame name
  dataframe_name <- tools::file_path_sans_ext(basename(file))
  
  # Dynamically assign each file to a data frame with the extracted name
  assign(dataframe_name, read.csv(file))
}

#remove not relevant ones
rm(conditions_dictionary)


#combine the comorbidities datasets
comorbs_all <- cbind(conditions_cardio,conditions_dental,conditions_ear_nose_throat,conditions_endocrine,conditions_eye,conditions_gastrointestinal,conditions_hematologic,conditions_infectious,conditions_musculoskeletal,conditions_neoplasia,conditions_reproductive,conditions_urinary)

#remove duplicate subjectid columns
comorbs_unique <- comorbs_all %>%
  select(unique(names(.)))



# View the combined dataframe
head(comorbs_unique)
#endpoints to join up conditions dataset
endpoints <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/study_endpoints.csv")

#load in HSA cohort for endpoints calcs
HSA<- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/HSA_study_pop_with_final_date_with_final_study_record_year.csv")

```

## Look for potentially relevant comorbidities:

#### All comorbidities

```{r}
print(colnames(comorbs_unique))

comorbs_list <- colnames(comorbs_unique)
```

#### Potential chronic inflam conditions e.g diabetes, rheumatoid arthritis, IBD

```{r}
comorbs_to_find <-c("congestive_heart_failure",
  "cardiomyopathy",
  "hypertension",
  "heartworm_infection",
  "lower_airway_disease",
  "dental_tarter_calculus",
  "addisons_disease",
  "autoimmune_thyroiditis",
  "cushings_disease",
  "diabetes_insipidus",
  "diabetes_mellitus",
  "hyperadrenalestrogenism",
  "hypercalcemia",
  "hypothyroidism",
  "pancreatic_insufficiency",
  "keratoconjunctivitis_sicca",
  "pigmentary_uveitis",
  "uveitis",
  "chronic_colitis",
  "malabsorptive_disorder",
  "megaesophagus",
  "pancreatitis",
  "anaplasma",
  "babesia",
  "canine_herpesvirus",
  "coccidia",
  "cryptosporidium",
  "ear_mites",
  "ehrlichia",
  "eimeria",
  "fleas",
  "fungal_infection",
  "giardia",
  "granuloma",
  "hookworms",
  "influenza",
  "isospora",
  "leptospirosis",
  "lyme_disease",
  "other_ectoparasite",
  "parvovirus",
  "rocky_mountain_spotted_fever",
  "roundworms",
  "tapeworms",
  "ticks",
  "tracheobronchitis",
  "unspecified_gastrointestinal_parasite",
  "valley_fever",
  "whipworms",
  "immune_related_musculoskeletal_disorder",
  "osteoarthritis",
  "rheumatoid_arthritis",
  "laryngeal_paralysis",
  "meningitis",
  "meningoencephalitis",
  "myasthenia_gravis",
  "erythema_multiforme",
  "flea_allergy_dermatitis",
  "food_allergy_dermatitis",
  "r_o_atopy",
  "kidney_failure")



```

### Comorbidities ever in all years of study:

Looking in only all the columns in 'comorbs_to_find' columns, identify if there is record of these conditions and for \>1 year of records and if so record in new columns: "chronic_inflam_comorb_present" (YN), "number of chronic_inflam_comorbs_present" (count), "which comorbs_to_find present?" (each comorb name separated by comma) :

```{r}
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")

conditions_in_df_and_list <- intersect(colnames(comorbs_unique),comorbs_to_find)

comorbs_unique_2 <- comorbs_unique %>%
  #get rid of the to_date row for each dog
  filter(to_date !=1) %>%
  # replacing NA values with 0 across comorbidity columns
    mutate_at(vars(5:271), ~replace_na(., 0)) %>%
  dplyr::select(-c(relationship_category,year_in_study,record_date,to_date))


# This method doesnt make sure condition has been there for >1 year of records, which I think should be for chronic inflam really


  

df_result <- comorbs_unique_2 %>%
  group_by(subject_id) %>%
  mutate(
    ## ANY chronic inflam present
    chronic_inflam_present = if_else(rowSums(across(all_of(conditions_in_df_and_list))) > 0, 1, 0),
    ### NUMBER OF chronic inflam conditions present
    number_comorbs_present = rowSums(across(all_of(conditions_in_df_and_list))) # 
  ) %>%
  ungroup()  



```

#### Chronic comorbdities ever in all years of study

This bit of code to check that a condition has been recorded for \>1 year to be 'chronic' (ensures things like infectious agents are not just a one-off acute)

```{r}

df_result2 <- comorbs_unique_2 %>%
  group_by(subject_id) %>%
  mutate(
    #is there any chronic inflam condition present in at least 1 row for subject id
    chronic_inflam_present = if_else(
      rowSums(across(all_of(conditions_in_df_and_list))) > 0 & 
        rowSums(across(all_of(conditions_in_df_and_list), ~ sum(. == 1)) > 1), 
      1, 
      0
    ),
    #how many chronic inflam conditions
    number_comorbs_present = if_else(
      chronic_inflam_present == 1,
      rowSums(across(all_of(conditions_in_df_and_list))),
      0
    ),
    ,
    #what were the comorbidities
    comorbidities = if_else(
      chronic_inflam_present == 1,
      apply(across(all_of(conditions_in_df_and_list)), 1, function(x) paste(names(which(x == 1)), collapse = "_")),
      "")
  ) %>%
  ungroup()


```

### Comorbidities before end point diagnosis/diagnoses:

```{r}
#keeping record_date for linking up to cancer diagnosis but remove to_date column
comorbs_unique_3 <- comorbs_unique %>%
  mutate_at(vars(5:275), ~replace_na(., 0)) %>%
  filter(to_date !=1) %>%
  dplyr::select(-c(relationship_category,to_date)) %>%
  rename(year_in_study_comorb = year_in_study)


#run all functions above onto this dataset
df_result3 <- comorbs_unique_3 %>%
  group_by(subject_id) %>%
  mutate(
    #is there any chronic inflam condition present in at least 1 row for subject id
    chronic_inflam_present = if_else(
      rowSums(across(all_of(conditions_in_df_and_list))) > 0 & 
        rowSums(across(all_of(conditions_in_df_and_list), ~ sum(. == 1)) > 1), 
      1, 
      0
    ),
    #how many chronic inflam conditions
    number_comorbs_present = if_else(
      chronic_inflam_present == 1,
      rowSums(across(all_of(conditions_in_df_and_list))),
      0
    ),
    ,
    #what were the comorbidities
    comorbidities = if_else(
      chronic_inflam_present == 1,
      apply(across(all_of(conditions_in_df_and_list)), 1, function(x) paste(names(which(x == 1)), collapse = "_")),
      "")
  ) %>%
  ungroup()


#keeping less columns 
df_result4<- df_result3 %>%
  dplyr::select(c(subject_id,year_in_study_comorb,record_date,274:276))

#year first chronic inflam comorb present
df_result4 <- df_result4 %>%
  group_by(subject_id) %>%
  mutate(study_year_first_chronic_inflam =  if_else(
      any(chronic_inflam_present == 1),
      min(year_in_study_comorb[chronic_inflam_present == 1], na.rm = TRUE),
      as.numeric(NA)
    )
  ) %>%
  ungroup()
# what was the first chronic inflam comorb
df_result5 <- df_result4 %>%
  group_by(subject_id) %>%
  mutate(
    first_chronic_inflam_condition = if_else(
      chronic_inflam_present == 1 & year_in_study_comorb == study_year_first_chronic_inflam,
      comorbidities,
      NA_character_
    )
  ) %>%
  # Fill the first condition for all rows within each subject_id
  mutate(first_chronic_inflam_condition = first(na.omit(first_chronic_inflam_condition))) %>%
  ungroup()

#number of lifetime chronic inflam conditions
df_result6<-df_result5 %>%
  group_by(subject_id) %>%
  mutate(
    num_lifetime_chronic_inflam = n_distinct(comorbidities[chronic_inflam_present == 1])
  ) %>%
  ungroup()
#what were the chronic lifetime inflam conditions
df_result7 <- df_result6 %>%
  group_by(subject_id) %>%
  mutate(
    all_comorbidities_ever = paste(unique(comorbidities[chronic_inflam_present == 1]), collapse = "_")
  ) %>%
  ungroup()



```

Shortening this endpoints df to only keep specific rows for each dog

```{r}
end_df_result7 <- df_result7 %>%
  filter(chronic_inflam_present ==1)
##keeping only certain columns to join to endpoints data
end_df_result7 <- end_df_result7 %>%
  dplyr::select(c(subject_id,chronic_inflam_present,study_year_first_chronic_inflam,first_chronic_inflam_condition,num_lifetime_chronic_inflam,all_comorbidities_ever))

#keep only distinct rows
end_df_result7_distinct <- end_df_result7 %>%
  distinct(subject_id, .keep_all = TRUE)
```

Adding endpoints data to chronic inflam dogs

```{r}

endpoints_abr <- endpoints %>%
  dplyr::select(-c(public_id,location,phenotype,status, tier_of_confidence,is_cause_of_death,is_recurrence,is_adjudicated)) %>%
  rename(year_in_study_diagnosis=year_in_study)

#join to endpoints dogs 
endpoints_comorbs <- endpoints_abr %>%
  left_join(end_df_result7_distinct, by="subject_id")

#chronic_inflam column edit so those without chronic inflam is 0 not NA
endpoints_comorbs <- endpoints_comorbs %>%
   mutate(chronic_inflam_present = replace_na(chronic_inflam_present, 0))

#code to check if study year in diagnosis endpoint is > than comorbs study year and if so how many years
endpoints_comorbs_2 <- endpoints_comorbs%>%
  group_by(subject_id) %>%
  mutate(diagnosis_after_comorb = 
      if_else(year_in_study_diagnosis > study_year_first_chronic_inflam, 1, 0
    ),
    time_between = if_else(
      diagnosis_after_comorb == 1,
      year_in_study_diagnosis - study_year_first_chronic_inflam,
      as.numeric(NA))
    )%>%
  ungroup()

endpoints_comorbs_2 


```

Create csv of single row for endpoint dogs with (\~1900 rows):

-   did they have chronic inflam comorbidities present at all? how many? which?

-   were they present before endpoint diagnoses and if so how long before?

```{r}
write.csv(endpoints_comorbs_2,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/endpoint_comorbidities.csv")
```

Create csv of all dog records with (\~30k rows):

-   did they have chronic inflam comorbidities present at all? how many? which?

-   were they present before endpoint diagnoses and if so how long before? (NB. only 1800 dogs have end points so there will be lots of NA rows)

```{r}
write.csv(df_result7,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/all_records_comorbidities.csv")
```

Rerun with HSA dog endpoints and censor date and final year of study record:\

```{r}
HSA_comorbs_unique3 <- comorbs_unique_3 %>%
  left_join(HSA, by="subject_id")


#calc for all comorbs ever and year first present et
  HSA_comorbs_unique3 <-HSA_comorbs_unique3 %>%
    group_by(subject_id) %>%
  mutate(
    #is there any chronic inflam condition present in at least 1 row for subject id
    chronic_inflam_present_lifetime = if_else(
      rowSums(across(all_of(conditions_in_df_and_list))) > 0 & 
        rowSums(across(all_of(conditions_in_df_and_list), ~ sum(. == 1)) > 1), 
      1, 
      0
    ),
    #how many chronic inflam conditions
    number_comorbs_present_lifetime = if_else(
      chronic_inflam_present_lifetime == 1,
      rowSums(across(all_of(conditions_in_df_and_list))),
      0
    ),
    ,
    #what were the comorbidities
    comorbidities_lifetime = if_else(
      chronic_inflam_present_lifetime == 1,
      apply(across(all_of(conditions_in_df_and_list)), 1, function(x) paste(names(which(x == 1)), collapse = "_")),
      "")
  ) %>%
  ungroup()
  
  
  
  HSA_comorbs_unique3 <- HSA_comorbs_unique3 %>%
  group_by(subject_id) %>%
  mutate(study_year_first_chronic_inflam =  if_else(
      any(chronic_inflam_present_lifetime == 1),
      min(year_in_study_comorb[chronic_inflam_present_lifetime == 1], na.rm = TRUE),
      as.numeric(NA)
    )
  ) %>%
    ungroup()
  
```

HSA cohort comorbs within 5y of endpoint date

```{r}
#only keep rows that are within 5y of the endpoint for this calculation
HSA_comorbs_unique4 <- HSA_comorbs_unique3 %>%
    group_by(subject_id) %>%
  filter(year_in_study_comorb >= (year_in_study_diagnosis_or_final_record_year - 5))
#calc for all comorbs ever and year first present et
  HSA_comorbs_unique4 <-HSA_comorbs_unique4 %>%
    group_by(subject_id) %>%
  mutate(
    #is there any chronic inflam condition present in at least 1 row for subject id
    chronic_inflam_present_5y= if_else(
      rowSums(across(all_of(conditions_in_df_and_list))) > 0 & 
        rowSums(across(all_of(conditions_in_df_and_list), ~ sum(. == 1)) > 1), 
      1, 
      0
    ),
    #how many chronic inflam conditions
    number_comorbs_present_5y = if_else(
      chronic_inflam_present_5y == 1,
      rowSums(across(all_of(conditions_in_df_and_list))),
      0
    ),
    ,
    #what were the comorbidities
    comorbidities_5y = if_else(
      chronic_inflam_present_5y == 1,
      apply(across(all_of(conditions_in_df_and_list)), 1, function(x) paste(names(which(x == 1)), collapse = "_")),
      "")
  ) %>%
  ungroup()
```

Focussing more on comorbidities that are more likely to be chronic by diagnosis and removing the \>1y presence required aspect

```{r}
comorbs_to_find_v2 <-c("congestive_heart_failure",
  "cardiomyopathy",
  "hypertension",
  "lower_airway_disease",
  "dental_tarter_calculus",
  "addisons_disease",
  "autoimmune_thyroiditis",
  "cushings_disease",
  "diabetes_insipidus",
  "diabetes_mellitus",
  "hyperadrenalestrogenism",
  "hypercalcemia",
  "hypothyroidism",
  "pancreatic_insufficiency",
  "keratoconjunctivitis_sicca",
  "pigmentary_uveitis",
  "uveitis",
  "chronic_colitis",
  "malabsorptive_disorder",
  "megaesophagus",
  "pancreatitis",
  "tracheobronchitis",
  "immune_related_musculoskeletal_disorder",
  "osteoarthritis",
  "rheumatoid_arthritis",
  "laryngeal_paralysis",
  "meningitis",
  "meningoencephalitis",
  "myasthenia_gravis",
  "erythema_multiforme",
  "food_allergy_dermatitis",
  "r_o_atopy")



conditions_in_df_and_list2 <- intersect(colnames(comorbs_unique),comorbs_to_find_v2)

HSA_comorbs_unique4 <- HSA_comorbs_unique4 %>%
  group_by(subject_id) %>%
  mutate(  ## You need mutate() to create new columns
    ## ANY chronic inflam present
    chronic_inflam_present_no_min_year = if_else(rowSums(across(all_of(conditions_in_df_and_list2))) > 0, 1, 0),
    ## NUMBER OF chronic inflam conditions present
    number_comorbs_present_no_min_year = rowSums(across(all_of(conditions_in_df_and_list2))),
    ## Creating a comorbidities column
    comorbidities_no_min_year = if_else(
      chronic_inflam_present_no_min_year == 1,
      apply(across(all_of(conditions_in_df_and_list2)), 1, function(x) paste(names(which(x == 1)), collapse = "_")),
      ""
    )
  ) %>% 
  ungroup()


HSA_comorbs_unique4 <- HSA_comorbs_unique4 %>%
  group_by(subject_id) %>%
     mutate(diagnosis_after_comorb = 
      if_else(year_in_study_diagnosis_or_final_record_year > study_year_first_chronic_inflam, 1, 0
    ),
    time_between_first_comorb_and_endpoint = if_else(
      diagnosis_after_comorb == 1,
      year_in_study_diagnosis_or_final_record_year - study_year_first_chronic_inflam,
      as.numeric(NA))
    )%>%
  ungroup()
```

### Adding in a neoplasia variable - not techinically chronic inflammation but as a RF for diagnosis/ survival factor:

NB. haemangiosarcoma not included in these lists for the HSA dataset but will need including back in for other studies

NB. this is in the 5y prior to diagnosis or endpoint

NB. this is only from the comorbidities dataset - need to also do for the endpoints dataset which is in general more robust

```{r}
#ggrouping these
all_cancers <- c("adrenal_tumor","basal_cell_tumor","bile_duct_tumor","bladder_tumor","brain_spinal_cord_tumor","breast_or_mammary_tumor","eye_tumor","hair_matrix_tumor","heart_tumor",#"hemangiosarcoma",
                 "histiocytic_sarcoma","kidney_tumor","liver_tumor","lung_tumor","lymphoma","mast_cell_tumor","melanmoma","multiple_myeloma","nasal_tumor","osteosarcoma","pancreatic_tumor","perianal_adenoma","pituitary_tumor","plasma_cell_tumor","plasmacytoma","prostate_tumor","soft_tissue_sarcoma","splenic_tumor","squamous_cell_carcinoma","stomach_intestinal_tumor","testicular_tumor","thymoma","thyroid_tumor")
malig_cancers <- c(#"hemangiosarcoma",
  "histiocytic_sarcoma", "lymphoma", "melanoma", "multiple_myeloma", "osteosarcoma", "pancreatic_tumor", "plasma_cell_tumor", "plasmacytoma", "soft_tissue_sarcoma", "squamous_cell_carcinoma")
benign_cancers <- c("adrenal_tumor", "basal_cell_tumor", "bile_duct_tumor", "bladder_tumor", "brain_spinal_cord_tumor", "breast_or_mammary_tumor", "eye_tumor", "hair_matrix_tumor", "heart_tumor", "kidney_tumor", "liver_tumor", "lung_tumor", "mast_cell_tumor", "nasal_tumor", "perianal_adenoma", "pituitary_tumor", "prostate_tumor", "splenic_tumor", "stomach_intestinal_tumor", "testicular_tumor", "thymoma", "thyroid_tumor")

```

```{r}
HSA_comorbs_unique4$all_cancers_count <- 0
HSA_comorbs_unique4$malig_cancers_count <- 0
HSA_comorbs_unique4$benign_cancers_count <- 0
HSA_comorbs_unique4$all_cancers_count_no_HSA <- 0
HSA_comorbs_unique4$malig_cancers_count_no_HSA <- 0

# Define the cancer columns indices (from index 2 to the last column)
cancer_columns <- 199:232

# Loop through the cancer columns by index
for (col_index in cancer_columns) {
  col_name <- colnames(HSA_comorbs_unique4)[col_index]  # Get column name
  
  # Count for all cancers
  HSA_comorbs_unique4$all_cancers_count <- HSA_comorbs_unique4$all_cancers_count + (HSA_comorbs_unique4[[col_name]] == 1)
  
  # Count for all cancers
  HSA_comorbs_unique4$all_cancers_count <- HSA_comorbs_unique4$all_cancers_count + (HSA_comorbs_unique4[[col_name]] == 1)
  
  # Count for malignant cancers
  if (col_name %in% malig_cancers) {
    HSA_comorbs_unique4$malig_cancers_count <- HSA_comorbs_unique4$malig_cancers_count + (HSA_comorbs_unique4[[col_name]] == 1)
  }
  
  # Count for benign cancers
  if (col_name %in% benign_cancers) {
    HSA_comorbs_unique4$benign_cancers_count <- HSA_comorbs_unique4$benign_cancers_count + (HSA_comorbs_unique4[[col_name]] == 1)
  }
}

#create Y N columns for each in addition to counts
HSA_comorbs_unique4 <- HSA_comorbs_unique4 %>%
  mutate(
    all_cancers_YN = ifelse(all_cancers_count >= 1, 1, 0),
    malig_cancers_YN = ifelse(malig_cancers_count >= 1, 1, 0),
    benign_cancers_YN = ifelse(benign_cancers_count >= 1, 1, 0),
    all_cancers_YN_no_HSA = ifelse(all_cancers_count>=1,1,0),
    malig_cancers_YN_no_HSA= ifelse(malig_cancers_count >=1,1,0)
  )
```

Endpoints dataset:

-   have also added in an additional variable/s to exclude HSA from the all_cancer and malig_cancer counts as there are no Cases with no malig cancer by definition which means not a useful variable

```{r}
head(endpoints_abr)
endpoints_abr <- endpoints_abr %>%
  mutate(across(everything(), ~ if (is.character(.x)) tolower(.x) else .x))

#unique values of cancer to make list
print(unique(endpoints_abr$tracked_condition))
all_cancers_endpoint<-c("carcinoma - mammary","soft tissue sarcoma - other/not specified","lymphoma - multicentric","hemangiosarcoma - splenic","adenocarcinoma - mammary","osteosarcoma - appendicular","adenocarcinoma - other/not specified","carcinoma - neuroendocrine","hemangiosarcoma - other/not specified","hemangiosarcoma - visceral","carcinoma - squamous cell","cutaneous melanoma","carcinoma - other/not specified","hemangiosarcoma - cardiac","mast cell tumor - cutaneous","malignant melanoma","lymphoma - other/not specified","meningioma","unknown neoplasia","leukemia","undifferentiated malignant neoplasm","soft tissue sarcoma - peripheral nerve sheath tumor","histiocytic sarcoma","brain tumor","carcinoma - thyroid", "malignant pilomatricoma","osteosarcoma - other/unspecified","malignant trichoepithelioma","mast cell tumor - other/not specified","nasal sarcoma","carcinoma - pulmonary","lymphoma - gastrointestinal","mast cell tumor - subcutaneous","round cell tumor","oral tumor","seminoma","testicular tumor", "leiomyosarcoma","oral melanoma","osteosarcoma - axial","carcinoma - transitional cell","liver tumor","carcinoma - ovarian","adenocarcinoma - exocrine pancreatic","pheochromocytoma","carcinoma - nasal", "anaplastic sarcoma","carcinoma - hepatocellular","soft tissue sarcoma - spindle cell sarcoma","gastrointestinal stromal tumor","lymphoma - cutaneous","cns tumor","acanthomatous ameloblastoma","sarcoma","soft tissue sarcoma - fibrosarcoma","chondrosarcoma","hemangiosarcoma - cutaneous","carcinoma - apocrine ductal","adenocarcinoma - apocrine gland anal sac","carcinosarcoma - thyroid","carcinoma - gastric","nephroblastoma","splenic stromal sarcoma","thymoma","soft tissue sarcoma - myxosarcoma","trichoepithelioma","melanocytic neoplasm","soft tissue sarcoma - synovial cell sarcoma","multiple myeloma", "hemangioendothelioma","malignant insulinoma","meibomian gland epithelioma","choroid plexus papilloma","soft tissue sarcoma - perivascular wall tumor", "carcinoma - cerumin gland" ,"carcinoma - choroid plexus", "apocrine gland ductal adenoma","stomach tumor","pituitary adenoma","soft tissue sarcoma - rhabdomyosarcoma","spleen tumor","carcinoma - basal cell","carcinoma - basosquamous cell" ,"soft tissue sarcoma - keloidal", "adenocarcinoma - perianal","metastatic sarcoma", "soft tissue sarcoma - benign fibrosarcoma","soft tissue sarcoma - giant cell tumor","neuroendocrine tumor" )
malig_cancers_endpoint<-c(
  "carcinoma - mammary", "soft tissue sarcoma - other/not specified", "lymphoma - multicentric",
  "hemangiosarcoma - splenic", "adenocarcinoma - mammary", "osteosarcoma - appendicular",
  "adenocarcinoma - other/not specified", "carcinoma - neuroendocrine", "hemangiosarcoma - other/not specified",
  "hemangiosarcoma - visceral", "carcinoma - squamous cell", "malignant melanoma",
  "carcinoma - other/not specified", "hemangiosarcoma - cardiac", "lymphoma - other/not specified",
  "leukemia", "undifferentiated malignant neoplasm", "soft tissue sarcoma - peripheral nerve sheath tumor",
  "histiocytic sarcoma", "carcinoma - thyroid", "malignant pilomatricoma", "osteosarcoma - other/unspecified",
  "malignant trichoepithelioma", "nasal sarcoma", "carcinoma - pulmonary", "lymphoma - gastrointestinal",
  "mast cell tumor - cutaneous", "mast cell tumor - subcutaneous", "round cell tumor", "oral tumor",
  "seminoma", "testicular tumor", "leiomyosarcoma", "oral melanoma", "osteosarcoma - axial",
  "carcinoma - transitional cell", "carcinoma - ovarian", "adenocarcinoma - exocrine pancreatic",
  "pheochromocytoma", "carcinoma - nasal", "anaplastic sarcoma", "carcinoma - hepatocellular",
  "soft tissue sarcoma - spindle cell sarcoma", "gastrointestinal stromal tumor", "lymphoma - cutaneous",
  "sarcoma", "soft tissue sarcoma - fibrosarcoma", "chondrosarcoma", "hemangiosarcoma - cutaneous",
  "carcinoma - apocrine ductal", "adenocarcinoma - apocrine gland anal sac", "carcinosarcoma - thyroid",
  "carcinoma - gastric", "nephroblastoma", "splenic stromal sarcoma", "soft tissue sarcoma - myxosarcoma",
  "soft tissue sarcoma - synovial cell sarcoma", "multiple myeloma", "hemangioendothelioma",
  "malignant insulinoma", "soft tissue sarcoma - rhabdomyosarcoma", "carcinoma - basal cell",
  "carcinoma - basosquamous cell", "adenocarcinoma - perianal", "metastatic sarcoma",
  "soft tissue sarcoma - keloidal", "neuroendocrine tumor", "soft tissue sarcoma - giant cell tumor","carcinoma - cerumin gland", "carcinoma - choroid plexus"
) 
benign_cancers_endpoint <- c("meningioma", "meibomian gland epithelioma", "choroid plexus papilloma", "apocrine gland ductal adenoma",
  "pituitary adenoma", "acanthomatous ameloblastoma", "soft tissue sarcoma - benign fibrosarcoma",
  "trichoepithelioma", "melanocytic neoplasm")
all_cancers_endpoint_no_HSA<-c("carcinoma - mammary","soft tissue sarcoma - other/not specified","lymphoma - multicentric","adenocarcinoma - mammary","osteosarcoma - appendicular","adenocarcinoma - other/not specified","carcinoma - neuroendocrine","carcinoma - squamous cell","cutaneous melanoma","carcinoma - other/not specified","mast cell tumor - cutaneous","malignant melanoma","lymphoma - other/not specified","meningioma","unknown neoplasia","leukemia","undifferentiated malignant neoplasm","soft tissue sarcoma - peripheral nerve sheath tumor","histiocytic sarcoma","brain tumor","carcinoma - thyroid", "malignant pilomatricoma","osteosarcoma - other/unspecified","malignant trichoepithelioma","mast cell tumor - other/not specified","nasal sarcoma","carcinoma - pulmonary","lymphoma - gastrointestinal","mast cell tumor - subcutaneous","round cell tumor","oral tumor","seminoma","testicular tumor", "leiomyosarcoma","oral melanoma","osteosarcoma - axial","carcinoma - transitional cell","liver tumor","carcinoma - ovarian","adenocarcinoma - exocrine pancreatic","pheochromocytoma","carcinoma - nasal", "anaplastic sarcoma","carcinoma - hepatocellular","soft tissue sarcoma - spindle cell sarcoma","gastrointestinal stromal tumor","lymphoma - cutaneous","cns tumor","acanthomatous ameloblastoma","sarcoma","soft tissue sarcoma - fibrosarcoma","chondrosarcoma","carcinoma - apocrine ductal","adenocarcinoma - apocrine gland anal sac","carcinosarcoma - thyroid","carcinoma - gastric","nephroblastoma","splenic stromal sarcoma","thymoma","soft tissue sarcoma - myxosarcoma","trichoepithelioma","melanocytic neoplasm","soft tissue sarcoma - synovial cell sarcoma","multiple myeloma", "hemangioendothelioma","malignant insulinoma","meibomian gland epithelioma","choroid plexus papilloma","soft tissue sarcoma - perivascular wall tumor", "carcinoma - cerumin gland" ,"carcinoma - choroid plexus", "apocrine gland ductal adenoma","stomach tumor","pituitary adenoma","soft tissue sarcoma - rhabdomyosarcoma","spleen tumor","carcinoma - basal cell","carcinoma - basosquamous cell" ,"soft tissue sarcoma - keloidal", "adenocarcinoma - perianal","metastatic sarcoma", "soft tissue sarcoma - benign fibrosarcoma","soft tissue sarcoma - giant cell tumor","neuroendocrine tumor" )
malig_cancers_endpoint_no_HSA<-c(
  "carcinoma - mammary", "soft tissue sarcoma - other/not specified", "lymphoma - multicentric",
  "adenocarcinoma - mammary", "osteosarcoma - appendicular",
  "adenocarcinoma - other/not specified", "carcinoma - neuroendocrine",  "carcinoma - squamous cell", "malignant melanoma",
  "carcinoma - other/not specified",  "lymphoma - other/not specified",
  "leukemia", "undifferentiated malignant neoplasm", "soft tissue sarcoma - peripheral nerve sheath tumor",
  "histiocytic sarcoma", "carcinoma - thyroid", "malignant pilomatricoma", "osteosarcoma - other/unspecified",
  "malignant trichoepithelioma", "nasal sarcoma", "carcinoma - pulmonary", "lymphoma - gastrointestinal",
  "mast cell tumor - cutaneous", "mast cell tumor - subcutaneous", "round cell tumor", "oral tumor",
  "seminoma", "testicular tumor", "leiomyosarcoma", "oral melanoma", "osteosarcoma - axial",
  "carcinoma - transitional cell", "carcinoma - ovarian", "adenocarcinoma - exocrine pancreatic",
  "pheochromocytoma", "carcinoma - nasal", "anaplastic sarcoma", "carcinoma - hepatocellular",
  "soft tissue sarcoma - spindle cell sarcoma", "gastrointestinal stromal tumor", "lymphoma - cutaneous",
  "sarcoma", "soft tissue sarcoma - fibrosarcoma", "chondrosarcoma", 
  "carcinoma - apocrine ductal", "adenocarcinoma - apocrine gland anal sac", "carcinosarcoma - thyroid",
  "carcinoma - gastric", "nephroblastoma", "splenic stromal sarcoma", "soft tissue sarcoma - myxosarcoma",
  "soft tissue sarcoma - synovial cell sarcoma", "multiple myeloma", "hemangioendothelioma",
  "malignant insulinoma", "soft tissue sarcoma - rhabdomyosarcoma", "carcinoma - basal cell",
  "carcinoma - basosquamous cell", "adenocarcinoma - perianal", "metastatic sarcoma",
  "soft tissue sarcoma - keloidal", "neuroendocrine tumor", "soft tissue sarcoma - giant cell tumor","carcinoma - cerumin gland", "carcinoma - choroid plexus"
) 

#join up these endpoints to the HSA_comorbs that have already been filtered to 5y prior to endpoint diagnosis 
HSA_comorbs_unique5 <- HSA_comorbs_unique4 %>%
  left_join(endpoints_abr,by="subject_id")


#keep only the relevant columns
HSA_comorbs_unique5 <- HSA_comorbs_unique5 %>%
  dplyr::select(c(subject_id,had_HSA,tracked_condition,all_cancers_count,malig_cancers_count,benign_cancers_count))
#now in tracked conidtions column if all, benign or malig are present then add a 1 into the all_cancers_YN, benign_cancers_YN, malig_cancers_YN



HSA_comorbs_unique5_removerows<- HSA_comorbs_unique5 %>%
  mutate(
    malig_cancers_YN = if_else(
      str_detect(tracked_condition, str_c(malig_cancers_endpoint, collapse = "|")),
      1, 0
    ),
    benign_cancers_YN = if_else(
      str_detect(tracked_condition, str_c(benign_cancers_endpoint, collapse = "|")),
      1, 0
    ),
    all_cancers_YN = if_else(
      str_detect(tracked_condition, str_c(all_cancers_endpoint, collapse = "|")),
      1, 0
    ),
    malig_cancers_count = malig_cancers_count + str_count(tracked_condition, str_c(malig_cancers_endpoint, collapse = "|")),
    benign_cancers_count = benign_cancers_count + str_count(tracked_condition, str_c(benign_cancers_endpoint, collapse = "|")),
    all_cancers_count = all_cancers_count + str_count(tracked_condition, str_c(all_cancers_endpoint, collapse = "|"))
  ) %>%
  # Remove rows with 'hemangio' in tracked_condition (case-insensitive) and make sure not losing all the NA tracked_condition rows for dogs without an endpoint (ie. our control pop)
  filter(is.na(tracked_condition) | !str_detect(tolower(tracked_condition), "hemangio"))


HSA_comorbs_unique5_removerows<- HSA_comorbs_unique5_removerows %>%
  mutate(
    malig_cancers_YN_no_HSA = if_else(
      str_detect(tracked_condition, str_c(malig_cancers_endpoint_no_HSA, collapse = "|")),
      1, 0
    ),
    all_cancers_YN_no_HSA = if_else(
      str_detect(tracked_condition, str_c(all_cancers_endpoint_no_HSA, collapse = "|")),
      1, 0
    ),
    malig_cancers_count_no_HSA =  str_count(tracked_condition, str_c(malig_cancers_endpoint_no_HSA, collapse = "|")),
    all_cancers_count_no_HSA =  str_count(tracked_condition, str_c(all_cancers_endpoint_no_HSA, collapse = "|"))
  ) 
#counts of cancer from this endpoints df then add onto comorbs df next step

#get the max count value for each of the counts for each dog 
cancer_count_summary <- HSA_comorbs_unique5_removerows %>%
  group_by(subject_id) %>%
  summarise(
    malig_cancers_count = if_else(all(is.na(malig_cancers_count)), 0, max(malig_cancers_count, na.rm = TRUE)),
    benign_cancers_count = if_else(all(is.na(benign_cancers_count)), 0, max(benign_cancers_count, na.rm = TRUE)),
    all_cancers_count = if_else(all(is.na(all_cancers_count)), 0, max(all_cancers_count, na.rm = TRUE)),
    malig_cancers_count_no_HSA = if_else(all(is.na(malig_cancers_count_no_HSA)), 0, max(malig_cancers_count_no_HSA, na.rm = TRUE)),
    all_cancers_count_no_HSA = if_else(all(is.na(all_cancers_count_no_HSA)), 0, max(all_cancers_count_no_HSA, na.rm = TRUE)),

    malig_cancers_YN = if_else(all(is.na(malig_cancers_YN)), 0, max(malig_cancers_YN, na.rm = TRUE)),
    benign_cancers_YN = if_else(all(is.na(benign_cancers_YN)), 0, max(benign_cancers_YN, na.rm = TRUE)),
    all_cancers_YN = if_else(all(is.na(all_cancers_YN)), 0, max(all_cancers_YN, na.rm = TRUE)),
    malig_cancers_YN_no_HSA = if_else(all(is.na(malig_cancers_YN_no_HSA)), 0, max(malig_cancers_YN_no_HSA, na.rm = TRUE)),
    all_cancers_YN_no_HSA = if_else(all(is.na(all_cancers_YN_no_HSA)), 0, max(all_cancers_YN_no_HSA, na.rm = TRUE)),
    
    .groups = "drop"
  )

#rejoin the removed rows back to main df with full 3000 dogs as with remove rows we removed ~1000 rows to ignore the HSA tracked conditions
HSA_comorbs_unique5_combine <- HSA_comorbs_unique5 %>%
  left_join(HSA_comorbs_unique5_removerows,by="subject_id")


#now remove the cancer cols from the df so that they dont mess up at next step joining / distinct
HSA_comorbs_unique5_no_cancer <- HSA_comorbs_unique5_combine %>%
  dplyr::select(-c(had_HSA.y,malig_cancers_count.y,malig_cancers_count.x,all_cancers_count.x,benign_cancers_count.x,all_cancers_count.y,benign_cancers_count.y,malig_cancers_YN,benign_cancers_YN,all_cancers_YN, malig_cancers_count_no_HSA,malig_cancers_YN_no_HSA,all_cancers_count_no_HSA,all_cancers_YN_no_HSA,tracked_condition.y))

HSA_comorbs_unique5_no_cancer <- HSA_comorbs_unique5_no_cancer %>%
  rename(had_HSA = had_HSA.x,
         tracked_condition = tracked_condition.x)
```

Adding in lifetime data

```{r}
HSA_comorbs_unique4_distinct <- HSA_comorbs_unique5_no_cancer %>%
  distinct(subject_id,.keep_all = TRUE)

#add in cancer summary df
HSA_comorbs_unique4_distinct_cancer <- HSA_comorbs_unique4_distinct %>%
  left_join(cancer_count_summary,by="subject_id")

#replace NAs across columns of cancer counts with 0
HSA_comorbs_unique4_distinct_cancer <- HSA_comorbs_unique4_distinct_cancer %>%
  mutate(across(4:13, ~ ifelse(is.na(.x), 0, .x)))
#add in other comorb calcs
HSA_comorbs_unique4_distinct_rows <- HSA_comorbs_unique4 %>%
  distinct(subject_id,.keep_all = TRUE)%>%
  #remove confusing previous cancer columns
  dplyr::select(-c(all_cancers_count,malig_cancers_count,benign_cancers_count,all_cancers_YN,malig_cancers_YN,benign_cancers_YN,all_cancers_count_no_HSA,malig_cancers_count_no_HSA,all_cancers_YN_no_HSA,malig_cancers_YN_no_HSA))
HSA_comorbs_unique4_distinct_cancer_all_comorbs <- HSA_comorbs_unique4_distinct_rows %>%
  left_join(HSA_comorbs_unique4_distinct_cancer,by="subject_id")
#join in other df with further lifetime calcs
df_result7_distinct <- df_result7 %>%
  distinct(subject_id,.keep_all = TRUE)
HSA_comorbs_unique4_df7_distinct <- HSA_comorbs_unique4_distinct_cancer_all_comorbs %>%
  left_join(df_result7_distinct,by="subject_id")
```

Further specific cancer counts:

-   lymphoma

-   carcinoma

-   sarcoma

-   melanoma

-   adenocarcinoma

```{r}
# Define your vector of cancer types
cancer_types <- c("lymphoma", "carcinoma", "sarcoma", "melanoma", "adenocarcinoma","mast cell tumor")

# Create a regex pattern to search for any of the cancer types
main_pattern <- str_c(cancer_types, collapse = "|")

#group all the other non-main cancers so that can code as "other cancer"
other_cancers<-c("meningioma","unknown neoplasia","leukemia","undifferentiated malignant neoplasm","brain tumor", "malignant pilomatricoma","osteosarcoma - other/unspecified","malignant trichoepithelioma","round cell tumor","oral tumor","seminoma","testicular tumor", "leiomyosarcoma","oral melanoma","osteosarcoma - axial","liver tumor","pheochromocytoma","gastrointestinal stromal tumor","cns tumor","acanthomatous ameloblastoma","nephroblastoma","thymoma","trichoepithelioma","melanocytic neoplasm","multiple myeloma", "hemangioendothelioma","malignant insulinoma","meibomian gland epithelioma","choroid plexus papilloma",  "apocrine gland ductal adenoma","stomach tumor","pituitary adenoma","spleen tumor","neuroendocrine tumor" )
other_pattern <- str_c(other_cancers, collapse = "|")


#main cancers code as cancer type, rest as other cancer and if no cancer, then "no cancer" and also code HSA seperately to remove later
HSA_comorbs_unique5_main_cancers <- HSA_comorbs_unique5 %>%
  #filter out the HSA rows in DF, NB. end numbers for DF will be lower as plenty of HSA dogs only had HSA as endpoint cancer
  filter(!str_detect(str_to_lower(tracked_condition), "hemangiosarc"))%>%
  mutate(
    diagnosis_lower = str_to_lower(tracked_condition),
    main_cancer_type = case_when(
      str_detect(diagnosis_lower %>% replace_na(""), main_pattern) ~ str_extract(diagnosis_lower, main_pattern),
      str_detect(diagnosis_lower %>% replace_na(""), other_pattern) ~ "other cancer",
      TRUE ~ "no cancer"
    )
  ) %>%
  select(-diagnosis_lower)




#create 0 and 1 columns for each of the "lymphoma", "carcinoma", "sarcoma", "melanoma", "adenocarcinoma","mast cell tumor" cancer types
HSA_comorbs_unique5_main_cancers <- HSA_comorbs_unique5_main_cancers %>%
  mutate(
    lymphoma_present = if_else(main_cancer_type == "lymphoma", 1, 0),
    carcinoma_present = if_else(main_cancer_type == "carcinoma", 1, 0),
    sarcoma_present = if_else(main_cancer_type == "sarcoma", 1, 0),
    melanoma_present = if_else(main_cancer_type == "melanoma", 1, 0),
    adenocarcinoma_present = if_else(main_cancer_type == "adenocarcinoma", 1, 0),
    mast_cell_tumor_present = if_else(main_cancer_type == "mast cell tumor", 1, 0)
  )

#keep 1 row for each patient where if has multiple 1s for different 0 1 cancer present cols keep both into one row and for main cancer type if has multiple main cancers than recode that dog as "multi_main_cancers"
HSA_comorbs_main_cancer_summary <- HSA_comorbs_unique5_main_cancers %>%
  group_by(subject_id) %>%
  summarise(
    lymphoma_present = max(lymphoma_present, na.rm = TRUE),
    carcinoma_present = max(carcinoma_present, na.rm = TRUE),
    sarcoma_present = max(sarcoma_present, na.rm = TRUE),
    melanoma_present = max(melanoma_present, na.rm = TRUE),
    adenocarcinoma_present = max(adenocarcinoma_present, na.rm = TRUE),
    mast_cell_tumor_present = max(mast_cell_tumor_present, na.rm = TRUE)
  )  %>%
  distinct(subject_id,  .keep_all = TRUE)



```

Output to csv

```{r}
#remove some random colnames not needed
HSA_comorbs_unique4_df7_distinct <- HSA_comorbs_unique4_df7_distinct %>%
  dplyr::select(-c(year_in_study_comorb.x,year_in_study_comorb.y,record_date.x,record_date,record_date.y))


## add in the counts of main cancer types from above
HSA_comorbs_unique4_df7_distinct_main_cancer_counts <-HSA_comorbs_unique4_df7_distinct  %>% left_join(HSA_comorbs_main_cancer_summary, by = "subject_id")

# for all the ~2000 dogs that did not have one of the main endpoint cancers recorded, put that as a value for them "did_not_have_endpoint_data"
HSA_comorbs_unique4_df7_distinct_main_cancer_counts <- HSA_comorbs_unique4_df7_distinct_main_cancer_counts %>%
  mutate(across(307:312, ~ replace(., is.na(.), "did_not_have_endpoint_data")))




write.csv(HSA_comorbs_unique4_df7_distinct_main_cancer_counts,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/HSA_cohort_comorbs_with_HSA_final_date_calculations.csv")


#abridge df for use in diagnosis modelling (so get rid of the original MAF GRLS conditiosn collumns and just keep the grouped ones)

HSA_comorbs_unique4_df7_distinct_main_cancer_counts_abr <- HSA_comorbs_unique4_df7_distinct_main_cancer_counts %>%
  dplyr::select(c(1,273:312))

write.csv(HSA_comorbs_unique4_df7_distinct_main_cancer_counts_abr,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/HSA_cohort_comorbs_incl_cancer.csv")

write.csv(HSA_comorbs_unique4_df7_distinct_main_cancer_counts,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/HSA_cohort_comorbs_incl_cancer_all_cols.csv")
```

Rerun this singular comorbs list for whole cohort ever:

```{r}
#col names to check through
comorbs_columns <- colnames(comorbs_unique[7:275]) 
#only look in these columns and then if a 1 value then put name of col in the comorb_name column


whole_cohort2 <- comorbs_unique %>%
  rowwise() %>%
  mutate(comorb_name = paste0(comorbs_columns[which(c_across(all_of(comorbs_columns)) == 1)], collapse = ", ")) %>%
  ungroup()
whole_cohort_abr2 <- whole_cohort2 %>%
  dplyr::select(c(subject_id,year_in_study,comorb_name))

whole_cohort_abr_unique2 <- whole_cohort_abr2 %>%
  distinct(subject_id, comorb_name, .keep_all = TRUE)
write.csv(whole_cohort_abr_unique2,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/all_cohort_all_comorbs_ever.csv")
```
