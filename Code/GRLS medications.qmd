---
title: "GRLS medications"
author: "Collette Taylor"
format: html
editor: visual
---

# Medication in GRLS dataset

Files and packages to import:

```{r}
library(tidyverse)
library(ggplot2)
library(lubridate)

#original medications datasets
medications <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/medications.csv",na.strings=c ("","NA"))
vaccinations <-read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/vaccines.csv",na.strings=c ("","NA"))
OTC_meds <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/over_the_counter_medications.csv",na.strings=c ("","NA"))
parasite_control <-read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/flea_tick_heartworm.csv",na.strings=c ("","NA"))
#ensure all lower case
medications <- medications %>%
  mutate(across(where(is.character), tolower))
vaccinations <- vaccinations %>%
  mutate(across(where(is.character), tolower))
OTC_meds <- OTC_meds %>%
  mutate(across(where(is.character), tolower))
parasite_control <- parasite_control %>%
  mutate(across(where(is.character), tolower))
  

# use the end_points dataset for now 
end_points <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/study_endpoints.csv")
end_points_neoplasia <- end_points %>% 
  mutate(across(where(is.character), tolower))

#subset of those dying with any neoplasia
neo_patterns <- c('oma', 'leuk', 'tumor', 'neopla')

end_points_neoplasia <- end_points_neoplasia %>% 
  mutate(neoplasia = as.integer(grepl(paste(neo_patterns, collapse = '|'), tracked_condition, ignore.case = TRUE)))

end_points_neoplasia <- end_points_neoplasia %>%
  filter(neoplasia ==1) 

  

end_HSA <- end_points_neoplasia %>% filter(grepl('hema',tracked_condition),ignore.case=TRUE)


#get neoplasia diagnosis year month column into date format
end_HSA$diagnosis_year_month_date <- as.POSIXct(end_HSA$diagnosis_date,format = "%Y-%m-%d")
# create a year column in HSA file so can do calculations on year (no point being more precise as questionaire done annually and may not match diagnosis time)
end_HSA$diagnosis_year <- as.numeric(format(end_HSA$diagnosis_year_month_date,"%Y"))
# set to month level (not day of month) = all on 1st day of month
end_HSA$diagnosis_year_month_date2 <- as.POSIXct(floor_date(end_HSA$diagnosis_year_month_date,unit="month"))
#column with has cancer set as 1 for sense checking records
end_HSA <- end_HSA %>%
  mutate(has_HSA =1)





```

Nov 2024- 301 HSA dogs in study endpoints, 981 total of neoplasia recorded at death (not necess cause of death)

## Medications

Remove rows in medications dataset that do not have any medication ingredient info:

```{r}
medications_2 <- medications %>% 
  filter(!is.na(medication_name) & !is.na(medication_ingredients))

#double check not formatted wrong and losing info in these NA ones
medications_miss <- medications %>% 
  filter(is.na(medication_name) & is.na(medication_ingredients))
# no, these are totally empty
```

### Frequency of any medication for each dog in df

```{r}
#overall freq and avg across whole study period
freq_all_time <- medications_2 %>%
  group_by(subject_id) %>%
  summarise(
    total_records = n(), # Total number of rows across all years
    avg_records_per_year = n() / n_distinct(year_in_study), # Average per year
    .groups = "drop"
  )



by_year <- medications_2 %>%
  group_by(subject_id, year_in_study) %>%
  summarise(
    yearly_records = n(),                          # Total rows for each year per subject
    .groups = "drop"
  ) %>%
  pivot_wider(                                     # Pivot to wide format
    names_from = year_in_study, 
    values_from = yearly_records, 
    values_fill = 0
  ) %>%
  rowwise() %>%
  mutate(
    avg_records_per_year = mean(c_across(-subject_id)) # Average across years per dog
  ) %>%
  ungroup()

```

```{r}
freq_all_time %>%
  summarise(mean= mean(avg_records_per_year), 
            median= median(avg_records_per_year),
  IQR=IQR(avg_records_per_year),
  range=range(avg_records_per_year),
  min = min(avg_records_per_year),
  max=max(avg_records_per_year))
```

Histograms of number of meds given across life for dogs:

```{r}
ggplot(freq_all_time, aes(x = total_records)) +
  geom_histogram(binwidth = 5, fill = "skyblue", color = "black", alpha = 0.7) +
  labs(
    title = "Histogram of Total med admins across whole study period per Dog",
    x = "Total med admins",
    y = "Number of dogs"
  ) +
  theme_minimal()

```

```{r}
ggplot(freq_all_time, aes(x = avg_records_per_year)) +
  geom_histogram(binwidth = 5, fill = "skyblue", color = "black", alpha = 0.7) +
  labs(
    title = "Histogram of avg med admins across whole study period per dog",
    x = "Total Records",
    y = "Number of dogs"
  ) +
  theme_minimal()
```

```{r}
# Histogram for average records across years
ggplot(by_year, aes(x = avg_records_per_year)) +
  geom_histogram(binwidth = 1, fill = "orange", color = "black", alpha = 0.7) +
  labs(
    title = "Histogram of Average Records Across Years",
    x = "Average Records per Year",
    y = "Frequency"
  ) +
  theme_minimal()

# Gather wide-format data into long format for per-year records
long_by_year <- by_year %>%
  pivot_longer(cols = -c(subject_id, avg_records_per_year), names_to = "year_in_study", values_to = "yearly_records")

# Histogram for all yearly records
ggplot(long_by_year, aes(x = yearly_records)) +
  geom_histogram(binwidth = 1, fill = "purple", color = "black", alpha = 0.7) +
  labs(
    title = "Histogram of Yearly Med admin counts Across All Dogs",
    x = "Med admin",
    y = "Number of dogs"
  ) +
  theme_minimal()

```

### Medication name and ingredients:

```{r}
ingredients <- medications_2 %>%
  dplyr::select(medication_name,medication_name_specify,medication_ingredients)
```

Full list (desc) of medication name:

```{r}
med_name_count <- ingredients %>%
  count(medication_name, name = "Count") %>%
  arrange(desc(Count))
med_name_count
```

\~1400 medication names

Full list (desc) of ingredients :

```{r}
med_ingredients_count <- ingredients %>%
  count(medication_ingredients, name = "Count") %>%
  arrange(desc(Count))
med_ingredients_count

write.csv(med_ingredients_count,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/medications_all.csv")
```

\~800 ingredients

### Medications dictionary of active ingredient groups:

Many ways to group, some redundancy/overlap eg. pred multi-use

NOAH compendium groupings (NB. not all drugs will be licensed so cascade use eg. mycophenolate but will use these grouping terms generally)

```{r}
anti_inflam<-c("carprofen","prednisone","meloxicam","deracoxib","grapiprant","dexamethasone","firocoxib","predisolone acetate","trimeprazine tartrate, prednisone", "triamcinolone acetonide", "diclofenac", "methylpredisolone", "hydrocortisone, gentamicin sulfate, miconazole nitrate", "ketorolac","budesonide","burow's solution, hydrocortisone","dexamethasone, miconazole nitrate
","dimethyl sulfoxide, fluocinolone acetonide","flurbiprofen","piroxicam","hydrocortisone", "dexamethasone, enrofloxacin, ketoconazole, tris-edta","beclomethasone, clotrimazole, neomycin sulfate", "dexamethasone, ketoconazole, tris-edta","ketoprofen","acetic acid, boric acid, ceramide complex, hydrocortisone, ketoconazole", "betamethasone","ketotifen","mometasone furoate","robenacoxib","dexamethasone", "flunixin", "betamethasone", "hydrocortisone", "prednisolone", "methylprednisolone", "triamcinolone acetonide", "difluprednate", "fluticasone", "burow's solution","carprofen","dexamethasone","prednisolone acetate","hydroxyzine", "diphenhydramine", "dexamethasone, miconazole nitrate", 
  "amikacin sulfate, dexamethasone", "dexamethasone, methylprednisolone", 
  "meclizine", "clemastine fumarate", "desmopressin acetate", "chlorphenamine", 
  "sevelamer", "loratadine", "fexofenadine", "dexamethasone, triamcinolone acetonide", 
  "hydrocortisone, ketoconazole", "hydroxyethyl starch, sodium chloride", 
  "dexamethasone, ketoconazole, phytosphingosine", "miconazole nitrate, salicylic acid", 
  "dexamethasone, diphenhydramine", "betamethasone, clotrimazole, gentamicin sulfate, mometasone furoate", 
  "dimethyl sulfoxide, fluocinolone acetonide, gentamicin sulfate, miconazole nitrate", 
  "dimethyl sulfoxide, flunixin, fluocinolone acetonide", "hydrocortisone, troleandomycin","Dimenhydrinate", "Dexamethasone", "Betamethasone", "Mibolerone","nepafenac",
  "dexamethasone",
  "betamethasone",
  "hydrocortisone",
  "butorphanol tartrate",
  "dimethyl sulfoxide",
  "menthol, hydrocortisone",
  "dexamethasone, ketoconazole",
  "dexamethasone, enrofloxacin",
  "dexamethasone, dimethyl sulfoxide, enrofloxacin, lidocaine",
  "dexamethasone, enrofloxacin, ketoconazole",
  "dexamethasone, penicillin",
  "dexamethasone, tobramycin","betamethasone, ofloxacin", "chloramphenicol, dexamethasone","betamethasone, chloramphenicol, ketoconazole"  , "enrofloxacin, dexamethasone, tris-edta"  ,"dexamethasone, miconazole nitrate, neomycin sulfate, nystatin, thiostrepton, triamcinolone acetonide","betamethasone, burow's solution, gentamicin sulfate, hydrocortisone, miconazole nitrate"  , "ketoconazole, hydrocortisone", "bacitracin, hydrocortisone", "dexamethasone, miconazole nitrate, tris-edta"  , "chlorhexidine gluconate, dexamethasone"   , "dexamethasone, enrofloxacin, tris-edta"  , "dexamethasone, enrofloxacin, silver sulfadiazine", "dexamethasone, miconazole nitrate, neomycin sulfate, polymyxin b, prednisolone acetate, thiabendazole" , "betamethasone, enrofloxacin" , "dexamethasone, ear cleaner (epi-otic advanced), enrofloxacin" , "betamethasone, tobramycin"            
)


anti_histamine <- c("diphenhydramine","hydroxyzine","trimeprazine tartrate, prednisone","cetirizine","loratadine","chlorphenamine","meclizine", "clemastine fumarate","dimenhydrinate","fexofenadine", "diphenhydramine", "loratadine", "cetirizine", "hydroxyzine", "chlorpheniramine", "desloratadine","cetirizine" )


anti_microbials <-c("metronidazole","cephalexin","cefpodoxime proxetil","amoxicillin, clavulanate potassium","clotrimazole, gentamicin sulfate, mometasone furoate","doxycycline","amoxicillin","betamethasone, clotrimazole, gentamicin sulfate","enrofloxacin","betamethasone, gentamicin sulfate", "clindamycin","dexamethasone, neomycin sulfate, polymyxin b", "florfenicol, mometasone furoate, terbinafine","mometasone furoate, orbifloxacin, posaconazole","sulfadimethoxine", "tylosin tartrate","isoflupredone acetate, neomycin sulfate, tetracaine","ketoconazole", "ketoconazole, tris-edta", "bacitracin zinc, neomycin sulfate, polymyxin b", "dexamethasone, neomycin sulfate, thiabendazole", "ciprofloxacin", "enrofloxacin, ketoconazole, triamcinolone acetonide", "marbofloxacin","mupirocin","betamethasone, florfenicol, terbinafine","sulfamethoxazole, trimethoprim", "cefovecin","miconazole nitrate, polymyxin b, prednisolone acetate", "ampicillin", "miconazole nitrate","fluconazole", "minocycline","tobramycin","hydrocortisone, gentamicin sulfate, miconazole nitrate", "cefazolin", "ofloxacin","gentamicin sulfate, hydrocortisone, miconazole nitrate", "azithromycin","acetic acid, chlorhexidine gluconate, ketoconazole","bacitracin zinc, hydrocortisone, neomycin sulfate, polymyxin b","enrofloxacin, silver sulfadiazine", "chlorhexidine gluconate, ketoconazole, phytosphingosine","bacitracin zinc, dexamethasone, neomycin sulfate, polymyxin b","chlorhexidine gluconate, miconazole nitrate","chlorhexidine gluconate, miconazole nitrate, tris-edta","gentamicin sulfate","ormetoprim, sulfadimethoxine","acetic acid, boric acid, hydrocortisone, ketoconazole","penicillin","ampicillin, sulbactam","sulfamethoxazole","chloramphenicol","oxytetracycline, polymyxin b","ceftiofur sodium","sulfadiazine, trimethoprim","chloroxylenol, ketoconazole","dexamethasone, enrofloxacin, miconazole nitrate", "ketoconazole, phytosphingosine", "sulfadimidine, trimethoprim", "neomycin sulfate, polymyxin b, gramicidin", "orbifloxacin", "chlorhexidine gluconate, phytosphingosine", "nitrofurantoin", "penicillin g","beclomethasone, clotrimazole, neomycin sulfate", "dexamethasone, ketoconazole, tris-edta","neomycin","penicillin g procaine","acetic acid, boric acid, ceramide complex, hydrocortisone, ketoconazole","ketoconazole, triamcinolone acetonide", "amikacin sulfate","dimethyl sulfoxide, enrofloxacin, fluocinolone acetonide","meropenem","amforol","bacitracin zinc, neomycin sulfate, polymyxin b, unspecified steroid","ceftazidime","enrofloxacin", "miconazole nitrate", "triamcinolone acetonide","polymyxin b", "povidone-iodine", "trimethoprim", "unspecified antibiotic", "ceftiofur", "cephalosporin", "ciprofloxacin", "chloramphenicol", "gentamicin sulfate", "ofloxacin", "bacitracin zinc", "bacitracin", "neomycin sulfate", "nystatin", 
                 "tetracycline", "erythromycin", "rifampin", "amoxicillin", "amikacin sulfate","clotrimazole", "miconazole nitrate", "ketoconazole", "fluconazole", "nystatin", 
                "terbinafine", "itraconazole", "griseofulvin", "enrofloxacin, tris-edta", "enrofloxacin, tobramycin", "enrofloxacin, ketoconazole, neomycin sulfate", 
  "chloramphenicol, neomycin sulfate, nystatin, thiostrepton, triamcinolone acetonide", 
  "enrofloxacin, triamcinolone acetonide", "clotrimazole, dexamethasone, enrofloxacin", 
  "clotrimazole, dexamethasone", "enrofloxacin, ketoconazole", "gentamicin sulfate, ketoconazole", 
  "chlorhexidine gluconate, enrofloxacin, tris-edta", "chloroxylenol, salicylic acid, sodium thiosulfate","Chloramphenicol","Amikacin sulfate", "Gentamicin sulfate", "Enrofloxacin", "Neomycin sulfate", "Nystatin", 
  "Penicillin", "Miconazole nitrate", "Clotrimazole", "Ofloxacin",   "amikacin sulfate",
  "gentamicin sulfate",
  "miconazole nitrate",
  "enrofloxacin",
  "ofloxacin",
  "gentamicin sulfate, miconazole nitrate",
  "chloramphenicol",
  "penicillin",
  "oseltamivir",
  "florfenicol",
  "ketoconazole",
  "mupirocin",
  "nystatin",
  "triamcinolone acetonide",    "ofloxacin, unspecified nsaid", "amikacin sulfate, miconazole nitrate","amikacin sulfate, gentamicin sulfate, triamcinolone acetonide", "penicillin g benzathine, penicillin g procaine","neomycin sulfate, tetracaine , triamcinolone acetonide","enrofloxacin, miconazole nitrate, triamcinolone acetonide","itraconazole, ketoconazole, triamcinolone acetonide", "ketoconazole, neomycin sulfate, nystatin, thiostrepton, triamcinolone acetonide, tris-edta","betamethasone, ofloxacin" , "piroctone olamine" ,"chloramphenicol, dexamethasone" ,"ketoconazole, mupirocin, triamcinolone acetonide" ,"clotrimazole, enrofloxacin, triamcinolone acetonide" ,"betamethasone, chloramphenicol, ketoconazole" , "voriconazole" ,"enrofloxacin, dexamethasone, tris-edta","dexamethasone, miconazole nitrate, neomycin sulfate, nystatin, thiostrepton, triamcinolone acetonide" ,"betamethasone, burow's solution, gentamicin sulfate, hydrocortisone, miconazole nitrate" ,"ketoconazole, hydrocortisone","enrofloxacin, ketoconazole, tris-edta" ,"ketoconazole, sodium hypochlorite","moxifloxacin","neomycin sulfate, nystatin" , "attapulgite, bismuth subsalicylate, kanamycin","bacitracin zinc, miconazole nitrate, polymyxin b","neomycin sulfate, nystatin, triamcinolone acetonide" ,"ciprofloxacin, ketoconazole, triamcinolone acetonide" ,"chloramphenicol, ketoconazole, triamcinolone acetonide","potentiated sulfonamides", "kaolin, neomycin sulfate, pectin", "cefadroxil" , "dexamethasone, enrofloxacin, tris-edta","fenbendazole, maropitant citrate, metronidazole, omeprazole, sucralfate","dexamethasone, enrofloxacin, silver sulfadiazine", "dexamethasone, miconazole nitrate, neomycin sulfate, polymyxin b, prednisolone acetate, thiabendazole", "betamethasone, enrofloxacin", "dexamethasone, ear cleaner (epi-otic advanced), enrofloxacin" , "betamethasone, tobramycin"                                                                                      )


anti_parasites <-c("ivermectin, pyrantel pamoate","afoxolaner","lufenuron, milbemycin oxime","ivermectin","milbemycin oxime","fluralaner","fipronil, (s)-methoprene","milbemycin oxime, spinosad", "neomycin sulfate, nystatin, thiostrepton, triamcinolone acetonide","fenbendazole"<"pyrantel pamoate","dinotefuran, permethrin, pyriproxyfen","imidacloprid, pyriproxyfen","sarolaner" , "milbemycin oxime, praziquantel","ivermectin, praziquantel, pyrantel pamoate","selamectin", "flumethrin, imidacloprid","moxidectin","lufenuron, milbemycin oxime, praziquantel", "spinosad","fipronil, permethrin, pyriproxyfen","febantel, praziquantel, pyrantel pamoate","imidacloprid, permethrin", "praziquantel","praziquantel, pyrantel pamoate", "imidacloprid, moxidectin", "fipronil, pyriproxyfen, (s)-methoprene", "fipronil","lotilaner", "lufenuron", "cyphenothrin, fipronil","ponazuril","cyphenothrin, fipronil, (s)-methoprene","clorsulon, ivermectin","imidacloprid", "nitenpyram","terbinafine","indoxacarb","deltamethrin","(s)-methoprene","mebendazole","itraconazole","fipronil, permethrin", "unspecified heartworm preventative", "amitraz", "epsiprantel","permethrin","afoxolaner, milbemycin oxime","indoxacarb, permethrin","permethrin, pyriproxyfen","dinotefuran","ivermectin, lufenuron, mebendazole, praziquantel, pyrantel pamoate","febantel", "milbemycin oxime", "moxidectin", "fenbendazole", "praziquantel", 
                  "pyrantel pamoate", "oxantel", "diethylcarbamazine citrate","amitraz", "permethrin", "imidacloprid", "fipronil","etofenprox","selamectin", "pyriproxyfen", "s-methoprene", "diatomaceous earth", "nitenpyram","amitraz, metaflurimon", "etofenprox, (s)-methoprene, piperonyl butoxide", 
  "etofenprox, n-octyl bicycloheptene dicarboximide, piperonyl butoxide, pyriproxyfen, (s)-methoprene", 
  "unspecified herbal flea/tick preventative", "unspecified flea/tick preventative","Ivermectin",  "milbemycin oxime",
  "oxantel",
  "praziquantel",
  "moxidectin",
  "pyrantel pamoate",
  "sarolaner",
  "unspecified parasite preventative",
    "moxidectin, pyrantel pamoate, sarolaner", "milbemycin oxime, oxantel, praziquantel", "fatal plus","unspecified flea preventative","toltrazuril","mebendazole, praziquantel, pyrantel pamoate","imidacloprid, permethrin, pyriproxyfen","fenbendazole, maropitant citrate, metronidazole, omeprazole, sucralfate"        
)


anti_septics<-c("chlorhexidine gluconate","chlorhexidine gluconate, ophytrium","chlorhexidine gluconate, ketoconazole","chlorhexidine gluconate, climbazole, phytosphingosine","chlorhexidine gluconate, tris-edta", "chlorhexidine gluconate, ketoconazole, tris-edta","chlorhexidine gluconate, hydrocortisone, tris-edta","chloroxylenol, lactic acid, salicylic acid", "colloidal silver", "chloroxylenol, salicylic acid, sodium thiosulfate","Silver sulfadiazine", "Gentian violet", "Boric acid","silver sulfadiazine",
  "hydrogen peroxide",
  "chlorhexidine gluconate","silver sulfadiazine, insulin","ceramide iii, chlorhexidine gluconate, microsilver" ,"boric acid, gentian violet, silver sulfadiazine","polyvinyl alcohol, povidone" ,"benzoyl peroxide, salicylic acid" ,"unspecified antiseptic"  , "chlorhexidine gluconate, dexamethasone" , "benzoic acid, chlorhexidine gluconate, malic acid, salicylic acid" , "benzoyl peroxide, phytosphingosine, salicylic acid, sulfur"        )


cardio_respiratory<-c("pimobendan","dextromethorphan hydrobromide, guaifenesin","enalapril","homatropine, hydrocodone","benazepril hcl","amlodipine","sotalol","spironolactone", "prazosin", "clopidogrel","mexiletine","sildenafil", "dextromethorphan hydrobromide","guaifenesin","albuterol sulfate","pentoxifylline","theophylline","timolol","amiodarone", "lidocaine", "mexiletine","propranolol", "terbutaline", "oxygen", "diltiazem","Epoetin alfa-epbx", "Tyrosine","pseudoephedrine",
  "dimenhydrinate",
  "dextromethorphan, guaifenesin","aminocaproic acid","clonidine")


dietary_supplements<-c("probiotic","omega 3","joint supplement (chondroitin sulfate/glucosamine hcl/msm)","joint supplement (chondroitin sulfate/glucosamine hcl)", "digestive supplement", "multivitamin", "butorphanol tartrate", "vitamin b", "joint supplement (glucosamine hcl/msm)","taurine","liver supplement","joint supplement (glucosamine hcl)", "urinary tract supplement", "yunnan baiyao", "prebiotic, probiotic","joint supplement (other)","immune support supplement","calming supplement", "vitamin c","skin and coat supplement", "vision supplement","vitamin d","cisapride","l-carnitine","joint supplement (chondroitin sulfate)","vitamin k","kidney health supplement","vitamin e", "melatonin", "thyroid support supplement", "liver happy","omega 3-6-9","shen calmer", "turmeric", "calcium", "niacinamide","l-asparaginase","unspecified supplement","vitamin a","wei qi booster","coenzyme q10","curcumin", "dl-methionine","flaxseed", "joint supplement (msm)","kelp","omega 3-6","acetylcysteine","anal gland supplement","coprophagia supplement","digestive supplement, joint supplement (glucosamine hcl/msm), probiotic, skin and coat supplement, vitamins and minerals", "joint supplement (chondroitin sulfate/glucosamine hcl/msm), multivitamin","seasonal and environmental allergy supplement","unspecified herbal supplement","cardiac support supplement","cognitive supplement","garlic", "joint supplement (other), skin and coat supplement","lung supplement","digestive supplement", "prebiotic", "probiotic", "immune support supplement",  "silymarin", "milk thistle", "colostrum", "echinacea", "reishi mushroom", "astragalus","high calorie nutritional supplement", "gallbladder function supplement",  "joint supplement (glucosamine hcl)", "omega 3", "puppy growth supplement",  "lutein supplement", "vitamin E", "biotin", "selenium", "zinc", "iron", 
                        "magnesium citrate", "nourish essence formula", "ca support", "bee pollen", "brewers yeast, garlic", 
  "xiao chai hu jia qin jiao tang", "liu jun zi tang", "yi zhi ren", "bitter melon", 
  "spinal support supplement", "mangosteen extract", "shu jin i", "juan bi 1", 
  "amylase, lipase, protease", "cognitive supplement, liver supplement", "musculoskeletal supplement", 
  "hairball control supplement", "wheat germ", "gm np hsa formula", "cognitive supplement, liver supplement", "unspecified thyroid medication or supplement", "Sodium carboxymethylcellulose", "Ba Zheng Wan", "Jin Gui Shen Qi Wan", 
  "Digestive supplement, prebiotic, probiotic", "General female health supplement", 
  "Strengthen metal", "Gather vitality", "Xue Fu Zhu Yu Tang", "Bilberry", 
  "Puppy supplement", "Digestive supplement, immune support supplement, skin and coat supplement", 
  "Silver sulfadiazine, insulin", "Squalane", "Chitosan", "Ashwagandha", "Homeopathic vaccine spray", 
  "Sulforaphane producing supplement", "Liu Wei Di Huang Wan", "Vitamin-iron supplement", 
  "Fenofibrate", "Mibolerone", "Corneal repair", "Slippery elm", "Jia Wei Xue Fu Zhu Yu Tang", 
  "Viscoadaptive hyaluronan", "Rx diet - weight management", "Epoetin alfa-epbx", "Geraniol", 
  "Tyrosine", "Aluminium hydroxide, magnesium hydroxide", "Phytosphingosine, pramoxine","Slippery elm","Sodium carboxymethylcellulose", "Ba Zheng Wan", "Jin Gui Shen Qi Wan", "Digestive supplement, prebiotic, probiotic", 
  "General female health supplement", "Strengthen metal", "Gather vitality", "Xue Fu Zhu Yu Tang", "Bilberry", 
  "Puppy supplement", "Digestive supplement, immune support supplement, skin and coat supplement" ,"Squalane", "Chitosan", "Ashwagandha", "Homeopathic vaccine spray", 
  "Sulforaphane producing supplement", "Liu Wei Di Huang Wan", "Vitamin-iron supplement","sodium carboxymethylcellulose",
  "unspecified herbal thyroid support supplement",
  "digestive supplement, prebiotic, probiotic",
  "unspecified digestive medication",
  "puppy supplement",
  "digestive supplement, immune support supplement, skin and coat supplement",
  "general female health supplement",
  "strengthen metal",
  "xue fu zhu yu tang",
  "bilberry",
  "tear stain supplement",
  "magnesium",
  "sulforaphane producing supplement",
  "slippery elm",
  "vitamin-iron supplement",
  "chitosan",
  "vitamin-iron supplement",
  "geranium oil, lavender oil, neem oil, peppermint oil, yarrow",
  "ashwagandha",
  "gexia-zhuyu tang",
  "gather vitality",
  "squalane",
  "diatomaceous earth, neem oil, yarrow",
  "gexia-zhuyu tang", "joint supplement (chondroitin sulfate/msm)","medium-chain triglycerides" ,"joint supplement (unspecified)","colon supplement",
"cbd or hemp oil, joint supplement (unspecified)","stomach happy", "tyrosine" ,"spleen support supplement","testicular health supplement","endocrine system support","unspecified vitamin", "gut restore supplement" ,"apoptosis supplement" ,"vitamin b, vitamin b complex, vitamin b12, vitamin e" ,"palmitoylethanolamide" ,"chondroitin sulfate, hyaluronic acid, n-acetyl-d-glucosamine, triamcinolone acetonide","graviola" , "pancreatic enzyme supplement", "rx diet - aging care", "l-lysine"  , "joint supplement (glucosamine hcl), omega 3"  , "ba zheng wan", "jin gui shen qi wan", "ku shen si wu", "jade windscreen", 
"liu wei di huang wan", 
    "xiang lian san", "jing tang max's formula", 
    "jia wei xue fu zhu yu tang",  "long dan xie gan wan", 
    "di tan tang"   )


diuretics <-c("furosemide")

enteric<-c("maropitant citrate","famotidine","sucralfate","omeprazole","metoclopramide", "ondansetron","apomorphine hcl","ursodiol","mirtazapine","loperamide","ranitidine", "activated charcoal, bismuth subsalicylate, kaolin, pectin","pantoprazole", "activated charcoal", "bismuth subsalicylate","lactulose","simethicone", "activated charcoal, kaolin","activated charcoal, kaolin, sorbitol",
"activated charcoal, sorbitol","apple cider vinegar","dolasetron", "metoclopramide", "ondansetron", "cerenia", "maropitant citrate", "crofelemer","cimetidine","aluminium hydroxide, magnesium hydroxide, simethicone","diphemanil metilsulfate" , "aluminium hydroxide"        )


fluid_metabolites <-c("lactated ringer's solution","plasma-lyte","electrolyte injection","sodium chloride","dextrose","whole blood transfusion", "iron dextran", "platelet transfusion", "donor lymphocyte infusion (dli)", 
  "hydroxyethyl starch, sodium chloride", "potassium chloride",
  "plasma","magnesium", "potassium chloride", "sodium chloride", "calcium carbonate","saline","hypertonic saline","unspecified fluid therapy"  , "phosphorus" , "sodium"    )


hormones_and_related <-c("levothyroxine", "thryoxine","diethylstilbestrol","oxytocin","trilostane","estriol", "pyridostigmine bromide","finasteride","aglepristone","nph insulin", "megestrol acetate", "cabergoline", "thyroxine",  "fludrocortisone", "leflunomide", "paroxetine", "metformin","desmopressin acetate", "cosyntropin", "bethanechol", "epinephrine", "pamidronate", "thiamazole", 
  "Silver sulfadiazine, insulin","Epoetin alfa-epbx","insulin","epoetin alfa-epbx", "melatonin", "oxytocin", "progesterone","dinoprost tromethamine","silver sulfadiazine, insulin","mibolerone","fuzapladib sodium" , "misoprostol")


neurological <-c("gabapentin","tramadol","trazodone", "acepromazine","fluoxetine", "dexmedetomidine", "propofol","alprazolam","levetiracetam","phenobarbital","buprenorphine", "ketamine", "diazepam","midazolam","hydromorphone","zonisamide","hydrocodone", "isoflurane","capromorelin", "amantadine","potassium bromide","atipamezole","morphine","tiletamine, zolazepam","clomipramine","codeine","fentanyl","methadone","lidocaine","amitriptyline","diphenoxylate","pramoxine", "sevoflurane", "bupivacaine","glycopyrrolate", "alfaxalone", "aminopentamide hydrogen sulfate","trimeprazine tartrate","acepromazine, atropine sulfate, butorphanol tartrate", "acepromazine, hydromorphone", "acepromazine, ketamine", "acetaminophen","acetaminophen, hydrocodone", "oxycodone","sertraline","xylazine","butorphanol tartrate", "gabapentin", "acetaminophen", "methadone", "buprenorphine", 
 "hydromorphone", "tramadol",  "fentanyl","buspirone", "paroxetine", "doxepin", "clonazepam", "lorazepam", "sertraline",  "escitalopram", "fluoxetine", "amitriptyline", "mirtazapine","butorphanol tartrate, dexmedetomidine", "ketamine, xylazine", "pregabalin", "belladonna alkaloids, phenobarbital", "Clorazepate", "dimethyl sulfoxide",
  "clorazepate",
  "butorphanol tartrate",
  "betamethasone, gentamicin sulfate, miconazole nitrate","tramadol", "gabapentin", "diazepam", "carbamazepine", "phenobarbital","bupivacaine, lidocaine","phenobarbital, potassium bromide",
  "butorphanol tartrate, dexmedetomidine, tiletamine, zolazepam","menthol, lidocaine","hydrocortisone, pramoxine","felbamate", "gabapentin, trazodone" )


immunologicals <- c("oclacitinib","lokivetmab","bedinvetmab", "cyclosporine", "chlorambucil","cyclophosphamide","doxorubicin","azathioprine","vincristine","sulfasalazine", "lomustine", "mycophenolate mofetil","tacrolimus","anti-cd52 monoclonal antibodies","procarbazine","vinblastine","melphalan","carboplatin","temozolomide", "dactinomycin", "cyclophosphamide", "doxorubicin", "vincristine",  "cisplatin", "melanoma vaccine", "egft/her2", "imatinib","chop protocol (cyclophosphamide/doxorubicin/prednisone/vincristine)","trametinib","lapatinib","elspar","vorinostat","verdinexor","vinorelbine","masitinib",   "tigilanol tiglate" )


anti_viral <- c("imatinib", "interferon alfa", "acyclovir", "valacyclovir", "zidovudine","oseltamivir", "acyclovir")

misc<-c("polysulfated glycosaminoglycan","phenylpropanolamine","methocarbamol", "ear cleaner (epi-otic advanced)","ear cleaner (zymox), hydrocortisone","atropine sulfate", "allergy immunotherapy - unspecified","ear cleaner (zymox)", "toothpaste/dental health solution or chews","acetic acid, boric acid","unspecified medication","cbd or hemp oil","allergy immunotherapy - drops", "allergy immunotherapy - injection","telmisartan","phytosphingosine","carvacrol","dorzolamide, timolol","coconut oil","latanoprost","silver sulfadiazine","toceranib","unspecified thyroid medication","unspecified otic ear pack","aspirin","atropine sulfate, diphenoxylate","acetaminophen, codeine","arnica","hypochlorous acid","tris-edta","tropicamide", "benzocaine","ophytrium","edta", "unspecified shampoo/mousse", "barium", "body sore", "phytosphingosine, salicylic acid", "carbomer, cetrimide, deionized water, disodium edta, sodium hydroxide, sorbitol","propylene glycol, salicylic acid","benzoyl peroxide","dorzolamide","rx diet - digestive support","oxymetazoline", "aconite, arnica, belladona, calendula, chamomile, daisy, echinacea, hepar sulphur, hypericum perforatum, mercurius solubilis, millefolium, symphytum officinale, witch hazel","algae","allopurinol","aloe vera","menthol","rx diet - hypoallergenic hydrolyzed protein","sirolimus","unspecified ear cleaner", "algae","burow's solution","corneal reapir","pentosan polysulfate","pilocarpine","polyethylene glycol","unspecified ear medication","amino acid","burow's solution, hydrocortisone, miconazole nitrate","cedarwood oil, rosemary oil, sesame","staphylococcus aureus phage lysate", "plasma-derived immunoglobulin",  "platelet-rich plasma (prp) injections", "growth factor supplement", "microcurrent therapy", "laser therapy","clinical trial - cancer prevention vaccine", "unspecified vaccine", "Aluminium hydroxide, magnesium hydroxide","Fenofibrate", "Phytosphingosine", "Pramoxine","Viscoadaptive hyaluronan","Mibolerone", "Dimethyl sulfoxide",
  "transcranial magnetic stimulation (tms)","Chitosan", "Homeopathic vaccine spray","methazolamide","attapulgite, bismuth subcarbonate, kanamycin a",
  "dilute bleach solution",
  "stasis breaker",
  "unspecified astringent","rattlesnake antivenin",
  "homeopathic vaccine spray","unspecified",
  "unspecified otic ointment",
  "unspecified otic flush",
  "external wind",
  "unspecified eye dilation drops",
  "unspecified allergy medication",
  "over-the-counter antipruritic/astrigent",
  "over-the-counter wound dressing",
  "unspecified vision supplement",
  "unspecified eye medication",
  "over-the-counter unmedicated shampoo/mousse",
  "unspecified wipes",
  "unspecified wipes",
  "rx diet - weight management",
  "sodium hypochlorite",
  "unspecified eye drops",
  "liquid bandage",
  "ear cleaner (aloeclens)",
  "ear cleaner (oticlean a)",
  "unspecified antiseptic ointment","hypericum","wind toxin", "niosomes", "viscoadaptive hyaluronan", "amforal", "rv1001", "shu jin huo luo",   "phytosphingosine",  "prochlorperazine", "coal tar solution, menthol, salicylic acid", "unspecified chemotherapy", 
    "hyaluronic acid", "ceramide complex, coconut oil, safflower","ear cleaner (otirinse)","bordetella bronchiseptica","hydroquinone, mometasone furoate, tretinoin","cassia bark, colloidal silicon dioxide, clove, eucalyptus, isopropyl myristrate, lanolin, mineral oil, origanum, vitamin e, white petrolatum", "manganese","magnolia bark","dental sealant","lotion or leave in conditioner","diatomaceous earth, geranium oil, lavender oil, neem oil, peppermint oil, yarrow","four marvels",  "gui pi tang" ,"fu zheng support" , "unspecified analgesic", "cedarwood oil, eucalyptus, geranium oil, rosemary oil","stem cells","corneal repair","ocular repair gel","fenofibrate","ear cleaner (oti-soothe)",           "ferrum metallicum","naphazoline, pheniramine maleate","xiao chai hu tang" , "geraniol" ,"paw protection wax" ,"aluminium hydroxide, magnesium hydroxide"  , "ear cleaner (animal pharmaceuticals)","phytosphingosine, pramoxine" ,"pramoxine, phytosphingosine","damp heat","fenugreek, lemon balm, mint, neem oil, seaweed","loranthus formula" ,"junpier","tamarix dioica","potassium gluconate" ,"unspecified atopy medication" ,"antioxidant","citronella, geranium oil, lemongrass oil, peppermint oil" , "ear cleaner (oxyfresh)","catnip, cedarwood oil, citronella, erigeron, eucalyptus, geraniol, neem oil, rosemary oil, witch hazel","papaya", "rx clay", "tranexamic acid","epsom salt","silver oxide, type i collagen","dapagliflozin" , "benzethonium chloride, lidocaine" , "qing ying tang","schisandra", "borage oil","burow's solution, miconazole nitrate" , "cinnamon, lemongrass oil, peppermint oil, thyme"    , "olive oil"  , "ear astringent (vedco)" ,"unspecified herbal wart remover" , "natural wart remover" ,"ear cleaner (protonix)" ,"unspecified rx diet","ear cleaner (epi-otic advanced), ketoconazole", "bu yang huan wu","benzocaine, resorcinol" ,"viola clear fire","grapefruit seed extract, lavender oil, noni fruit","castor oil, cinnamon, lemongrass oil, sesame","walnut oil",                 "ear cleaner (nutri-vet)" ,"ear cleaner (aurocin)" , "cedarwood oil, peppermint oil" , "ear cleaner (well and good)", "unspecified eye lubricant"  , "zoledronic acid" , "iopromide" , "mycobacterium cell wall fraction (mcwf) immunostimulant" , "cholestyramine" , "dextran, glycerin, hypromellose", "lyssin"  , "juniper"  , "rx diet - renal health", "rx diet - selected protein (duck)", "rx diet - skin and food sensitivity", 
  "rx diet - gi low fat", "rx diet - food sensitivities", "rx diet - gi low fat" ,"other"        )


all_med_groups <- c(anti_inflam,anti_histamine,anti_microbials,anti_parasites,anti_septics,cardio_respiratory,dietary_supplements,diuretics,enteric,fluid_metabolites,hormones_and_related,neurological,immunologicals,anti_viral,misc)

#check have grouped all
int <- setdiff(ingredients$medication_ingredients, all_med_groups)
print(int)



```

Group according to these in new column:

```{r}
medications_2 <- medications_2  %>%
  mutate(
    active_ingredient_groups = case_when(
      medication_ingredients %in% anti_inflam ~ "anti_inflam",
      medication_ingredients %in% anti_histamine ~ "anti_hist",
      medication_ingredients %in% anti_microbials ~ "anti_microbials",
      medication_ingredients %in% anti_parasites ~ "anti_parasites",
      medication_ingredients %in% anti_septics~ "anti_septics",
      medication_ingredients %in% cardio_respiratory ~ "cardio_respiratory",
      medication_ingredients %in% dietary_supplements ~ "dietary_supplements",
      medication_ingredients %in% diuretics ~ "diuretics",
      medication_ingredients %in% enteric ~ "enteric",
      medication_ingredients %in% fluid_metabolites ~ "fluid_metabolites",
      medication_ingredients %in% hormones_and_related ~ "hormones_and_related",
      medication_ingredients %in% neurological ~ "neurological",
      medication_ingredients %in% immunologicals ~ "immunologicals",
      medication_ingredients %in% anti_viral ~ "anti_viral",
      medication_ingredients %in% misc ~ "misc",
      TRUE ~ "no_freq_recorded" # For values not in any group
    )
  )
```

Only retain medications with \>100 recordings in df and then classify into med groups

Then rest as other:

```{r}

low_count_ingredients <- med_ingredients_count$medication_ingredients[
  med_ingredients_count$Count < 100
]

# Recode medications_2 based on the mapping
medications_2$medication_ingredients_100 <- ifelse(
  medications_2$medication_ingredients %in% low_count_ingredients, 
  "other", 
  medications_2$medication_ingredients
)

# now reclass into other broad categories above
medications_2 <- medications_2  %>%
  mutate(
    active_ingredient_groups_100 = case_when(
      medication_ingredients_100 %in% anti_inflam ~ "anti_inflam",
      medication_ingredients_100 %in% anti_histamine ~ "anti_hist",
      medication_ingredients_100 %in% anti_microbials ~ "anti_microbials",
      medication_ingredients_100 %in% anti_parasites ~ "anti_parasites",
      medication_ingredients_100 %in% anti_septics~ "anti_septics",
     medication_ingredients_100 %in% cardio_respiratory ~ "cardio_respiratory",
      medication_ingredients_100 %in% dietary_supplements ~ "dietary_supplements",
      medication_ingredients_100 %in% diuretics ~ "diuretics",
      medication_ingredients_100 %in% enteric ~ "enteric",
      medication_ingredients_100 %in% fluid_metabolites ~ "fluid_metabolites",
      medication_ingredients_100 %in% hormones_and_related ~ "hormones_and_related",
      medication_ingredients_100 %in% neurological ~ "neurological",
      medication_ingredients_100 %in% immunologicals ~ "immunologicals",
      medication_ingredients_100 %in% anti_viral ~ "anti_viral",
      medication_ingredients_100 %in% misc ~ "misc",
      TRUE ~ "no_freq_recorded" # For values not in any group
    )
  )
```

Other groupings??

Plots of counts of these groupings:

```{r}
medications_100_count <- medications_2 %>%
  count(medication_ingredients_100, name = "Count") %>%
  arrange(desc(Count))

#truncate names to 100 str
medications_100_count<- medications_100_count %>%
  mutate(medication_ingredients_100 = str_sub(medication_ingredients_100, 1, 100))

p<-ggplot(data=medications_100_count, aes(x=reorder(medication_ingredients_100,Count), y=Count)) +
  geom_bar(stat="identity")+
    theme(
    axis.text.x = element_text(angle = 90, hjust = 1, size = 8)) +
      labs(y="Count",x="Active Ingredients")
p
```

```{r}
active_ingredients_100_count_group <- medications_2 %>%
  count(active_ingredient_groups_100, name = "Count") %>%
  arrange(desc(Count))


p<-ggplot(data=active_ingredients_100_count_group, aes(x=reorder(active_ingredient_groups_100,Count), y=Count)) +
  geom_bar(stat="identity") +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, size = 8)) +
        labs(y="Count",x="Medicine groups")
p


```

### Medication dosing, frequency, duration particulars:

#### Medication admin routes:

```{r}
med_admin <- medications_2 %>%
  count(administration_method, name = "Count") %>%
  arrange(desc(Count))
med_admin


```

```{r}
other_specify <- medications_2 %>%
  count(administration_method_specify, name = "Count") %>%
  arrange(desc(Count))
other_specify

#group these better so most specifc are going to be captured in admin_metho
topical <- c("in ear", "collar","in eye", "apply to skin","transdermal","unspecified drops")
oral <- c("oral","in food","teeth")
injection <-c("ia injection","intra haematoma","intra-lesional","epidural","injection")
intravenous <-c("continuous rate infusions","iv infusion","intravenously")
inhalant <- c("aerosol","inhalant","aerosol")
other <- c("rectally","anal gland infusion")


  
```

Reclassify administration methods again

```{r}
medications_2 <-medications_2 %>%
    mutate(
    administration_method_specify2 = case_when(
    administration_method_specify %in% topical ~"topical",
    administration_method_specify %in% oral ~"oral",
    administration_method_specify %in% injection ~ "injection other",
    administration_method_specify %in% intravenous ~"intravenous injection",
    administration_method_specify %in% inhalant ~"inhalant",
    administration_method_specify %in% other ~ "other",
    TRUE ~ administration_method_specify 
  ))


other_specify2 <- medications_2 %>%
  count(administration_method_specify2, name = "Count") %>%
  arrange(desc(Count))
other_specify2
```

Now add the other specifies back into the administration_method column

```{r}
medications_2 <- medications_2 %>%
  mutate(
      administration_method = if_else(
      administration_method == "other specify",
      administration_method_specify2,
      administration_method
    )
  )
```

#### Medication dosing:

```{r}
dose_count <- medications_2 %>%
    count(dose, name = "Count") %>%
  arrange(desc(Count))


dose_count

```

```{r}
dose_unit_count <- medications_2 %>%
  count(dose_unit, name="Count") %>%
  arrange(desc(Count))

dose_unit_count
```

```{r}

dose_unit_count_other_spec <- medications_2 %>%
  count(dose_unit_specify, name="Count") %>%
  arrange(desc(Count))

dose_unit_count_other_spec
```

Ones that are worth tidying for calculations here:

-   tablet/pill/capsule one AND 1 tablet/pill/capsule - these are all flea/worming tx - there are \~3000 of these

-   'based on weight' and all the 'based on weight' + weight range ones eg. 'based on weight (50-100lbs) - there are several hundred of these

-   mg/ml

-   mg/kg

-   gm

-   mg

-   ml

-   specific parasiticide ones eg. 460 mg lufenuron, 23 mg milbemycin oxime?

```{r}
dose <- medications_2 %>%
  dplyr::select(c(medication_ingredients,dose,dose_unit,dose_unit_specify))

dose$dose_original <- dose$dose
dose$dose_unit_original <-dose$dose_unit
#regex to try and ID rows that do not have a numeric dose there:
non_numeric_dose <- dose[!grepl("^\\d+(\\.\\d+)?$", dose$dose), ]

# View the result
print(non_numeric_dose)
print(nrow(non_numeric_dose))




##deal with 'other specify' in dose_unit column
dose <- dose %>%
  mutate(dose_unit = ifelse(dose_unit == "other specify", dose_unit_specify, dose_unit))
#and 'drop' in dose_unit
dose <- dose %>%
  mutate(dose_unit = ifelse(dose_unit == "drop", dose_unit_specify, dose_unit))


#deal with unspecified in the dose column
dose <- dose %>%
  mutate(
    dose = ifelse(dose == "unspecified" & !is.na(dose_unit), dose_unit, dose)
  )
#first regex tidying pass
#some rules to apply to dose
#1)if 2 numbers with NO other strings in it are split by a '-' then do avg of the 2 numbers
#2)delete mg/kg or any "X/X" units from strings

#3)strip mg,ml and tbs, tsp, g, mcg from a string if only a single number is there (no comma seperating multi drugs in dose)


###1)
dash_pattern <- grepl("^\\d+(\\.\\d+)?\\s*-\\s*\\d+(\\.\\d+)?$", dose$dose)

# Calculate the average for rows matching the pattern
dose$dose[dash_pattern] <- sapply(dose$dose[dash_pattern], function(x) {
  # Split the string by '-'
  nums <- as.numeric(unlist(strsplit(x, "-")))
  # Return the average
  mean(nums)
})


#1) fixes about 1000 rows

non_numeric_dose2 <- dose[!grepl("^\\d+(\\.\\d+)?$", dose$dose), ]

# View the result
print(non_numeric_dose2)
print(nrow(non_numeric_dose2))



#deal with oncology chemo doses of mg/m2 seperate to other patterns
  # Regular expression to find rows with 'mg/m2'
unit_pattern <- "mg/m2"

# Identify rows with 'mg/m2' in the dose column
rows_with_mg_m2 <- grepl(unit_pattern, dose$dose)

# Update dose_unit to 'mg/m2' for these rows
dose$dose_unit[rows_with_mg_m2] <- "mg/m2"

# Remove 'mg/m2' from the dose column for these rows
dose$dose[rows_with_mg_m2] <- gsub(unit_pattern, "", dose$dose[rows_with_mg_m2])


#2)
# Define the unit pattern
unit_pattern <- "\\b(mg|mcg)\\s*/\\s*(kg|ml|lb)\\b"
matches <- grepl(unit_pattern, dose$dose, ignore.case = TRUE) & dose$dose_unit == "other specify"

# Update the dose_unit column for matching rows
dose$dose_unit[matches] <- regmatches(dose$dose[matches], regexpr(unit_pattern, dose$dose[matches], ignore.case = TRUE))

# Remove the matched units from the dose column for the same rows
dose$dose[matches] <- gsub(unit_pattern, "", dose$dose[matches], ignore.case = TRUE)

# Trim any extra whitespace in both columns
dose$dose <- trimws(dose$dose)
dose$dose_unit <- trimws(dose$dose_unit)

# View the updated dataset
print(dose)

#now apply same for those that done have 'other specify' for dose unit
unit_pattern <- "\\b(mg|mcg|ug)\\s*/?\\s*(kg|ml|lb)?\\b|\\b(mg|mcg)\\b"
# Identify rows where the `unit_pattern` is matched in `dose`
matches <- grepl(unit_pattern, dose$dose, ignore.case = TRUE)

# For rows that match the unit pattern, update `dose_unit` and clean up `dose`
dose$dose_unit[matches] <- regmatches(dose$dose[matches], regexpr(unit_pattern, dose$dose[matches], ignore.case = TRUE))



# Remove the matched units from the `dose` column for the same rows
dose$dose[matches] <- gsub(unit_pattern, "", dose$dose[matches], ignore.case = TRUE)

# Trim any extra whitespace in both columns
dose$dose <- trimws(dose$dose)
dose$dose_unit <- trimws(dose$dose_unit)



non_numeric_dose3 <- dose[!grepl("^\\d+(\\.\\d+)?$", dose$dose), ]

# View the result
print(non_numeric_dose3)
print(nrow(non_numeric_dose3))





#3) # Regex to match units with optional whitespace
#####
unit_pattern <- "\\b(mg|ml| ml|tbs|tbsp|tsp|g|mcg|gm|tube|drop|drops|spray|sprays|pump|pumps)\\b\\s*"

# Identify rows where `dose` is not purely numeric and doesn't contain a comma
no_comma_non_numeric <- grepl("^[^,]*$", dose$dose) & !grepl("^\\d+(\\.\\d+)?$", dose$dose)

# Extract matches using the unit pattern
matches <- regmatches(
  dose$dose[no_comma_non_numeric],
  regexpr(unit_pattern, dose$dose[no_comma_non_numeric], ignore.case = TRUE)
)

# Ensure `matches` has the same length as `no_comma_non_numeric`
matches_full <- rep(NA, nrow(dose)) # Create a vector of NAs the same length as `dose`
matches_full[no_comma_non_numeric] <- matches

# Update `dose_unit` for matched rows
dose$dose_unit[no_comma_non_numeric] <- ifelse(
  is.na(dose$dose_unit[no_comma_non_numeric]) | dose$dose_unit[no_comma_non_numeric] == "other specify",
  matches_full[no_comma_non_numeric],
  dose$dose_unit[no_comma_non_numeric]
)

# Replace the numeric part in `dose` for rows with matches
dose$dose[no_comma_non_numeric] <- ifelse(
  matches_full[no_comma_non_numeric] != "",
  trimws(sub(unit_pattern, "", dose$dose[no_comma_non_numeric], ignore.case = TRUE)),
  dose$dose[no_comma_non_numeric]
)



non_numeric_dose4 <- dose[!grepl("^\\d+(\\.\\d+)?$", dose$dose), ]

# View the result
print(non_numeric_dose4)
print(nrow(non_numeric_dose4))





#4) for dose where it is num tablet/pill/capsule string then remove the string from the num and put that in the dose_unit column
dose <- dose %>%
  mutate(
    dose = ifelse(dose == "1 tablet/pill/capsule", 1, dose),
    dose_unit = ifelse(dose == "1 tablet/pill/capsule", "tablet/pill/capsule", dose_unit)
  )
  


non_numeric_dose5<- dose[!grepl("^\\d+(\\.\\d+)?$", dose$dose), ]

# View the result
print(non_numeric_dose5)
print(nrow(non_numeric_dose5))




# futher tweaks sprays -> spray, drops -> drop, tbs -> tbsp

dose <- dose %>%
  mutate(
    dose = as.character(dose),  # Convert to character if it's not already
    
    # Update dose_unit column based on the presence of specific units
    dose_unit = case_when(
      grepl("\\bsprays\\b", dose, ignore.case = TRUE) ~ "spray",
      grepl("\\bdrops\\b", dose, ignore.case = TRUE) ~ "drop",
      grepl("\\btbs\\b", dose, ignore.case = TRUE) ~ "tbsp",
      TRUE ~ dose_unit  # Keep the original value if no match is found
    ),
    
    # Remove unit words from the dose column
    dose = gsub("\\bsprays\\b", "", dose),
    dose = gsub("\\bdrops\\b", "", dose),
    dose = gsub("\\btbs\\b", "", dose)
  )

dose <-dose %>%
  mutate(
    dose_unit = ifelse(dose_unit == "sprays", "spray", dose_unit)
  )

dose <-dose %>%
  mutate(
    dose_unit = ifelse(dose_unit == "pumps", "pump", dose_unit)
  )
dose <-dose %>%
  mutate(
    dose_unit = ifelse(dose_unit == "tbs", "tbsp", dose_unit)
  )
dose <-dose %>%
  mutate(
    dose_unit = ifelse(dose_unit == "drops", "drop", dose_unit)
  )
#rerun again 1)
dash_pattern <- grepl("^\\d+(\\.\\d+)?\\s*-\\s*\\d+(\\.\\d+)?$", dose$dose)

# Calculate the average for rows matching the pattern
dose$dose[dash_pattern] <- sapply(dose$dose[dash_pattern], function(x) {
  # Split the string by '-'
  nums <- as.numeric(unlist(strsplit(x, "-")))
  # Return the average
  mean(nums)
})


###5) deal with rows where there is a dose in dose unit just in unusable format eg. 1.5 tablet/capsule/pill-136 which is 1.5 x 136mg tablet
# Example input data

# Regex to match the pattern NUM STRING NUM with a dash (e.g., 1.5 tablets/pills/capsules - 136)
unit_pattern <- "(\\d+(\\.\\d+)?)\\s+[a-zA-Z/]+\\s*-\\s*(\\d+(\\.\\d+)?)"

# Identify rows matching the pattern NUM STRING NUM with a dash
matches <- grep(unit_pattern, dose$dose, value = TRUE)

# Extract numbers, multiply, and replace in `dose` column
dose$dose[grep(unit_pattern, dose$dose)] <- sapply(
  dose$dose[grep(unit_pattern, dose$dose)],
  function(x) {
    # Extract numbers using regex
    nums <- regmatches(x, regexec(unit_pattern, x))
    
    # Get the first and second number (convert to numeric)
    num1 <- as.numeric(nums[[1]][2])  # First number
    num2 <- as.numeric(nums[[1]][4])  # Second number
    
    # Perform multiplication
    result <- num1 * num2
    
    # Replace original value with result
    return(as.character(result))
  }
)

# Output the updated data frame
print(dose)


##strip the weight bit of string from based on weight rows

# Define the pattern for "based on weight (...)"
pattern <- "based on weight \\((>?<?\\d+(?:[+-]\\d+)?|\\d+[+-])[ ]?lbs\\)"

# Process the data in dose column
dose <- dose %>%
  mutate(
    # Extract the weight part into the new column
    based_on_weight_weight = ifelse(
      grepl(pattern, dose),
      sub(pattern, "\\1", dose),
      NA
    ),
    # Replace the matching part with "based on weight"
    dose = ifelse(
      grepl(pattern, dose),
      sub(pattern, "based on weight", dose),
      dose
    )
  
  )


# Enhanced regex to capture weights with +, -, <, >, and optional spaces

#pattern <- "based on weight \\((?:[<>]?\\d+(?:\\.\\d+)?(?:[+-]\\d+(?:\\.\\d+)?)?|\\d+(?:\\.\\d+)?[+-]?)\\s?lbs\\)"

# Define the pattern for extracting the weight from the dose_unit column
pattern <- "based on weight \\(([^)]+)\\s?lbs\\)"

dose <- dose %>%
  mutate(
    # Extract the weight part into the new column based_on_weight_weight from dose_unit
    based_on_weight_weight = ifelse(
      grepl(pattern, dose_unit), 
      sub(pattern, "\\1", dose_unit),  # Extract weight inside the parentheses
      NA
    ),
    # Replace the matching part with "based on weight" in dose_unit (without the weight)
    dose_unit = ifelse(
      grepl(pattern, dose_unit), 
      sub(pattern, "based on weight", dose_unit),  # Remove weight part, leave only "based on weight"
      dose_unit
    )
  )
dose <- dose %>%
  mutate(
    # Extract the weight part into the new column based_on_weight_weight from dose
    based_on_weight_weight = ifelse(
      grepl(pattern, dose), 
      sub(pattern, "\\1", dose),  # Extract weight inside the parentheses
      based_on_weight_weight  # Keep existing value if already populated
    ),
    # Replace the matching part with "based on weight" in dose (without the weight)
    dose = ifelse(
      grepl(pattern, dose), 
      sub(pattern, "based on weight", dose),  # Remove weight part, leave only "based on weight"
      dose
    )
  )


####take number from dose_unit variables eg. 0.5 tablet pill capsule and put into dose column and leave as tablet/pill/capsule
# Define the regex pattern to match "NUM STRING"
pattern <- "^\\s*(\\d+(\\.\\d+)?)(\\s+.+)$"

# Process the data
dose <- dose %>%
  mutate(
    # Extract NUM into the dose column if the pattern matches
    dose = ifelse(
      grepl(pattern, dose_unit),
      paste0(ifelse(is.na(dose), "", " "), sub(pattern, "\\1", dose_unit)),
      dose
    ),
    # Remove NUM from dose_unit if the pattern matches
    dose_unit = ifelse(
      grepl(pattern, dose_unit),
      sub(pattern, "\\3", dose_unit),
      dose_unit
    )
  )

# Trim whitespace in both columns
dose <- dose %>%
  mutate(
    dose = trimws(dose),
    dose_unit = trimws(dose_unit)
  )





non_numeric_dose6<- dose[!grepl("^\\d+(\\.\\d+)?$", dose$dose), ]



#unfixable doses in non_numeric dose
non_numeric_dose6 <- non_numeric_dose6 %>%
  filter(!dose%in%c("unspecified","varies"))
print(nrow(non_numeric_dose6))


#remove any white space
dose$dose <- sub("^\\s+|\\s+$", "", dose$dose)
dose$dose_unit <- sub("^\\s+|\\s+$", "", dose$dose_unit)






# Define the list of strings to move
remove_unit <- c(
  "tablet/pill/capsule", "tablets/pills/capsules", "inch strip", 
  "pack/package", "iu", "bottles/vials", "bottle/vial", "scoops", 
  "cups", "cup", "pellet", "wipe/pad", "collar"
)

# Create a regex pattern from the list
remove_unit_pattern <- paste0("\\b(", paste(remove_unit, collapse = "|"), ")\\b")

# Process the data
dose <- dose %>%
  mutate(
    # Identify rows where dose matches NUM STRING with STRING in remove_unit
    dose_unit = ifelse(
      grepl(remove_unit_pattern, dose),
      sub("^\\s*\\d+(\\.\\d+)?\\s*", "", dose),  # Extract the STRING part
      dose_unit
    ),
    dose = ifelse(
      grepl(remove_unit_pattern, dose),
      sub(remove_unit_pattern, "", dose),  # Keep only the NUM part
      dose
    )
  )




```

Need to tidy whitespace issue in dose_unit column:

```{r}
###need to tidy dose_unit as issue with white space eg "ml" and "ml " 
dose_unit_count3 <- dose %>%
  count(dose_unit, name="Count") %>%
  arrange(desc(Count))

dose_unit_count3
```

-   Approx 8000 rows are not able to be tidied with code above.

-   Of these, some could be tidied further just not sure how to yet and some cannot be worked with:

-   \~4000 are parasite tx and the dose is written in format 'based on weight(weight in brackets)

    -   could consider instead of any dosage calcs just \# of times prescribed flea/wormer tx rather than the dose of various active ingredients

\~2.5k look unusable (see, unfixable below)

```{r}
#unfixable doses in non_numeric dose
unfixable<- non_numeric_dose6 %>%
  filter(dose%in%c("unspecified","varies","","moderate amount","small amount","as directed","powder"))
print(nrow(unfixable))


#parasite tx that might be fixable
parasite <- non_numeric_dose6 %>%
  dplyr::filter(grepl("based on", dose, ignore.case = TRUE))
print(nrow(parasite))

```

Replace rows of tidied, number-ified data back into main df:

```{r}
medications_2$dose <- dose$dose
medications_2$dose_unit <- dose$dose_unit


```

Many are done mg/kg or say something based on dogs weight = add in dog weight column to dataset

```{r}
dog_pe <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/exam_physical.csv")

dog_pe2 <- dog_pe %>%
  dplyr::select(c(subject_id,year_in_study,weight,weight_units))
#convert lb columns into kg columns 
dog_pe2 <- dog_pe2 %>%
  mutate(
    weight = if_else(weight_units == "lb", weight * 0.453592, weight),
    weight_units = if_else(weight_units == "lb", "kg", weight_units)
  )


medications_3 <- medications_2 %>% left_join(
  dog_pe2, by=c("subject_id","year_in_study")
)
```

There is LOADS of nonsense weights her eg. 0.8kg to 361kg dogs

-   work out what I think is an outlier for weight later (tidy data and do the calculation functions first

```{r}
dog_pe2 %>%
  summarise(mean=mean(weight,na.rm = T),
            range=range(weight,na.rm = T),
            min=min(weight,na.rm = T),
            max=max(weight,na.rm = T)
            )


```

Ones to sort:

'based on weight'

```{r}
based_on_weight <- medications_3 %>%
  filter(grepl('based on weight', dose_unit_specify))

```

'tablet/pill/capsule'

```{r}
tablet_pill_capsule <- medications_3 %>%
  filter(grepl('tablet/pill/capsule', dose_unit_specify))
```

Majority all are parasite tx OR glucosamine supplement:

```{r}
table(tablet_pill_capsule$medication_ingredients)
```

```{r}
table(tablet_pill_capsule$active_ingredient_groups)
```

-   mostly not interested in supplements dosage (if desired could do a YN supplement variable later?)

#### Medication frequency:

```{r}
freq_unit_count <- medications_3%>%
  count(frequency, name="Count") %>%
  arrange(desc(Count))

freq_unit_count
```

```{r}
freq_unit_specify_count <- medications_3%>%
  count(frequency_specify, name="Count") %>%
  arrange(desc(Count))

freq_unit_specify_count
```

Most of the q(days) or q(days) specify have a specified number of days in specify_days or specify_hours = concatenate these columns and then replace q days with that value and then recode in dictionary below

```{r}



# Combine both conditions into the same column
medications_3$frequency_all <- ifelse(
  grepl("q \\(days\\)", medications_3$frequency),   # Check if Col1 contains "q (days)"
  paste(medications_3$frequency, medications_3$specify_days, sep = " "), # Concatenate frequency and specify_days
  ifelse(
    grepl("q \\(hours\\)", medications_3$frequency),   # Check if Col1 contains "q (hours)"
    paste(medications_3$frequency, medications_3$specify_hours, sep = " "), # Concatenate frequency and specify_hours
    medications_3$frequency                        # Keep frequency as is if no conditions are met
  )
)
```

Rerun counts

```{r}
freq_unit_count2 <- medications_3%>%
  count(frequency_all, name="Count") %>%
  arrange(desc(Count))

freq_unit_count2
```

Create frequency dictionary lists:

if we assume SID or daily =1 then the rest are either \<1 values eg. EOD = 0.5 or \>1 values e.g QID = 4

```{r}

dosing_frequency <- list(
  "0.003"="yearly",
  "0.004"=c("8 months","7 to 8 months","9 months"),
  "0.006"=c("6 months","2 times yearly","6 to 8 months","6 to 7 months","q (days) 180"),
  "0.007"=c("5 months","5 months if bathing or swiming or every 8 months"),
  "0.008"=c("3 to 5 months","q (days) 120"),
  "0.01"=c("3 months","3 to 4 months","4 months","2 to 4 months","120 days","3 to 6 months","q (days) 90","q (days) 84","q (days) 96","q (days), specify 90"),
  "0.15"=c("2 to 3 months","8 to 10 weeks"),
  "0.02"=c("2 months","6 weeks","6 to 8 weeks","1 to 3 months","42 days","45 days","q (days) 60","q (days) 45","q (days) 42","q (days) 56","q (days) 40","q (days), specify 45","q (days) 55"),
  "0.03" =c("q (days)30","q (days) 30","q (days), specify 30","q (days)31","monthly", "monthly (seasonal)","monthly","1 to 2 months", "1 month","30","q (days) 28","3 days every 3 months","35 days","4 to 5 weeks","sid for 2 days every 2 to 3 months","sid for 3 days every 3 months","q (days) 21","q (days), specify 28","q (days) 31","q (days) 35","q (days) 32","q (days) 39","q (days), specify 31"),
  "0.08"=c("3 weeks","3 weeks to 1 month","3 to 10 weeks","3 to 5 weeks","q (days), specify 21","q (days) 24"),
  "0.07"=c("2 weeks","2 weeks to 1 month","2 to 3 weeks","q (days) 14","q (days) 15","q (days), specify 18"),
  "0.10"=c("1 to 2 weeks","10 days","q (days), specify 14","q (days) 10","q (days), specify 10","q (days) 12"),
  "0.12"="biweekly to weekly",
  "0.14"=c("q (days)7","weekly","weekly for 2 weeks","weekly or after bathing/swimming","q (days) 7","q (days), specify 7"),
  "0.20"=c("q (days) 5","q (days), specify 5"),
  "0.28"=c("biweekly","2 to 3 times weekly","biweekly for 1 month","3 days","3 to 4 days","q (days) 3","q (days) 4","q (days), specify 3","q (days), specify 4"),
  "0.33"=c("3 times weekly","4 times weekly"),
  "0.5" = c("eod","q (hours) 48","q (days) 2","q (days), specify 2"),
  "0.75"="q (hours) 30",
  "1" = c("once", "sid", "q (days), specify1","q (days), specify1","daily","sid for 3 days","q (hours) 24" ,"q (hours), specify 24","q (days) 1","q (days), specify 1"),
  "2" = c("bid","bid - 4 hours apart","q (hours) 12","q (hours), specify 12"),
  "2.4"=c("q (hours) 10"),
  "3" = c("tid","q (hours) 8","q (hours), specify 8"),
  "3.5"=c("qid to tid","q (hours) 7"),
  "4" = c("qid","q (hours) 6","q (hours), specify 6"),
  "6"=c("qqh","q (hours) 4"),
  "8"=c("2 to 3 hours","q (hours) 3","q (hours), specify 3"),
  "10"= "q (hours) 3.5",
  "12"=c("2 hours","q (hours) 2","q (hours), specify 2"),
  "24"=c("hourly","1.25 hours","q (hours) 1","q (hours) 1.5"),
  "55"="26 minutes",
  
  #for these tapering schedules can work out a dose still but likely requires manually doing for each
  "complex_tapering"=c("bid for 3 days, then sid for 3 days, then eod","bid for 5 days, then sid for 5 days, then eod","tid to bid","bid for 4 days, then sid for 4 days, then eod","bid for 1 week, then sid for 1 week, then eod","bid for 2 days, then sid for 2 days, then eod","bid for 2 days, then sid for 3 days, then eod","sid for 1 week, then stop for 3 weeks, then repeat","bid for 2 days, then sid for 5 days, then eod","weekly for 1 month, then monthly","1 dose, then 1 dose in 3 weeks, then 1 dose in 3 months","20 mg for 1 week, then 10 for 1 week, then eod","3 days, then repeat in 3 weeks","8 doses, then every 3 to 4 weeks","bid for 1 week, then sid for 3 weeks, then eod",
"bid for 1 week, then sid prn",
"bid for 1 week, then sid, then eod",
"bid for 1 weeks, then sid for 2 weeks","bid for 10 days, then sid for 5 days, then eod",
"bid for 15 days, then sid for 45 days",
"bid for 2 days, then sid for 2 days",
"bid for 2 to 4 days, then sid for 2 to 4 days, then eod",
"bid for 2 weeks, then sid for 2 weeks, then eod",
"bid for 3 days, then sid for 1 week",
"bid for 3 days, then sid for 6 days, then eod",
"bid for 3 doses, then skip a day, then sid",
"bid for 4 days, then sid for 2 days, then eod",
"bid for 5 days, then sid for 1 week, then eod",
"bid for 5 days, then sid for 10 days",
"bid for 5 days, then sid for 3 days, then eod",
"bid for 5 days, then sid for 5 days",
"bid for 5 days, then sid for 5 days,",
"bid for 5 days, then sid for 5 days, then eod for 5 days, then sid every 3 days",
"bid for 6 days, then sid for 3 days, then eod",
"bid for 8 days, then sid for 1 week, then eod",
"bid for 8 days, then sid for 5 days, then eod",
"bid for 9 days, then sid for 2 weeks, then eod",
"bid to sid for 5 to 6 days or weeks","biweekly for 1 month, then every 2 weeks for 2 months, then monthly","sid for 2 days, then bid, then repeat","sid for 2 to 3 days, then eod","sid for 3 days, then every 2 weeks"),
  "tapering"=c("bid to sid","bid for 1 week, then sid for 1 week","bid for 2 weeks, then sid","bid, then sid, then eod","sid for 5 days, then eod","bid for 1 week, then sid","bid for 3 days, then sid for 1 week, then eod","bid for 3 days, then sid for 5 days, then eod","bid for 1 month, then sid","bid for 3 days, then sid for 3 days","bid for 5 days, then sid","daily, then eod","sid for 1 week, then eod","sid for 2 days, then eod" ,"sid for 2 weeks, then eod","sid for 4 days, then eod","sid, then eod", "tid to sid","bid fo 5 days, then prn","bid for 1 day, then eod", "bid for 1 day, then sid for 10 days, then eod","bid for 1 day, then sid for 3 days, then eod","bid for 1 month, then sid for 1 week","bid for 1 week, then biweekly prn","bid for 1 week, then eod","bid for 1 wek, then sid","bid to sid, then eod",
"bid, then eod",
"bid, then sid",
"bid, then sid eod","biweekly for 2 weeks, then weekly","daily for 5 days, then stop for 5 days","qid for 2 days, then bid for 3 days","sid for 10 days, then eod","sid for 21 days, then bid","sid for 6 days, then eod","tid, then sid, then eod","weekly for 1 month, then biweekly","weekly for 2 weeks, then once in 1 month","weekly for 3 weeks, then monthly","weekly, then every 2 weeks"),
  "single_event"=c("3 doses","2 doses","qid to bid","sid to eod","bid for 2 weeks, then sid for 2 weeks","bid for 3 days, then sid","bid for 4 days, then sid for 4 days","sid to bid","bid for 10 days, then sid","bid for 4 days, then sid","sid for 2 weeks","biweekly until healed, then prn","sid for 1 week","sid for 1 week, then prn","sid for 3 weeks","tid for 1 week, then bid for 1 week","tid for 2 days, then bid for 5 days"),
  #ones we will not be able to calculate dose from at all
  "unspecified"=c("as directed","post-op","added to each fluid bag","chop protocol","with chemotherapy","seasonal","varied","when fed","when water is replaced"),
  "misc"= c("4 doses","12 doses","2 tablets/pills/capsules","4","6"),
  "dose_not_freq"=c("0.0024 mg/kg/hr","0.6 mg/kg/hr","1 mg/kg/hr","ml/hr")
)

```

Apply this list to the dataframe so that they are reclassified:

```{r}
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")



medications_4 <- map_frequency_to_df(medications_3, column_to_map = "frequency_all", mapping_list = dosing_frequency, new_column_name = "mapped_frequency")

```

```{r}
freq_unit_count3 <- medications_4%>%
  count(mapped_frequency, name="Count") %>%
  arrange(desc(Count))

freq_unit_count3
```

#### Medication duration:

types of duration

```{r}
duration_count <- medications_4%>%
  count(duration, name="Count") %>%
  arrange(desc(Count))

duration_count
```

duration unit:

```{r}
duration_unit_count <- medications_4%>%
  count(duration_unit, name="Count") %>%
  arrange(desc(Count))

duration_unit_count
```

Concatenate duration columns together so can form a correct duration column

```{r}
medications_4 <- medications_4 %>%
  mutate(duration_all =paste(medications_4$duration, medications_4$duration_unit, sep = " "))
```

```{r}
duration_unit_count2 <- medications_4%>%
  count(duration_all, name="Count") %>%
  arrange(desc(Count))

duration_unit_count2
```

Duration dictionary to recode:

```{r}
duration_dict <- list(
  "0.03" = "1 days",
  "0.06"="2 days",
  "0.09"="3 days",
  "0.17"="5 days",
  "0.2"="6 days",
  "0.23" = c("7 days", "1 week", "1 weeks"),
  "0.33" = c("10 days","9 days"),
  "0.4"=c("12 days","11 days"),
  "0.5" =c("2 weeks"),
  "0.7"="3 weeks",
  "1" = c("1 months", "1 month","4 weeks"),
  "1.5"=c("5 weeks"),
  "2"=c("2 months","8 weeks","7 weeks"),
  "2.5"=c("10 weeks","9 weeks"),
  "3"=c("3 months","12 weeks"),
  "4"="4 months",
  "5"="5 months",
  "7"="7 months",
  "8"="8 months",
  "9"="9 months",
  "10"="10 months",
  "12"="12 months",
  "continuous" =c("continuous unspecified","continuous months","continuous days","continuous not applicable","continuous weeks"),
  "unspecified"=c("as needed unspecified","unspecified unspecified","as needed days",
                  "as needed months","as needed weeks","as needed not applicable","1 not applicable","1 unspecified","unspecified days","2 not applicable","unspecified weeks","10 unspecified","7 unspecified","unspecified months","10 not applicable","3 not applicable",
                  "4 not applicable","7 not applicable","12 unspecified","4 unspecified","5 unspecified","6 not applicable","6 unspecified")
  
  
)
```

```{r}
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")



medications_5 <- map_frequency_to_df(medications_4, column_to_map = "duration_all", mapping_list = duration_dict, new_column_name = "mapped_duration")
```

#### Explore how many dogs we have got actual values to calculate drug doses for:

```{r}
#dogs with duration values that are not unspecified and not misc supplements
dogs_with_med_data <- medications_5 %>%
  dplyr::filter(!mapped_frequency %in% c("single event", "unspecified", "misc", "tapering", "complex tapering"))

missing_med_data <- medications_5 %>%
  dplyr::filter(mapped_frequency %in% c("single event", "unspecified", "misc", "tapering", "complex tapering"))
  #lost ~10k of records here
dogs_with_med_data2 <- dogs_with_med_data %>%
  #not using this row currently as can do something with continuous in drug calcs but not sure yet
 dplyr::filter(!mapped_duration %in% c("unspecified"))

  #dplyr::filter(!mapped_duration %in% c("continuous","unspecified"))




#lose ~18k records with these terms removed
print(nrow(dogs_with_med_data2)/nrow(dogs_with_med_data))
```

Left with a remaining \~18000 (out of \~50k = 36%) records to work with if we ignore the dogs with "continuous" as duration of medication

However, \~82% left if continuous is retained

Continuous is valid duration I just am not sure what to do with it for calculations

Sense check for how many of each class are left:

###### Antimicrobials:

```{r}
dogs_with_med_data_AB <- medications_5 %>%
  dplyr::filter(active_ingredient_groups =="anti_microbials")

dogs_with_med_data_AB2 <- dogs_with_med_data_AB %>%
  dplyr::filter(!mapped_frequency %in% c("single event", "unspecified", "misc", "tapering", "complex tapering"))
dogs_with_med_data2_AB <- dogs_with_med_data_AB2%>%
  #not using this row currently as can do something with continuous in drug calcs but not sure yet
dplyr::filter(!mapped_duration %in% c("unspecified"))

 # dplyr::filter(!mapped_duration %in% c("continuous","unspecified"))


print(nrow(dogs_with_med_data2_AB)/nrow(dogs_with_med_data_AB))
```

\~83% if ditch the "continuous" duration ones

\~86% of antimicrobials tidied so far

Where are rows being lost:

###### Anti-parasiticides:

```{r}
dogs_with_med_data_parasite <- medications_5 %>%
  dplyr::filter(active_ingredient_groups =="anti_parasites")

dogs_with_med_data_parasite2 <- dogs_with_med_data_parasite %>%
  dplyr::filter(!mapped_frequency %in% c("single event", "unspecified", "misc", "tapering", "complex tapering"))
dogs_with_med_data2_parasite <- dogs_with_med_data_parasite2%>%
  #not using this row currently as can do something with continuous in drug calcs but not sure yet
   dplyr::filter(!mapped_duration %in% c("unspecified"))

 # dplyr::filter(!mapped_duration %in% c("continuous","unspecified"))


print(nrow(dogs_with_med_data2_parasite)/nrow(dogs_with_med_data_parasite))
```

\~7% if "continuous" duration is removed, this probably is not valid to remove as lots of these parasite txs will be continuous over life

\~50% if retain continuous dose rows

Where are rows being lost

-   unspecified admin

###### Immunologicals:

```{r}
dogs_with_med_data_immuno <- medications_5 %>%
  dplyr::filter(active_ingredient_groups =="immunologicals")

dogs_with_med_data_immuno2 <- dogs_with_med_data_immuno%>%
  dplyr::filter(!mapped_frequency %in% c("single event", "unspecified", "misc", "tapering", "complex tapering"))
dogs_with_med_data2_immuno<- dogs_with_med_data_immuno2%>%
  #not using this row currently as can do something with continuous in drug calcs but not sure yet
   dplyr::filter(!mapped_duration %in% c("unspecified"))

  #dplyr::filter(!mapped_duration %in% c("continuous","unspecified"))


print(nrow(dogs_with_med_data2_immuno)/nrow(dogs_with_med_data_immuno))
```

\~24%

\~50% if keep dogs with "continuous" duration

Where are rows being lost:

###### Anti-inflam:

```{r}
dogs_with_med_data_inflam <- medications_5 %>%
  dplyr::filter(active_ingredient_groups =="anti_inflam")

dogs_with_med_data_inflam2 <- dogs_with_med_data_inflam%>%
  dplyr::filter(!mapped_frequency %in% c("single event", "unspecified", "misc", "tapering", "complex tapering"))
dogs_with_med_data2_inflam<- dogs_with_med_data_inflam2%>%
  #not using this row currently as can do something with continuous in drug calcs but not sure yet
    dplyr::filter(!mapped_duration %in% c("unspecified"))

  #dplyr::filter(!mapped_duration %in% c("continuous","unspecified"))


print(nrow(dogs_with_med_data2_inflam)/nrow(dogs_with_med_data_inflam))

```

\~46% if continuous duration excluded

\~60% if continuous duration retained

Where are rows being lost:

##### Determine number of records with complete rows across dose, dose unit, duration and frequency

This is an approximation

```{r}
# remove dogs missing a usable dose
medications_complete <- medications_5 %>%
  filter(!dose%in%c("unspecified","varies","","moderate amount","small amount","as directed","powder","as directed"))

#write all rows as a csv
write.csv(medications_5,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/GRLS_medications_initial_tidy.csv" )
#dose units that are definitely not usable dogs
medications_complete <-medications_complete %>%
  filter(!dose_unit %in% c("unspecified","as directed","as needed","monthly","liquid","tapering dose","daily","injection"))

#frequency units that are defintely not usable
medications_complete <-medications_complete %>%
  filter(!mapped_frequency %in% c("unspecified"))
#duration units that are definitely not usable
medications_complete <- medications_complete %>%
  filter(!mapped_duration %in% c("unspecified"))



```

### Medications length of time/number of times prescribed:

Non use vs intermediate use vs long term use.

There is a few papers defining this usage:

"We classiﬁed use as non-use (0–1 prescription), in- termediate use (2–7 prescriptions), and long-term use (≥8 prescrip- tions). Eight prescriptions was chosen as a cut-off as drugs for chronic treatment are typically supplied for 3 months use for each dispensing in Denmark, whereby our deﬁnition oflong-termusewould correspond to two years' cumulative treatment." - Pottegard et al., 2016

-   exclude drug usage for the year prior to diagnosis (recognised that increased prescribing in year prior to diagnosis possibly due to cancer diagnosing issues PLUS likely wont be involved in cancer diagnosis

```{r}



```

## Medications dosage calculations

Want to determine:

Exposure to various different medications ever (likely broad classes eg. ABs, anthelminitics, flea tx, NSAID etc.)

Exposure to various different medications in past X years

Dosage administered of a drug over lifetime/x time

Specify column is very messy - a further 176 things - wait and see if tidied version is better

Medications need to change frequency unit to a numeric value eg. SID = 1, BID = 2, EOD = 0.5 #q (days) has frequency in the specify_days column eg. q(days) 30 = once every 30d so will change to 0.03 in variable mapping NB. PRN = as needed

```{r,eval=F}
#concatenate frequency and specify days columns
medications2 <- medications_5 %>%
  mutate(specify_days=as.character(specify_days))%>%
   unite(frequency_specify_days, frequency, specify_days,sep = "",remove=FALSE)%>%
  mutate(frequency_specify_days=sub("NA*$", "", as.character(frequency_specify_days)))

#redo table
freq_spec_day_table <- table(medications2$frequency_specify_days)
freq_spec_day_table

# Creating a dictionary for the values in freq_spec_day_table so that can use these in calculations
#add to this once clean data seen
dosing_frequency <- list(
  "0.03" =c("q (days)30","q (days)31"),
  "0.14"="q (days)7",
  "0.5" = "eod",
  "1" = c("once", "sid", "q (days), specify1","q (days), specify1"),
  "2" = "bid",
  "3" = "tid",
  "4" = "qid"
)


#mapping dictionary to our dataset
medications_mapped <- medications2 %>%
  mutate(mapped_values = ifelse(frequency_specify_days %in% unlist(dosing_frequency), 
                                as.character(sapply(frequency_specify_days, function(val) {
                                  for (key in names(dosing_frequency)) {
                                    if (val %in% dosing_frequency[[key]]) {
                                      return(key)
                                    }
                                  }
                                  return(NA)
                                })),
                                NA))

# Display the updated dataframe
print(medications_mapped[, c("frequency_specify_days", "mapped_values")])


#write this to csv 
write.csv(medications_mapped,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/GRLS_medications_initial_tidy.csv")




#medications need to change duration unit to a numeric value eg. weeks to 7 (ie. 7 days)
#convert mapped_values column  and dose andd duration to numeric

medications_calcs <- medications_mapped %>%
  mutate(across(c(dose, duration, mapped_values), as.numeric)) %>%
  rowwise() %>%
  mutate(total_dosage = prod(c(dose, duration, mapped_values), na.rm = TRUE))

medications_mapped <- medications_mapped %>%
  mutate(as.numeric(mapped_values))
#function for this

#medications_calc <- total_dose(medications_mapped, "dose","duration","duration_mapped_values")


#write this to csv 
write.csv(medications_mapped,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/GRLS_medications_initial_tidy.csv")
```

## Vaccinations

Want to determine:

A number of vaccines in lifetime ('dosage')

Received early years vaccines YN

Vaccination within past X years

What were they vaccinated with in past X years

NB. new row for every vaccine (multiple rows for same study year) for each subject id

```{r}
vaccinations <-read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/vaccines.csv")

#remove rows with any_vaccine = 0 as no vaccine recorded that year of questionaire
vacc <- vaccinations %>%
  dplyr::filter(any_vaccine==1)

unique_type <- unique(vacc$type)

print(unique_type)
#36 vaccine types recorded = quite easy to tidy?
```

How many times vaccines administered over life?

-   this doesnt quite work as data is seperated out currently so that core DAPPi is one row, lepto 1 row, CI is one row all with same admin date

```{r}
vacc <- vacc %>%
  group_by(subject_id) %>%
  mutate(num_sep_vaccines_lifetime = n())
```

How many times vaccines administered over life?

```{r}
vacc <- vacc %>%
  group_by(subject_id)%>%
  mutate(num_distinct_vaccination_events_lifetime=n_distinct(record_date))

```

How many agents administered over life?

```{r}
vacc <- vacc %>%
  group_by(subject_id)%>%
  mutate(num_distinct_vaccine_agents_lifetime=n_distinct(type))


```

Did patient receive a vaccine in initial study year ? (safe to assume this is primary course? - i do not actually think so)

-   1= yes did receive, 0 = did not

```{r}
vacc <- vacc %>%
  group_by(subject_id) %>%
  mutate(vacc_in_year0 = ifelse(any(year_in_study == 0), 1, 0))
```

Split the 36 vaccine types into groupings

-   YN for each infectious agent split by commas in the unique_type

-   core vs non-core vaccines? - https://www.aaha.org/resources/2022-aaha-canine-vaccination-guidelines/recommendations-for-core-and-noncore-canine-vaccines/

<<<<<<< Updated upstream
=======
<<<<<<< Updated upstream
=======
```{r}

```
>>>>>>> Stashed changes

```{r}
core_only <- c("canine distemper, adenovirus type 2, parainfluenza, parvovirus","rabies (3 year)", "leptospirosis 4 (canicola, grippotyphosa, icterohaemorrhagiae, pomona)","rabies (1 year)","canine distemper, adenovirus type 2", "canine distemper, adenovirus type 2, parvovirus","canine distemper"  ,"canine coronavirus, parvovirus","canine distemper, adenovirus type 2, coronavirus, parvovirus, leptospirosis 4 (canicola, grippotyphosa, icterohaemorrhagiae, pomona)" , "leptospirosis 2 (canicola, icterohaemorrhagiae)") 
          
non_core_only <- c("borrelia burgdorferi","canine influenza (unspecified)","bordetella bronchiseptica, parainfluenza","bordetella bronchiseptica","rattlesnake venin" ,"canine coronavirus","melanoma vaccine","canine giardia")

<<<<<<< Updated upstream
both_core_non_core <- c("adenovirus type 2, bordetella bronchiseptica, parainfluenza", "borrelia burgdorferi, leptospirosis 4 (canicola, grippotyphosa, icterohaemorrhagiae, pomona)",      "canine distemper, adenovirus type 2, coronavirus, parainfluenza, parvovirus, leptospirosis 4 (canicola, grippotyphosa, icterohaemorrhagiae, pomona)","canine distemper, adenovirus type 2, parainfluenza, parvovirus, leptospirosis 4 (canicola, grippotyphosa, icterohaemorrhagiae, pomona)"  , "canine distemper, adenovirus type 2, parainfluenza, parvovirus, leptospirosis 2 (canicola, icterohaemorrhagiae)","canine distemper, adenovirus type 2, coronavirus, parainfluenza, parvovirus","canine parvovirus","canine distemper, adenovirus type 2, measles, parainfluenza","canine distemper, adenovirus type 2, coronavirus, parainfluenza, parvovirus, leptospirosis 2 (canicola, icterohaemorrhagiae)" ,,"canine distemper, adenovirus type 2, parvovirus, borrelia burgdorferi, leptospirosis 4 (canicola, grippotyphosa, icterohaemorrhagiae, pomona)" ,   "canine distemper, adenovirus type 2, coronavirus, parvovirus" ,"canine coronavirus, leptospirosis 4 (canicola, grippotyphosa, icterohaemorrhagiae, pomona)","canine coronavirus, borrelia burgdorferi, leptospirosis 4 (canicola, grippotyphosa, icterohaemorrhagiae, pomona)" ,"canine distemper, adenovirus type 2, coronavirus, parvovirus, borrelia burgdorferi, leptospirosis 4 (canicola, grippotyphosa, icterohaemorrhagiae, pomona)"

```


=======
both_core_non_core <- c("adenovirus type 2, bordetella bronchiseptica, parainfluenza", "borrelia burgdorferi, leptospirosis 4 (canicola, grippotyphosa, icterohaemorrhagiae, pomona)",      "canine distemper, adenovirus type 2, coronavirus, parainfluenza, parvovirus, leptospirosis 4 (canicola, grippotyphosa, icterohaemorrhagiae, pomona)","canine distemper, adenovirus type 2, parainfluenza, parvovirus, leptospirosis 4 (canicola, grippotyphosa, icterohaemorrhagiae, pomona)"  , "canine distemper, adenovirus type 2, parainfluenza, parvovirus, leptospirosis 2 (canicola, icterohaemorrhagiae)","canine distemper, adenovirus type 2, coronavirus, parainfluenza, parvovirus","canine parvovirus","canine distemper, adenovirus type 2, measles, parainfluenza","canine distemper, adenovirus type 2, coronavirus, parainfluenza, parvovirus, leptospirosis 2 (canicola, icterohaemorrhagiae)" ,,"canine distemper, adenovirus type 2, parvovirus, borrelia burgdorferi, leptospirosis 4 (canicola, grippotyphosa, icterohaemorrhagiae, pomona)" ,   "canine distemper, adenovirus type 2, coronavirus, parvovirus" ,"canine coronavirus, leptospirosis 4 (canicola, grippotyphosa, icterohaemorrhagiae, pomona)","canine coronavirus, borrelia burgdorferi, leptospirosis 4 (canicola, grippotyphosa, icterohaemorrhagiae, pomona)" ,"canine distemper, adenovirus type 2, coronavirus, parvovirus, borrelia burgdorferi, leptospirosis 4 (canicola, grippotyphosa, icterohaemorrhagiae, pomona)" )

```

>>>>>>> Stashed changes
>>>>>>> Stashed changes
## Flea-worming Tx

```{r}
flea_tick_heartworm <-read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/flea_tick_heartworm.csv")
```

## OTC medications - ignore for now
