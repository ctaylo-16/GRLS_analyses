---
title: "GRLS medications"
author: "Collette Taylor"
format: html
editor: visual
---

Files and packages to import

```{r}
library(tidyverse)
library(ggplot2)
library(lubridate)

medications <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/medications.csv",na.strings=c ("","NA"))
vaccinations <-read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/vaccines.csv",na.strings=c ("","NA"))
#ensure all lower case
medications <- medications %>% mutate(across(where(is.character), tolower))
vaccinations <- vaccinations %>% mutate(across(where(is.character), tolower))


# use the end_points dataset for now 
end_points_neoplasia <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/study_endpoints.csv")
end_points_neoplasia <- end_points_neoplasia %>% 
  mutate(across(where(is.character), tolower))
end_HSA <- end_points_neoplasia %>% filter(grepl('hema',tracked_condition),ignore.case=TRUE)


#get neoplasia diagnosis year month column into date format
end_HSA$diagnosis_year_month_date <- as.POSIXct(end_HSA$diagnosis_date,format = "%Y-%m-%d")
# create a year column in HSA file so can do calculations on year (no point being more precise as questionaire done annually and may not match diagnosis time)
end_HSA$diagnosis_year <- as.numeric(format(end_HSA$diagnosis_year_month_date,"%Y"))
# set to month level (not day of month) = all on 1st day of month
end_HSA$diagnosis_year_month_date2 <- as.POSIXct(floor_date(end_HSA$diagnosis_year_month_date,unit="month"))
#column with has cancer set as 1 for sense checking records
end_HSA <- end_HSA %>%
  mutate(has_HSA =1)


#296 dogs have HSA 
```

## Vaccinations

Want to determine:

A number of vaccines in lifetime ('dosage')

Vaccination within past X years

What were they vaccinated with in past X years

NB. new row for every vaccine (multiple rows for same study year) for each subject id

```{r}

```

## Medications

Want to determine:

Exposure to various different medications ever (likely broad classes eg. ABs, anthelminitics, flea tx, NSAID etc.)

Exposure to various different medications in past X years

Dosage administered of a drug over lifetime/x time

```{r}
#medications need to change frequency to a numeric value eg. TID to 3
#how many frequency versions are there
med_freq<- table(medications$frequency)
med_freq
med_freq_inc_specify <- table(c(medications$frequency, medications$frequency_specify))
med_freq_inc_specify


```

Specify column is very messy - a further 176 things - wait and see if tidied version is better

Medications need to change frequency unit to a numeric value eg. SID = 1, BID = 2, EOD = 0.5 #q (days) has frequency in the specify_days column eg. q(days) 30 = once every 30d so will change to 0.03 in variable mapping NB. PRN = as needed

```{r}
#concatenate frequency and specify days columns
medications2 <- medications %>%
  mutate(specify_days=as.character(specify_days))%>%
   unite(frequency_specify_days, frequency, specify_days,sep = "",remove=FALSE)%>%
  mutate(frequency_specify_days=sub("NA*$", "", as.character(frequency_specify_days)))

#redo table
freq_spec_day_table <- table(medications2$frequency_specify_days)
freq_spec_day_table

# Creating a dictionary for the values in freq_spec_day_table so that can use these in calculations
#add to this once clean data seen
dosing_frequency <- list(
  "0.03" =c("q (days)30","q (days)31"),
  "0.14"="q (days)7",
  "0.5" = "eod",
  "1" = c("once", "sid", "q (days), specify1","q (days), specify1"),
  "2" = "bid",
  "3" = "tid",
  "4" = "qid"
)


#mapping dictionary to our dataset
medications_mapped <- medications2 %>%
  mutate(mapped_values = ifelse(frequency_specify_days %in% unlist(dosing_frequency), 
                                as.character(sapply(frequency_specify_days, function(val) {
                                  for (key in names(dosing_frequency)) {
                                    if (val %in% dosing_frequency[[key]]) {
                                      return(key)
                                    }
                                  }
                                  return(NA)
                                })),
                                NA))

# Display the updated dataframe
print(medications_mapped[, c("frequency_specify_days", "mapped_values")])




#medications need to change duration unit to a numeric value eg. weeks to 7 (ie. 7 days)
#convert mapped_values column  and dose andd duration to numeric

medications_calcs <- medications_mapped %>%
  mutate(across(c(dose, duration, mapped_values), as.numeric)) %>%
  rowwise() %>%
  mutate(total_dosage = prod(c(dose, duration, mapped_values), na.rm = TRUE))

medications_mapped <- medications_mapped %>%
  mutate(as.numeric(mapped_values))
#function for this
medications_calc <- total_dose(medications_mapped, "dose","duration","mapped_values")

```
