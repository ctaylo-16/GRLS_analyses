---
title: "GRLS comorbidities"
format: html
editor: visual
---

## GRLS comorbidities dataset

Load packages and datasets

```{r}
library(ggplot2)
library(tidyverse)

#read in all csvs that start with the string "conditions_
folder_path <- "C:/Users/ctaylor18/GitHub/GRLS_analyses/Data"

# Get a list of all CSV files that start with "conditions_with"
csv_files <- list.files(path = folder_path, pattern = "^conditions_.*\\.csv$", full.names = TRUE)

for (file in csv_files) {
  # Extract the file name (without the path and extension) for the data frame name
  dataframe_name <- tools::file_path_sans_ext(basename(file))
  
  # Dynamically assign each file to a data frame with the extracted name
  assign(dataframe_name, read.csv(file))
}

#remove not relevant ones
rm(conditions_dictionary)


#combine the comorbidities datasets
comorbs_all <- cbind(conditions_cardio,conditions_dental,conditions_ear_nose_throat,conditions_endocrine,conditions_eye,conditions_gastrointestinal,conditions_hematologic,conditions_infectious,conditions_musculoskeletal)

#remove duplicate subjectid columns
comorbs_unique <- comorbs_all %>%
  dplyr::select(unique(names(.)))



# View the combined dataframe
head(comorbs_unique)
#endpoints to join up conditions dataset
endpoints <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/study_endpoints.csv")



```

## Look for potentially relevant comorbidities:

#### All comorbidities

```{r}
print(colnames(comorbs_unique))

comorbs_list <- colnames(comorbs_unique)


```

#### Potential chronic inflam conditions e.g diabetes, rheumatoid arthritis, IBD

```{r}
comorbs_to_find <-c("congestive_heart_failure",
  "cardiomyopathy",
  "hypertension",
  "heartworm_infection",
  "lower_airway_disease",
  "dental_tarter_calculus",
  "addisons_disease",
  "autoimmune_thyroiditis",
  "cushings_disease",
  "diabetes_insipidus",
  "diabetes_mellitus",
  "hyperadrenalestrogenism",
  "hypercalcemia",
  "hypothyroidism",
  "pancreatic_insufficiency",
  "keratoconjunctivitis_sicca",
  "pigmentary_uveitis",
  "uveitis",
  "chronic_colitis",
  "malabsorptive_disorder",
  "megaesophagus",
  "pancreatitis",
  "anaplasma",
  "babesia",
  "canine_herpesvirus",
  "coccidia",
  "cryptosporidium",
  "ear_mites",
  "ehrlichia",
  "eimeria",
  "fleas",
  "fungal_infection",
  "giardia",
  "granuloma",
  "hookworms",
  "influenza",
  "isospora",
  "leptospirosis",
  "lyme_disease",
  "other_ectoparasite",
  "parvovirus",
  "rocky_mountain_spotted_fever",
  "roundworms",
  "tapeworms",
  "ticks",
  "tracheobronchitis",
  "unspecified_gastrointestinal_parasite",
  "valley_fever",
  "whipworms",
  "immune_related_musculoskeletal_disorder",
  "osteoarthritis",
  "rheumatoid_arthritis",
  "laryngeal_paralysis",
  "meningitis",
  "meningoencephalitis",
  "myasthenia_gravis",
  "erythema_multiforme",
  "flea_allergy_dermatitis",
  "food_allergy_dermatitis",
  "r_o_atopy")



```

### Comorbidities ever in all years of study:

Looking in only all the columns in 'comorbs_to_find' columns, identify if there is record of these conditions and for \>1 year of records and if so record in new columns: "chronic_inflam_comorb_present" (YN), "number of chronic_inflam_comorbs_present" (count), "which comorbs_to_find present?" (each comorb name separated by comma) :

```{r}
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")

conditions_in_df_and_list <- intersect(colnames(comorbs_unique),comorbs_to_find)

comorbs_unique_2 <- comorbs_unique %>%
  #get rid of the to_date row for each dog
  filter(to_date !=1) %>%
  dplyr::select(-c(relationship_category,year_in_study,record_date,to_date))

comorbs_unique_2<- comorbs_unique_2%>%
# replacing NA values with 0 across comorbidity columns
  mutate_at(vars(3:196), ~replace_na(., 0))

# This method doesnt make sure condition has been there for >1 year of records, which I think should be for chronic inflam really


  

df_result <- comorbs_unique_2 %>%
  group_by(subject_id) %>%
  mutate(
    ## ANY chronic inflam present
    chronic_inflam_present = if_else(rowSums(across(all_of(conditions_in_df_and_list))) > 0, 1, 0),
    ### NUMBER OF chronic inflam conditions present
    number_comorbs_present = rowSums(across(all_of(conditions_in_df_and_list))) # 
  ) %>%
  ungroup()  



```

#### Chronic comorbdities diagnosed ever in all years of study

This bit of code to check that a condition has been recorded for \>1 year to be 'chronic' (ensures things like infectious agents are not just a one-off acute)

```{r}

df_result2 <- comorbs_unique_2 %>%
  group_by(subject_id) %>%
  mutate(
    #is there any chronic inflam condition present in at least 1 row for subject id
    chronic_inflam_present = if_else(
      rowSums(across(all_of(conditions_in_df_and_list))) > 0 & 
        rowSums(across(all_of(conditions_in_df_and_list), ~ sum(. == 1)) > 1), 
      1, 
      0
    ),
    #how many chronic inflam conditions
    number_comorbs_present = if_else(
      chronic_inflam_present == 1,
      rowSums(across(all_of(conditions_in_df_and_list))),
      0
    ),
    ,
    #what were the comorbidities
    comorbidities = if_else(
      chronic_inflam_present == 1,
      apply(across(all_of(conditions_in_df_and_list)), 1, function(x) paste(names(which(x == 1)), collapse = "_")),
      "")
  ) %>%
  ungroup()


```

### Comorbidities diagnosed before end point diagnosis/diagnoses:

```{r}
#keeping record_date for linking up to cancer diagnosis but remove to_date column
comorbs_unique_3 <- comorbs_unique %>%
  mutate_at(vars(5:200), ~replace_na(., 0)) %>%
  filter(to_date !=1) %>%
  dplyr::select(-c(relationship_category,to_date)) %>%
  rename(year_in_study_comorb = year_in_study)


#run all functions above onto this dataset
df_result3 <- comorbs_unique_3 %>%
  group_by(subject_id) %>%
  mutate(
    #is there any chronic inflam condition present in at least 1 row for subject id
    chronic_inflam_present = if_else(
      rowSums(across(all_of(conditions_in_df_and_list))) > 0 & 
        rowSums(across(all_of(conditions_in_df_and_list), ~ sum(. == 1)) > 1), 
      1, 
      0
    ),
    #how many chronic inflam conditions
    number_comorbs_present = if_else(
      chronic_inflam_present == 1,
      rowSums(across(all_of(conditions_in_df_and_list))),
      0
    ),
    ,
    #what were the comorbidities
    comorbidities = if_else(
      chronic_inflam_present == 1,
      apply(across(all_of(conditions_in_df_and_list)), 1, function(x) paste(names(which(x == 1)), collapse = "_")),
      "")
  ) %>%
  ungroup()


```

Classify all comorbs into groups based on were they diagnosed in final 5y of records

```{r}
##keep only the  rows for each dog of final 5y of records

#pre-existing medications group  in other GRLS work on comorbidities with terms in free text here added on
intestinal_parasitism <- c("giardia", "hookworms", "coccidia", "tapeworms", "whipworms", "roundworms", "eimeria", "isospora","cryptosporidium","eimeria","tapeworms")
tick_borne_parasitism <-c("lyme_disease", "anaplasma", "rocky_mountain_spotted_fever", "ticks", "ehrlichia", "lyme disease", "lyme diseases, oa?", "lyme/anaplasma", "lyme+", "anaplasma and lyme +", "positive anaplasma", "erlichia +", "erlichia","valley_fever","babesia","anaplasma","ehrlichia","lyme_disease")
other_parasitism <-c("fleas", "fungal_infection", "heartworm", "ear_mites","other_ectoparasite","heartworm_infection")
all_parasitism<-c("giardia", "hookworms", "coccidia", "tapeworms", "whipworms", "roundworms", "eimeria", "isospora","lyme_disease", "anaplasma", "rocky_mountain_spotted_fever", "ticks", "ehrlichia", "lyme disease", "lyme diseases, oa?", "lyme/anaplasma", "lyme+", "anaplasma and lyme +", "positive anaplasma", "erlichia +", "erlichia","fleas", "fungal_infection", "heartworm", "ear_mites","heartworm_infection","other_ectoparasite")
infectious <- c("leptospirosis","parvovirus","bacterial cystitis/recurrent uti", "chronic uti's/ bacterial cystitis", "cystitis", "uti", "frequent utis", "previous utis", "chronic urinary incontinence","history of valley fever", "mma- coccidioides")
orthopaedic <-c("osteoarthritis", "l ccl partial tear", "oa of stifle", "hip dysplasia", "right elbow dysplasia grade ii", "ccl rupture", "acl tear", "tendonitis/ arthritis", "arthritis- cervical neck spine", "lh partial ccl tear, lh iliopsoas injury", "chronic lameness- hx of car accident", "lameness","hypothyroidism, chronic lameness, obesity","overweight, arthritis","dvd, larpar", "seizures, oa","tail fracture", "broken leg, histiocytoma","osteochondritis_dissecans","intervertebral_disc_disease","lameness","musculoskeletal_pain","osteomyeltiis","cruciate_ligament_rupture","hip_dysplasia","elbow_dysplasia","crepitus_decreased_range_of_motion","bone_fractures","limber_tail_syndrome","panosteitis")
immune_mediated <- c("uveitis", "autoimmune_thyroiditis", "keratoconjunctivitis_sicca", "megaesophagus", "diabetes_mellitus", "cushings_disease", "hypothyroidism", "granuloma", "immune complex formation", "suspected cushings/ thyroid carcinoma","dvd, larpar","immune_related_musculoskeletal_disorder","rheumatoid_arthritis","diabetes_insipidus","hypothyroidism","pancreatic_insuficiency","addisons_disease","autoimmune_thyroiditis","cushings_disease","hyperadrenalestrogenism","hypercalcemia")
cardiovascular <- c("cardiomyopathy", "hypertension", "heart base tumor", "heart base mass", "mild degenerative valve disease", "degenerative mitral and tricuspid valve disease", "mitral valve disease", "pulmonary thrombosis", "portal vein thrombus","arrhythmia","atrial enlargement","cardiomegaly","cardiomyopathy","congestive_heart_failure","hypertension","murmur","lower_airway_disease","myocardial_dysfunction","pleural_effusion","pulmonic_stenosis","pneumothorax","pulmonic_stenosis","subaortic_stenosis","tachycardia","valvular_disease")
gastrointestinal <-c("chronic_colitis", "pancreatitis", "malabsorptive_disorder", "chronic pancreatitis", "cystic endometrial hyperplasia", "intermittent mixed bowel diarrhea", "intermittent diarrhea - bacterial", "gastric ulcers","mesenteric volvulus","fb","esophagitis","diarrhea","dietary_indiscretion","food_sensitivity","gastrointestinal_foreign_body","gastorintestinal_ulcer","intussusception","malabsorptive_disorder","megaesophagus")

inflammatory_other <- c("tracheobronchitis", "hypercalcaemia", "pigmentary_uveitis", "ear infections", "chronic pyoderma", "chronic pruritis", "chronic rhinitis/ nasal discharge", "allergy, obesity", "pruritis", "severe allergies", "atopy", "allergies, chronic otitis", "chronic hot spots, skin infections", "many pyodera/dermatitis events", "chronic otitis, allergic dermatitis", "dermatitis", "food allergy", "skin allergies", "chronic otitis, overweight", "atopic dermatitis, allergies", "seasonal allergies/pyoderma", "chronic otitis, chronic allergies", "dermatitis lip fold","anal sac infection","otitis_externa","otitis_media","aural_haematoma","aural_foreign_body","pharyngitis","rhinitis","hypercalcaemia","keratoconjunctivitis_sicca","hypercalcemia","influenza","parvovirus")


chronic_inflammatory <-c("congestive_heart_failure",
  "cardiomyopathy",
  "hypertension",
  "heartworm_infection",
  "lower_airway_disease",
  "dental_tarter_calculus",
  "addisons_disease",
  "autoimmune_thyroiditis",
  "cushings_disease",
  "diabetes_insipidus",
  "diabetes_mellitus",
  "hyperadrenalestrogenism",
  "hypercalcemia",
  "hypothyroidism",
  "pancreatic_insufficiency",
  "keratoconjunctivitis_sicca",
  "pigmentary_uveitis",
  "uveitis",
  "chronic_colitis",
  "malabsorptive_disorder",
  "megaesophagus",
  "pancreatitis",
  "anaplasma",
  "babesia",
  "canine_herpesvirus",
  "coccidia",
  "cryptosporidium",
  "ear_mites",
  "ehrlichia",
  "eimeria",
  "fleas",
  "fungal_infection",
  "giardia",
  "granuloma",
  "hookworms",
  "influenza",
  "isospora",
  "leptospirosis",
  "lyme_disease",
  "other_ectoparasite",
  "parvovirus",
  "rocky_mountain_spotted_fever",
  "roundworms",
  "tapeworms",
  "ticks",
  "tracheobronchitis",
  "unspecified_gastrointestinal_parasite",
  "valley_fever",
  "whipworms",
  "immune_related_musculoskeletal_disorder",
  "osteoarthritis",
  "rheumatoid_arthritis",
  "laryngeal_paralysis",
  "meningitis",
  "meningoencephalitis",
  "myasthenia_gravis",
  "erythema_multiforme",
  "flea_allergy_dermatitis",
  "food_allergy_dermatitis",
  "r_o_atopy")

df_result_restricted <- df_result3 %>%
  group_by(subject_id) %>%
  arrange(desc(year_in_study_comorb)) %>%  # Sort in descending order
  slice_head(n = 5) %>%  # Keep top 5 rows per patient
  ungroup() 

# Function to detect comorbidities for each subject_id based on index range
detect_comorbidity <- function(df, subject_id_col, index_range, comorbidity_groups) {
  # Extract actual column names within the index range
  valid_columns <- colnames(df)[index_range]

  df %>%
    group_by(!!sym(subject_id_col)) %>%  # Group by subject_id
    summarise(across(all_of(valid_columns), ~ any(. == 1), .names = "temp_{.col}"), .groups = "drop") %>%  # Check for 1s
    mutate(
      !!!map(comorbidity_groups, function(cols) {
        # Identify valid columns that exist in the dataset
        matched_cols <- intersect(paste0("temp_", cols), colnames(.))
        
        # Assign "Y" if any value in matched columns is 1, else "N"
        if (length(matched_cols) > 0) {
          ifelse(rowSums(dplyr::select(., all_of(matched_cols))) > 0, "Y", "N")
        } else {
          "N"  # If no matching columns exist, default to "N"
        }
      })
    ) %>%
    dplyr::select(-starts_with("temp_"))  # Remove temporary columns
}

# Define comorbidity groups (list of column names matching each category)
comorbidity_groups <- list(
  intestinal_parasitism = intestinal_parasitism,
  tick_borne_parasitism = tick_borne_parasitism,
  other_parasitism = other_parasitism,
  all_parasitism = all_parasitism,
  infectious = infectious,
  orthopaedic = orthopaedic,
  immune_mediated = immune_mediated,
  cardiovascular = cardiovascular,
  gastrointestinal = gastrointestinal,
  inflammatory_other = inflammatory_other,
  chronic_inflammatory = chronic_inflammatory
)

# Apply function to data
GRLS_data <- df_result_restricted %>%
  left_join(detect_comorbidity(df_result_restricted, "subject_id", 5:198, comorbidity_groups),
            by = "subject_id")


#keep only a single row for each patient
# Define the index range of comorbidity columns
comorbidity_index <- c(199:212)  # Keep subject_id out of this list

# Create a second dataframe with one row per subject_id, summarizing only the selected columns
GRLS_summary <- GRLS_data %>%
  group_by(subject_id) %>%
  summarise(
    subject_id = first(subject_id),  # Keep subject_id as is
    across(all_of(colnames(GRLS_data)[comorbidity_index]), ~ ifelse(any(. == "Y"), "Y", "N")),
    .groups = "drop"
  )
```

```{r}

#keeping less columns 
df_result4<- df_result3 %>%
  dplyr::select(c(subject_id,year_in_study_comorb,record_date,199:201))

#year first chronic inflam comorb present
df_result4 <- df_result4 %>%
  group_by(subject_id) %>%
  mutate(study_year_first_chronic_inflam =  if_else(
      any(chronic_inflam_present == 1),
      min(year_in_study_comorb[chronic_inflam_present == 1], na.rm = TRUE),
      as.numeric(NA)
    )
  ) %>%
  ungroup()

df_result4 <- df_result4 %>%
  group_by(subject_id) %>%
  mutate(study_year_latest_chronic_inflam =  if_else(
      any(chronic_inflam_present == 1),
      max(year_in_study_comorb[chronic_inflam_present == 1], na.rm = TRUE),
      as.numeric(NA)
    )
  ) %>%
  ungroup()
# what was the first chronic inflam comorb
df_result5 <- df_result4 %>%
  group_by(subject_id) %>%
  mutate(
    first_chronic_inflam_condition = if_else(
      chronic_inflam_present == 1 & year_in_study_comorb == study_year_first_chronic_inflam,
      comorbidities,
      NA_character_
    )
  ) %>%
  # Fill the first condition for all rows within each subject_id
  mutate(first_chronic_inflam_condition = first(na.omit(first_chronic_inflam_condition))) %>%
  ungroup()

#number of lifetime chronic inflam conditions
df_result6<-df_result5 %>%
  group_by(subject_id) %>%
  mutate(
    num_lifetime_chronic_inflam = n_distinct(comorbidities[chronic_inflam_present == 1])
  ) %>%
  ungroup()
#what were the chronic lifetime inflam conditions
df_result7 <- df_result6 %>%
  group_by(subject_id) %>%
  mutate(
    all_comorbidities_ever = paste(unique(comorbidities[chronic_inflam_present == 1]), collapse = "_")
  ) %>%
  ungroup()



```

Shortening this endpoints df to only keep specific rows for each dog

```{r}
end_df_result7 <- df_result7 
#%>%
 # filter(chronic_inflam_present ==1)
##keeping only certain columns to join to endpoints data
end_df_result7 <- end_df_result7 %>%
  dplyr::select(c(subject_id,chronic_inflam_present,study_year_first_chronic_inflam,first_chronic_inflam_condition,study_year_latest_chronic_inflam,num_lifetime_chronic_inflam,all_comorbidities_ever))

#keep only distinct rows
end_df_result7_distinct <- end_df_result7 %>%
  distinct(subject_id, .keep_all = TRUE)
```

Adding endpoints data to chronic inflam dogs

```{r}
endpoints_abr <- endpoints %>%
  dplyr::select(-c(public_id,location,phenotype,status, tier_of_confidence,is_cause_of_death,is_recurrence,is_adjudicated)) %>%
  rename(year_in_study_diagnosis=year_in_study)

#join to endpoints dogs 
endpoints_comorbs <- endpoints_abr %>%
  left_join(end_df_result7_distinct, by="subject_id")

#chronic_inflam column edit so those without chronic inflam is 0 not NA
endpoints_comorbs <- endpoints_comorbs %>%
   mutate(chronic_inflam_present = replace_na(chronic_inflam_present, 0))

#code to check if study year in diagnosis endpoint is > than comorbs study year and if so how many years
endpoints_comorbs_2 <- endpoints_comorbs%>%
  group_by(subject_id) %>%
  mutate(diagnosis_after_comorb = 
      if_else(year_in_study_diagnosis > study_year_first_chronic_inflam, 1, 0
    ),
    time_between_first_chronic_inflam_endpoint_diagnosis = if_else(
      diagnosis_after_comorb == 1,
      year_in_study_diagnosis - study_year_first_chronic_inflam,
      as.numeric(NA))
    )%>%
  ungroup()

#comorbidities present in the 5y prior to diagnosis?
#TRUE or FALSE
endpoints_comorbs_2 <- endpoints_comorbs_2 %>%
  group_by(subject_id) %>%
  mutate(comorb_within_5_years_diagnosis_TF = abs(study_year_latest_chronic_inflam - year_in_study_diagnosis) <= 5)

# number of years between comorbidities and diagnosis
endpoints_comorbs_2 <- endpoints_comorbs_2 %>%
  group_by(subject_id) %>%
   mutate(
    years_between_diagnosis_and_last_chronic_inflam = study_year_latest_chronic_inflam - year_in_study_diagnosis,
    years_between_diagnosis_and_last_chronic_inflam = ifelse(is.na(years_between_diagnosis_and_last_chronic_inflam), "no comorb present", as.character(years_between_diagnosis_and_last_chronic_inflam))
  )

```

Comorbidities groups added to endpoints data

```{r}
endpoints_comorbs_3 <- endpoints_comorbs_2 %>%
  left_join(GRLS_summary,by="subject_id")

```

Create csv of single row for endpoint dogs with (\~1900 rows):

-   did they have chronic inflam comorbidities present at all? how many? which?

-   were they present before endpoint diagnoses and if so how long before?

```{r}
write.csv(endpoints_comorbs_3,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/endpoint_comorbidities.csv")
```

Create csv of all dog records with (\~30k rows):

-   did they have chronic inflam comorbidities present at all? how many? which?

-   were they present before endpoint diagnoses and if so how long before? (NB. only 1800 dogs have end points so there will be lots of NA rows)

```{r}
write.csv(df_result7,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/all_records_comorbidities.csv")
```

### Incurable comorbidities checking if they occurred ever and recording as so

Certain diseases might only get a single recording e.g OA but is not a condition that goes away therefore a single mention means they have the disease

List of conditions:

```{r}
# create a second list of comorbs that only need a single record ==1 to count as having (ie. incurable conditions eg. hypot4)
comorbs_single_record <- c(
  "arrhythmia",
  "atrial_enlargement",
  "cardiomegaly",
  "cardiomyopathy",
  "congestive_heart_failure",
  "hypertension",
  "myocardial_dysfunction",
  "valvular_disease",
  "addisons_disease",
  "autoimmune_thyroiditis",
  "cushings_disease",
  "diabetes_insipidus",
  "diabetes_mellitus",
  "hyperadrenalestrogenism",
  "hypercalcemia",
  "hypothyroidism",
  "pancreatic_insufficiency",
  "cataracts",
  "glaucoma",
  "keratoconjunctivitis_sicca",
  "progressive_retinal_atrophy_or_degeneration",
  "pigmentary_uveitis",
  "chronic_colitis",
  "lymphangiectasia",
  "malabsorptive_disorder",
  "megaesophagus",
  "motility_disorder",
  "elbow_dysplasia",
  "hip_dysplasia",
  "intervertebral_disc_disease",
  "osteoarthritis",
  "rheumatoid_arthritis",
  "spondylosis"
)
```

Identify in records:

```{r}

comorbs_ever <- comorbs_unique %>%
  dplyr::select(-c(relationship_category,year_in_study,record_date,to_date))

comorbs_ever<- comorbs_ever%>%
# replacing NA values with 0 across comorbidity columns
  mutate_at(vars(3:196), ~replace_na(., 0))

#remove all the columns that are not in comorbs_single_record list or subject_id
comorbs_ever <- comorbs_ever %>%
  dplyr::select(subject_id, all_of(comorbs_single_record))

#
lifetime_comorbs_ever <- comorbs_ever %>%
  group_by(subject_id) %>%
  mutate(
    ## ANY lifetime comorb inflam present
    lifelong_comorb_present = if_else(rowSums(across(all_of(comorbs_single_record))) > 0, 1, 0),
    
    ### NUMBER OF chronic inflam conditions present
    number_lifelong_comorbs_present = rowSums(across(all_of(comorbs_single_record))),
    
    # what were the comorbidities
    lifelong_comorbidities = if_else(
      lifelong_comorb_present == 1,
      apply(across(all_of(comorbs_single_record)), 1, function(x) paste(names(which(x == 1)), collapse = "_")),
      NA_character_
    )
  ) %>%
  ungroup()

#keep count of comorbs and if present and then only a unique row for each patient
lifetime_comorbs_ever_abr <- lifetime_comorbs_ever %>%
  dplyr::select(c(subject_id,lifelong_comorb_present,number_lifelong_comorbs_present)) %>%
    distinct(subject_id, .keep_all = TRUE)
```

Grouping the lifelong_comorbidities column into type of condition e.g endocrine, ocular etc based on earlier lists

```{r}

valid_comorbidity_groups <- lapply(comorbidity_groups, function(cols) {
  intersect(cols, colnames(lifetime_comorbs_ever))  # Keep only columns that exist in df
})

# Remove empty comorbidity groups
valid_comorbidity_groups <- valid_comorbidity_groups[lengths(valid_comorbidity_groups) > 0]





# Compute 'lifetime' flags for each comorbidity category
df_lifetime <- lifetime_comorbs_ever %>%
  group_by(subject_id) %>%
  summarise(across(everything(), \(x) max(x, na.rm = TRUE))) %>%  # Collapse per patient (1 if present, 0 otherwise)
  mutate(!!!setNames(
    lapply(valid_comorbidity_groups, function(cols) {
      if (length(cols) > 0) {
        as.integer(rowSums(.[cols], na.rm = TRUE) > 0)  # Correctly sum across selected columns
      } else {
        rep(0, n())  # Handle cases where no valid columns exist
      }
    }),
    paste0("lifelong_", names(valid_comorbidity_groups))  # Create new column names
  )) %>%
  select(subject_id, starts_with("lifelong_"))  # Keep only new columns

# View output
print(df_lifetime)
```

Combine the lifetime_comorbs_ever_abr and df_lifetime so that we have counts and groupings of these comorbs:

```{r}
lifelong_data <- df_lifetime %>%
  left_join(lifetime_comorbs_ever_abr,by="subject_id")

lifelong_data <- lifelong_data %>%
  dplyr::select(-c(lifelong_comorb_present.y))
```

Add this into the final 5y records data

```{r}
GRLS_summary_lifelong<- lifelong_data %>%
  left_join(GRLS_summary,by="subject_id")

#add in _5y to the GRLS summary columns that are from 5y prior to final record
colnames(GRLS_summary_lifelong)[11:24] <- paste0(colnames(GRLS_summary_lifelong)[11:24], "_5y")

```

Write this into CSV

-   comorbidities reported in final 5y of records (anything with \>1 year of recorded)

-   comorbidities recorded at any point in dogs records that are incurable conditions and therefore may not have been recorded every year but are present

```{r}
write.csv(GRLS_summary_lifelong,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/GRLS_cohort_comorbidities_chronic_lifelong.csv")
```

Now incorporating in HSA status for cohort to calculate exposures relating to diagnosis/endpoint dates

```{r}
HSA_cohort <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/HSA_study_pop_with_final_date_with_final_study_record_year.csv")
#combine comorb records and cohort
#join to endpoints dogs 
HSA_comorbs <- HSA_cohort %>%
  left_join(end_df_result7_distinct, by="subject_id")

HSA_comorbs <- HSA_comorbs %>%
   mutate(chronic_inflam_present = replace_na(chronic_inflam_present, 0))
#determine whether chronic inflam were comorbidities present prior to final record year
HSA_comorbs2 <- HSA_comorbs %>%
  group_by(subject_id) %>%
  mutate(diagnosis_after_comorb = 
      if_else(year_in_study_diagnosis_or_final_record_year > study_year_first_chronic_inflam, 1, 0
    ),
    time_between_first_chronic_inflam_endpoint_diagnosis = if_else(
      diagnosis_after_comorb == 1,
      year_in_study_diagnosis_or_final_record_year - study_year_first_chronic_inflam,
      as.numeric(NA))
    )%>%
  ungroup()
#determine whether chronic inflam were comorbidities present <5y prior to final record year
HSA_comorbs2 <- HSA_comorbs2 %>%
  group_by(subject_id) %>%
  mutate(comorb_within_5_years_diagnosis_TF = abs(study_year_latest_chronic_inflam - year_in_study_diagnosis_or_final_record_year) <= 5)


HSA_comorbs2 <- HSA_comorbs2 %>%
  group_by(subject_id) %>%
  mutate(
    years_between_diagnosis_and_last_chronic_inflam = year_in_study_diagnosis_or_final_record_year - study_year_latest_chronic_inflam,
    # if negative value or NA, replace with appropriate message or value
    years_between_diagnosis_and_last_chronic_inflam = ifelse(is.na(years_between_diagnosis_and_last_chronic_inflam),
      "no comorb present", 
      ifelse(years_between_diagnosis_and_last_chronic_inflam < 0, "0", as.character(years_between_diagnosis_and_last_chronic_inflam)))
  )


##add in the groupings in GRLS summary
HSA_comorbs3 <- HSA_comorbs2 %>%
  left_join(GRLS_summary,by="subject_id")


```

Add the lifelong comorbs data to the HSA_comorbs data

```{r}
HSA_comorbs3_lifetime <- HSA_comorbs3 %>%
  left_join(lifelong_data , by="subject_id")
```

write HSA comorbidities to csv

```{r}
write.csv(HSA_comorbs3_lifetime,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/HSA_cohort_comorbidities.csv")
```
