pivot_wider(
names_from = medication_ingredients_100,  # Make drug groups into column names
values_from = lifetime_total_prescriptions,      # Fill columns with the counts
values_fill = 0                         # Replace NA with 0 for drug groups not prescribed
)
#combine endpoints and medications dataset, NB only the endpoints  ~1800 dogs retained rahter than the 3000
endpoints_medications <- medications %>%
inner_join(endpoints_profile, by = "subject_id")
#sense check same num unique IDs in data
unique_end <- unique(endpoints$subject_id)
unique_endmed <- unique(endpoints_medications$subject_id)
#delete pointless columns
endpoints_medications <- endpoints_medications %>%
dplyr::select(-c(X,public_id.x,public_id.y,status.x,status.y))
#make sure date columns in dateformat
endpoints_medications <- endpoints_medications %>%
mutate(
diagnosis_date2 = as.Date(diagnosis_date, format = "%Y-%m-%d"),  # yyyy-mm-dd
record_date2= as.Date(record_date, format = "%d/%m/%Y")         # dd-mm-yyyy
)
endpoints_medications$mapped_duration <- as.numeric(endpoints_medications$mapped_duration)
#trial to retain rows ?5y before diagnosis?
endpoints_medication_5y_filt <-  endpoints_medications %>%
mutate(
# Calculate the time difference in years between record_date and diagnosis_date
year_difference = as.numeric(difftime(record_date2, diagnosis_date2, units = "days")) / 365.25
) %>%
# Filter rows where the year difference is 5 years or less
filter(abs(year_difference) <= 5)
#trial to retain rows ?3y before diagnosis?
endpoints_medication_3y_filt <-  endpoints_medications %>%
mutate(
# Calculate the time difference in years between record_date and diagnosis_date
year_difference = as.numeric(difftime(record_date2, diagnosis_date2, units = "days")) / 365.25
) %>%
# Filter rows where the year difference is 5 years or less
filter(abs(year_difference) <= 3)
classify_drug_prescription_freq_duration_5y <- endpoints_medication_5y_filt %>%
group_by(subject_id, active_ingredient_groups) %>%
# Sum mapped_duration for each active_ingredient_group per subject_id
summarise(total_duration = sum(mapped_duration, na.rm = TRUE)) %>%
# Classify based on total_duration
mutate(
duration_category = case_when(
total_duration >= 24 ~ "chronic_use",   # 24 months or more
total_duration < 24 & total_duration >= 6 ~ "intermediate_use",  # 6 to less than 24 months
TRUE ~ "non_use"  # less than 6 months or no duration info
)
) %>%  # Count the number of prescriptions grouped by active_ingredient_groups and duration_category
count(active_ingredient_groups, duration_category, name = "prescription_count") %>%
# Spread the counts into separate columns for each duration category
pivot_wider(names_from = duration_category, values_from = prescription_count, values_fill = 0)
table(endpoints_medications$mapped_duration)
sum(is.na(endpoints_medications$mapped_duration))
missing_duration <-endpoints_medications %>%
filter(is.na(mapped_duration))
table(missing_duration$duration)
continuous <- endpoints_medications %>%
filter(duration=="continuous")
classify_drug_prescription_freq_events_5y <- endpoints_medication_5y_filt %>%
group_by(subject_id, active_ingredient_groups) %>%
summarise(total_prescriptions_5y = n(), .groups = "drop")
#now classify the counts
classify_drug_prescription_freq_events_5y <- classify_drug_prescription_freq_events_5y %>%
mutate(total_prescriptions_5y_cat = case_when(
total_prescriptions_5y >= 24 ~ "chronic_use",   # 24 months or more
total_prescriptions_5y< 24 & total_prescriptions_5y>= 6 ~ "intermediate_use",  # 6 to less than 24 months
TRUE ~ "non_use"  # less than 6 months or no info
)
)
# Pivot the table to wide format
classify_drug_prescription_freq_events_5y_wide <- classify_drug_prescription_freq_events_5y %>%
#remove the actual counts of useage from this table
dplyr::select(-total_prescriptions_5y)%>%
pivot_wider(
names_from = active_ingredient_groups,  # Make drug groups into column names
values_from = total_prescriptions_5y_cat,      # Fill columns with the counts
#for those with no use put down as non_use
values_fill = "non_use"                        # Replace NA with 0 for drug groups not prescribed
)
library(tidyverse)
library(lubridate)
medications <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/GRLS_medications_initial_tidy.csv")
endpoints<- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/study_endpoints.csv")
#death date file
dog_profile <-read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/dog_profile.csv")
#keep only date of death and subject id
dog_profile <- dog_profile %>%
dplyr::select(c(subject_id,death_date))
endpoints_profile <- endpoints %>%
left_join(dog_profile, by="subject_id")
number_of_prescriptions_drug_groups_whole_life <- medications %>%
group_by(subject_id, active_ingredient_groups) %>%  # Group by both dog and drug category
summarise(lifetime_total_prescriptions = n(), .groups = "drop")
# Pivot the table to wide format
number_of_prescriptions_drug_groups_whole_life_wide <- number_of_prescriptions_drug_groups_whole_life %>%
pivot_wider(
names_from = active_ingredient_groups,  # Make drug groups into column names
values_from = lifetime_total_prescriptions,      # Fill columns with the counts
values_fill = 0                         # Replace NA with 0 for drug groups not prescribed
)
number_of_prescriptions_ingredient_100_groups_whole_life <- medications %>%
group_by(subject_id, medication_ingredients_100) %>%  # Group by both dog and drug category
summarise(lifetime_total_prescriptions = n(), .groups = "drop")
# Pivot the table to wide format
number_of_prescriptions_ingredient_100_groups_whole_life_wide <- number_of_prescriptions_ingredient_100_groups_whole_life %>%
pivot_wider(
names_from = medication_ingredients_100,  # Make drug groups into column names
values_from = lifetime_total_prescriptions,      # Fill columns with the counts
values_fill = 0                         # Replace NA with 0 for drug groups not prescribed
)
#combine endpoints and medications dataset, NB only the endpoints  ~1800 dogs retained rahter than the 3000
endpoints_medications <- medications %>%
inner_join(endpoints_profile, by = "subject_id")
#sense check same num unique IDs in data
unique_end <- unique(endpoints$subject_id)
unique_endmed <- unique(endpoints_medications$subject_id)
#delete pointless columns
endpoints_medications <- endpoints_medications %>%
dplyr::select(-c(X,public_id.x,public_id.y,status.x,status.y))
endpoints_medications <- endpoints_medications %>%
mutate(
diagnosis_date2 = as.Date(diagnosis_date, format = "%Y-%m-%d"),  # yyyy-mm-dd
record_date2= as.Date(record_date, format = "%Y-%m-%d")         # dd-mm-yyyy
)
View(endpoints_medications)
#make sure date columns in dateformat
endpoints_medications <- endpoints_medications %>%
mutate(
diagnosis_date2 = as.Date(diagnosis_date, format = "%Y-%m-%d"),  # yyyy-mm-dd
record_date2= as.Date(record_date, format = "%Y-%m-%d")         # dd-mm-yyyy
)
endpoints_medications$mapped_duration <- as.numeric(endpoints_medications$mapped_duration)
#trial to retain rows ?5y before diagnosis?
endpoints_medication_5y_filt <-  endpoints_medications %>%
mutate(
# Calculate the time difference in years between record_date and diagnosis_date
year_difference = as.numeric(difftime(record_date2, diagnosis_date2, units = "days")) / 365.25
) %>%
# Filter rows where the year difference is 5 years or less
filter(abs(year_difference) <= 5)
#trial to retain rows ?3y before diagnosis?
endpoints_medication_3y_filt <-  endpoints_medications %>%
mutate(
# Calculate the time difference in years between record_date and diagnosis_date
year_difference = as.numeric(difftime(record_date2, diagnosis_date2, units = "days")) / 365.25
) %>%
# Filter rows where the year difference is 5 years or less
filter(abs(year_difference) <= 3)
classify_drug_prescription_freq_duration_5y <- endpoints_medication_5y_filt %>%
group_by(subject_id, active_ingredient_groups) %>%
# Sum mapped_duration for each active_ingredient_group per subject_id
summarise(total_duration = sum(mapped_duration, na.rm = TRUE)) %>%
# Classify based on total_duration
mutate(
duration_category = case_when(
total_duration >= 24 ~ "chronic_use",   # 24 months or more
total_duration < 24 & total_duration >= 6 ~ "intermediate_use",  # 6 to less than 24 months
TRUE ~ "non_use"  # less than 6 months or no duration info
)
) %>%  # Count the number of prescriptions grouped by active_ingredient_groups and duration_category
count(active_ingredient_groups, duration_category, name = "prescription_count") %>%
# Spread the counts into separate columns for each duration category
pivot_wider(names_from = duration_category, values_from = prescription_count, values_fill = 0)
endpoints_medication_5y_filt <-  endpoints_medications %>%
mutate(
# Calculate the time difference in years between record_date and diagnosis_date
year_difference = as.numeric(difftime(record_date2, diagnosis_date2, units = "days")) / 365.25
) %>%
# Filter rows where the year difference is 5 years or less
filter(abs(year_difference) <= 5)
endpoints_medication_3y_filt <-  endpoints_medications %>%
mutate(
# Calculate the time difference in years between record_date and diagnosis_date
year_difference = as.numeric(difftime(record_date2, diagnosis_date2, units = "days")) / 365.25
) %>%
# Filter rows where the year difference is 5 years or less
filter(abs(year_difference) <= 3)
View(endpoints_medications)
class(endpoints_medications$mapped_duration)
classify_drug_prescription_freq_duration_5y <- endpoints_medication_5y_filt %>%
group_by(subject_id, active_ingredient_groups) %>%
# Sum mapped_duration for each active_ingredient_group per subject_id
summarise(total_duration = sum(mapped_duration, na.rm = TRUE)) %>%
# Classify based on total_duration
mutate(
duration_category = case_when(
total_duration >= 24 ~ "chronic_use",   # 24 months or more
total_duration < 24 & total_duration >= 6 ~ "intermediate_use",  # 6 to less than 24 months
TRUE ~ "non_use"  # less than 6 months or no duration info
)
) %>%  # Count the number of prescriptions grouped by active_ingredient_groups and duration_category
count(active_ingredient_groups, duration_category, name = "prescription_count") %>%
# Spread the counts into separate columns for each duration category
pivot_wider(names_from = duration_category, values_from = prescription_count, values_fill = 0)
View(classify_drug_prescription_freq_duration_5y)
table(endpoints_medications$mapped_duration)
sum(is.na(endpoints_medications$mapped_duration))
missing_duration <-endpoints_medications %>%
filter(is.na(mapped_duration))
table(missing_duration$duration)
continuous <- endpoints_medications %>%
filter(duration=="continuous")
classify_drug_prescription_freq_events_5y <- endpoints_medication_5y_filt %>%
group_by(subject_id, active_ingredient_groups) %>%
summarise(total_prescriptions_5y = n(), .groups = "drop")
#now classify the counts
classify_drug_prescription_freq_events_5y <- classify_drug_prescription_freq_events_5y %>%
mutate(total_prescriptions_5y_cat = case_when(
total_prescriptions_5y >= 24 ~ "chronic_use",   # 24 months or more
total_prescriptions_5y< 24 & total_prescriptions_5y>= 6 ~ "intermediate_use",  # 6 to less than 24 months
TRUE ~ "non_use"  # less than 6 months or no info
)
)
# Pivot the table to wide format
classify_drug_prescription_freq_events_5y_wide <- classify_drug_prescription_freq_events_5y %>%
#remove the actual counts of useage from this table
dplyr::select(-total_prescriptions_5y)%>%
pivot_wider(
names_from = active_ingredient_groups,  # Make drug groups into column names
values_from = total_prescriptions_5y_cat,      # Fill columns with the counts
#for those with no use put down as non_use
values_fill = "non_use"                        # Replace NA with 0 for drug groups not prescribed
)
View(classify_drug_prescription_freq_events_5y_wide)
View(classify_drug_prescription_freq_events_5y)
classify_drug_prescription_freq_events_3y <- endpoints_medication_3y_filt %>%
group_by(subject_id, active_ingredient_groups) %>%
summarise(total_prescriptions_3y = n(), .groups = "drop")
#now classify the counts
classify_drug_prescription_freq_events_3y <- classify_drug_prescription_freq_events_3y %>%
mutate(total_prescriptions_3y_cat = case_when(
total_prescriptions_3y >= 24 ~ "chronic_use",   # 24 months or more
total_prescriptions_3y< 24 & total_prescriptions_5y>= 6 ~ "intermediate_use",  # 6 to less than 24 months
TRUE ~ "non_use"  # less than 6 months or no info
)
)
classify_drug_prescription_freq_events_3y <- endpoints_medication_3y_filt %>%
group_by(subject_id, active_ingredient_groups) %>%
summarise(total_prescriptions_3y = n(), .groups = "drop")
#now classify the counts
classify_drug_prescription_freq_events_3y <- classify_drug_prescription_freq_events_3y %>%
mutate(total_prescriptions_3y_cat = case_when(
total_prescriptions_3y >= 24 ~ "chronic_use",   # 24 months or more
total_prescriptions_3y< 24 & total_prescriptions_3y>= 6 ~ "intermediate_use",  # 6 to less than 24 months
TRUE ~ "non_use"  # less than 6 months or no info
)
)
# Pivot the table to wide format
classify_drug_prescription_freq_events_3y_wide <- classify_drug_prescription_freq_events_3y %>%
#remove the actual counts of useage from this table
dplyr::select(-total_prescriptions_3y)%>%
pivot_wider(
names_from = active_ingredient_groups,  # Make drug groups into column names
values_from = total_prescriptions_3y_cat,      # Fill columns with the counts
#for those with no use put down as non_use
values_fill = "non_use"                        # Replace NA with 0 for drug groups not prescribed
)
View(endpoints_profile)
endpoints_profile <- endpoints_profile %>%
mutate(across(where(is.character), tolower))
endpoints_profile <- endpoints_profile %>%
mutate(had_HSA = case_when(
grepl('haemangiosarcoma', tracked_condition, ignore.case = TRUE) ~ 1, # If 'haemangiosarcoma' is found (case insensitive)
TRUE ~ 0 # Otherwise, 0
))
endpoints_profile <- endpoints_profile %>%
mutate(final_date = case_when(
had_HSA == 1 ~ diagnosis_date, # Use `diagnosis_date` if `had_HSA` is 1
TRUE ~ death_date              # Otherwise, use `death_date`
))
View(endpoints_profile)
endpoints_profile <- endpoints_profile %>%
mutate(had_HSA = case_when(
grepl('haemangiosarcoma', tracked_condition, ignore.case = TRUE) ~ 1, # If 'haemangiosarcoma' is found (case insensitive)
TRUE ~ 0 # Otherwise, 0
))
endpoints_profile <- endpoints_profile %>%
mutate(had_HSA = case_when(
grepl('haemangiosarcoma', tracked_condition, ignore.case = TRUE) ~ 1, # If 'haemangiosarcoma' is found (case insensitive)
TRUE ~ 0 # Otherwise, 0
))
table(endpoints_profile$had_HSA)
endpoints_profile <- endpoints_profile %>%
mutate(had_HSA = case_when(
grepl('hemangiosarcoma', tracked_condition, ignore.case = TRUE) ~ 1, # If 'haemangiosarcoma' is found (case insensitive)
TRUE ~ 0 # Otherwise, 0
))
table(endpoints_profile$had_HSA)
endpoints_profile <- endpoints_profile %>%
mutate(final_date = case_when(
had_HSA == 1 ~ diagnosis_date, # Use `diagnosis_date` if `had_HSA` is 1
TRUE ~ death_date              # Otherwise, use `death_date`
))
View(endpoints_profile)
library(tidyverse)
library(lubridate)
medications <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/GRLS_medications_initial_tidy.csv")
endpoints<- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/study_endpoints.csv")
#death date file
dog_profile <-read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/dog_profile.csv")
#keep only date of death and subject id
dog_profile <- dog_profile %>%
dplyr::select(c(subject_id,death_date))
endpoints_profile <- endpoints %>%
left_join(dog_profile, by="subject_id")
number_of_prescriptions_drug_groups_whole_life <- medications %>%
group_by(subject_id, active_ingredient_groups) %>%  # Group by both dog and drug category
summarise(lifetime_total_prescriptions = n(), .groups = "drop")
# Pivot the table to wide format
number_of_prescriptions_drug_groups_whole_life_wide <- number_of_prescriptions_drug_groups_whole_life %>%
pivot_wider(
names_from = active_ingredient_groups,  # Make drug groups into column names
values_from = lifetime_total_prescriptions,      # Fill columns with the counts
values_fill = 0                         # Replace NA with 0 for drug groups not prescribed
)
number_of_prescriptions_ingredient_100_groups_whole_life <- medications %>%
group_by(subject_id, medication_ingredients_100) %>%  # Group by both dog and drug category
summarise(lifetime_total_prescriptions = n(), .groups = "drop")
# Pivot the table to wide format
number_of_prescriptions_ingredient_100_groups_whole_life_wide <- number_of_prescriptions_ingredient_100_groups_whole_life %>%
pivot_wider(
names_from = medication_ingredients_100,  # Make drug groups into column names
values_from = lifetime_total_prescriptions,      # Fill columns with the counts
values_fill = 0                         # Replace NA with 0 for drug groups not prescribed
)
#combine endpoints and medications dataset, NB only the endpoints  ~1800 dogs retained rahter than the 3000
endpoints_medications <- medications %>%
inner_join(endpoints_profile, by = "subject_id")
#sense check same num unique IDs in data
unique_end <- unique(endpoints$subject_id)
unique_endmed <- unique(endpoints_medications$subject_id)
#delete pointless columns
endpoints_medications <- endpoints_medications %>%
dplyr::select(-c(X,public_id.x,public_id.y,status.x,status.y))
#make sure date columns in dateformat
endpoints_medications <- endpoints_medications %>%
mutate(
diagnosis_date2 = as.Date(diagnosis_date, format = "%Y-%m-%d"),  # yyyy-mm-dd
record_date2= as.Date(record_date, format = "%Y-%m-%d")         # dd-mm-yyyy
)
#endpoints_medications$mapped_duration <- as.numeric(endpoints_medications$mapped_duration)
#trial to retain rows ?5y before diagnosis?
endpoints_medication_5y_filt <-  endpoints_medications %>%
mutate(
# Calculate the time difference in years between record_date and diagnosis_date
year_difference = as.numeric(difftime(record_date2, diagnosis_date2, units = "days")) / 365.25
) %>%
# Filter rows where the year difference is 5 years or less
filter(abs(year_difference) <= 5)
#trial to retain rows ?3y before diagnosis?
endpoints_medication_3y_filt <-  endpoints_medications %>%
mutate(
# Calculate the time difference in years between record_date and diagnosis_date
year_difference = as.numeric(difftime(record_date2, diagnosis_date2, units = "days")) / 365.25
) %>%
# Filter rows where the year difference is 5 years or less
filter(abs(year_difference) <= 3)
classify_drug_prescription_freq_duration_5y <- endpoints_medication_5y_filt %>%
group_by(subject_id, active_ingredient_groups) %>%
# Sum mapped_duration for each active_ingredient_group per subject_id
summarise(total_duration = sum(mapped_duration, na.rm = TRUE)) %>%
# Classify based on total_duration
mutate(
duration_category = case_when(
total_duration >= 24 ~ "chronic_use",   # 24 months or more
total_duration < 24 & total_duration >= 6 ~ "intermediate_use",  # 6 to less than 24 months
TRUE ~ "non_use"  # less than 6 months or no duration info
)
) %>%  # Count the number of prescriptions grouped by active_ingredient_groups and duration_category
count(active_ingredient_groups, duration_category, name = "prescription_count") %>%
# Spread the counts into separate columns for each duration category
pivot_wider(names_from = duration_category, values_from = prescription_count, values_fill = 0)
endpoints_medications$mapped_duration <- as.numeric(endpoints_medications$mapped_duration)
#trial to retain rows ?5y before diagnosis?
endpoints_medication_5y_filt <-  endpoints_medications %>%
mutate(
# Calculate the time difference in years between record_date and diagnosis_date
year_difference = as.numeric(difftime(record_date2, diagnosis_date2, units = "days")) / 365.25
) %>%
# Filter rows where the year difference is 5 years or less
filter(abs(year_difference) <= 5)
#trial to retain rows ?3y before diagnosis?
endpoints_medication_3y_filt <-  endpoints_medications %>%
mutate(
# Calculate the time difference in years between record_date and diagnosis_date
year_difference = as.numeric(difftime(record_date2, diagnosis_date2, units = "days")) / 365.25
) %>%
# Filter rows where the year difference is 5 years or less
filter(abs(year_difference) <= 3)
classify_drug_prescription_freq_duration_5y <- endpoints_medication_5y_filt %>%
group_by(subject_id, active_ingredient_groups) %>%
# Sum mapped_duration for each active_ingredient_group per subject_id
summarise(total_duration = sum(mapped_duration, na.rm = TRUE)) %>%
# Classify based on total_duration
mutate(
duration_category = case_when(
total_duration >= 24 ~ "chronic_use",   # 24 months or more
total_duration < 24 & total_duration >= 6 ~ "intermediate_use",  # 6 to less than 24 months
TRUE ~ "non_use"  # less than 6 months or no duration info
)
) %>%  # Count the number of prescriptions grouped by active_ingredient_groups and duration_category
count(active_ingredient_groups, duration_category, name = "prescription_count") %>%
# Spread the counts into separate columns for each duration category
pivot_wider(names_from = duration_category, values_from = prescription_count, values_fill = 0)
table(endpoints_medications$mapped_duration)
sum(is.na(endpoints_medications$mapped_duration))
missing_duration <-endpoints_medications %>%
filter(is.na(mapped_duration))
table(missing_duration$duration)
continuous <- endpoints_medications %>%
filter(duration=="continuous")
classify_drug_prescription_freq_events_5y <- endpoints_medication_5y_filt %>%
group_by(subject_id, active_ingredient_groups) %>%
summarise(total_prescriptions_5y = n(), .groups = "drop")
#now classify the counts
classify_drug_prescription_freq_events_5y <- classify_drug_prescription_freq_events_5y %>%
mutate(total_prescriptions_5y_cat = case_when(
total_prescriptions_5y >= 24 ~ "chronic_use",   # 24 months or more
total_prescriptions_5y< 24 & total_prescriptions_5y>= 6 ~ "intermediate_use",  # 6 to less than 24 months
TRUE ~ "non_use"  # less than 6 months or no info
)
)
# Pivot the table to wide format
classify_drug_prescription_freq_events_5y_wide <- classify_drug_prescription_freq_events_5y %>%
#remove the actual counts of useage from this table
dplyr::select(-total_prescriptions_5y)%>%
pivot_wider(
names_from = active_ingredient_groups,  # Make drug groups into column names
values_from = total_prescriptions_5y_cat,      # Fill columns with the counts
#for those with no use put down as non_use
values_fill = "non_use"                        # Replace NA with 0 for drug groups not prescribed
)
classify_drug_prescription_freq_events_3y <- endpoints_medication_3y_filt %>%
group_by(subject_id, active_ingredient_groups) %>%
summarise(total_prescriptions_3y = n(), .groups = "drop")
#now classify the counts
classify_drug_prescription_freq_events_3y <- classify_drug_prescription_freq_events_3y %>%
mutate(total_prescriptions_3y_cat = case_when(
total_prescriptions_3y >= 24 ~ "chronic_use",   # 24 months or more
total_prescriptions_3y< 24 & total_prescriptions_3y>= 6 ~ "intermediate_use",  # 6 to less than 24 months
TRUE ~ "non_use"  # less than 6 months or no info
)
)
# Pivot the table to wide format
classify_drug_prescription_freq_events_3y_wide <- classify_drug_prescription_freq_events_3y %>%
#remove the actual counts of useage from this table
dplyr::select(-total_prescriptions_3y)%>%
pivot_wider(
names_from = active_ingredient_groups,  # Make drug groups into column names
values_from = total_prescriptions_3y_cat,      # Fill columns with the counts
#for those with no use put down as non_use
values_fill = "non_use"                        # Replace NA with 0 for drug groups not prescribed
)
endpoints_profile <- endpoints_profile %>%
mutate(across(where(is.character), tolower))
#create in endpoints df a column called final_date where get date of death from dog_profile for dogs that did not die with HSA
#creat had HSA column in endpoitns_profile
endpoints_profile <- endpoints_profile %>%
mutate(had_HSA = case_when(
grepl('hemangiosarcoma', tracked_condition, ignore.case = TRUE) ~ 1, # If 'haemangiosarcoma' is found (case insensitive)
TRUE ~ 0 # Otherwise, 0
))
endpoints_profile <- endpoints_profile %>%
mutate(final_date = case_when(
had_HSA == 1 ~ diagnosis_date, # Use `diagnosis_date` if `had_HSA` is 1
TRUE ~ death_date              # Otherwise, use `death_date`
))
unique_end <- unique(endpoints_profile$subject_id)
endpoints_profile2 <- endpoints_profile %>%
group_by(dog_id) %>% # Assuming 'dog_id' uniquely identifies each dog
arrange(desc(had_HSA), desc(cause_of_death)) %>% # Prioritize had_HSA == 1, then cause_of_death == 1
slice_head(n = 1) %>% # Keep only the first row per dog
ungroup()
endpoints_profile2 <- endpoints_profile %>%
group_by(subject_id) %>% # Assuming 'dog_id' uniquely identifies each dog
arrange(desc(had_HSA), desc(cause_of_death)) %>% # Prioritize had_HSA == 1, then cause_of_death == 1
slice_head(n = 1) %>% # Keep only the first row per dog
ungroup()
endpoints_profile2 <- endpoints_profile %>%
group_by(subject_id) %>% # Assuming 'dog_id' uniquely identifies each dog
arrange(desc(had_HSA), desc(is_cause_of_death)) %>% # Prioritize had_HSA == 1, then cause_of_death == 1
slice_head(n = 1) %>% # Keep only the first row per dog
ungroup()
endpoints_profile2 <- endpoints_profile2 %>%
mutate(final_date = case_when(
had_HSA == 1 ~ diagnosis_date, # Use `diagnosis_date` if `had_HSA` is 1
TRUE ~ death_date              # Otherwise, use `death_date`
))
View(endpoints_profile2)
table(endpoints_profile2$final_date)
View(endpoints_profile)
endpoints_profile2 <- endpoints_profile2 %>%
mutate(final_date = case_when(
had_HSA == 1 ~ diagnosis_date, # Use `diagnosis_date` if `had_HSA` is 1
TRUE ~ death_date              # Otherwise, use `death_date`
),
final_date = if_else(is.na(final_date), as.Date("2024-12-31"), final_date)) # Replace missing dates with "2024-12-31"
endpoints_profile2 <- endpoints_profile2 %>%
mutate(final_date = case_when(
had_HSA == 1 ~ diagnosis_date, # Use `diagnosis_date` if `had_HSA` is 1
TRUE ~ death_date              # Otherwise, use `death_date`
),
final_date = if_else(is.na(final_date), "2024-12-31", final_date)) # Replace missing dates with "2024-12-31"
View(endpoints_profile2)
endpoints_profile2 <- endpoints_profile2 %>%
mutate(final_date = case_when(
had_HSA == 1 ~ diagnosis_date, # Use `diagnosis_date` if `had_HSA` is 1
TRUE ~ death_date              # Otherwise, use `death_date`
),
final_date = if_else(final_date == "" | is.na(final_date), as.Date("2024-12-31"), as.Date(final_date))) # Replace missing dates with "2024-12-31"
View(endpoints_profile2)
