View(comorbs_unique)
View(comorbs_unique)
dog_094-000147 <- comorbs_unique %>% filter(subject_id=="094-000147
")
dog_094_000147 <- comorbs_unique %>% filter(subject_id=="094-000147")
View(dog_094_000147)
dog_094_002777 <- comorbs_unique %>%filter(subject_id=="094-002777
")
dog_094_002777 <- comorbs_unique %>%filter(subject_id=="094-002777")
View(dog_094_002777)
dog_094_002920<- comorbs_unique %>% filter(subject_id=="094-002920")
View(dog_094_002920)
dog_094_003019 <- comorbs_unique %>% filter(subject_id=="094-003019")
View(dog_094_003019)
dog_094_004392 <- comorbs_unique %>%filter(subject_id=="094-004392")
View(dog_094_004392)
dog_094_004493<- comorbs_unique %>% filter(subject_id=="094-004493")
View(dog_094_004493)
dog_094_008549 <- comorbs_unique %>% filter(subject_id=="094-008549")
View(dog_094_008549)
records_crosschecked <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/GRLS_lymphoma_plus_records_comorbs3_annotated.csv")
records_crosschecked_abr <- records_crosschecked %>%
distinct(subject_id, .keep_all = TRUE)
View(records_crosschecked_abr)
records_crosschecked <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/GRLS_lymphoma_plus_records_comorbs3_annotated.csv")
records_crosschecked_abr <- records_crosschecked %>%
distinct(subject_id, .keep_all = TRUE)
table(records_crosschecked_abr$mismatch_YN)
table(records_crosschecked_abr$mismatch_OK_YN)
table(records_crosschecked_abr$reason_for_mismatch_OK)
table(records_crosschecked_abr$reason_for_mismatch_OK)
library(tidyverse)
library(lubridate)
medications <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/GRLS_medications_initial_tidy.csv")
endpoints<- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/study_endpoints.csv")
#death date file
dog_profile <-read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/dog_profile.csv")
#keep only date of death and subject id
dog_profile <- dog_profile %>%
dplyr::select(c(subject_id,death_date))
endpoints_profile <- endpoints %>%
left_join(dog_profile, by="subject_id")
HSA_cohort <-read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/HSA_study_pop_with_final_date_with_final_study_record_year.csv")
HSA_cohort <- HSA_cohort %>%
dplyr::select(-c(X))
number_of_prescriptions_drug_groups_whole_life <- medications %>%
group_by(subject_id, active_ingredient_groups) %>%  # Group by both dog and drug category
summarise(lifetime_total_prescriptions = n(), .groups = "drop")
# Pivot the table to wide format
number_of_prescriptions_drug_groups_whole_life_wide <- number_of_prescriptions_drug_groups_whole_life %>%
pivot_wider(
names_from = active_ingredient_groups,  # Make drug groups into column names
values_from = lifetime_total_prescriptions,      # Fill columns with the counts
values_fill = 0                         # Replace NA with 0 for drug groups not prescribed
)
number_of_prescriptions_ingredient_100_groups_whole_life <- medications %>%
group_by(subject_id, medication_ingredients_100) %>%  # Group by both dog and drug category
summarise(lifetime_total_prescriptions = n(), .groups = "drop")
# Pivot the table to wide format
number_of_prescriptions_ingredient_100_groups_whole_life_wide <- number_of_prescriptions_ingredient_100_groups_whole_life %>%
pivot_wider(
names_from = medication_ingredients_100,  # Make drug groups into column names
values_from = lifetime_total_prescriptions,      # Fill columns with the counts
values_fill = 0                         # Replace NA with 0 for drug groups not prescribed
)
#combine endpoints and medications dataset, NB only the endpoints  ~1800 dogs retained rahter than the 3000
endpoints_medications <- medications %>%
inner_join(endpoints_profile, by = "subject_id")
#sense check same num unique IDs in data
unique_end <- unique(endpoints$subject_id)
unique_endmed <- unique(endpoints_medications$subject_id)
#delete pointless columns
endpoints_medications <- endpoints_medications %>%
dplyr::select(-c(X,public_id.x,public_id.y,status.x,status.y))
HSA_medications <- medications %>%
inner_join(HSA_cohort,by="subject_id")
HSA_medications <- HSA_medications %>%
dplyr::select(-c(X))
#make sure date columns in dateformat
endpoints_medications <- endpoints_medications %>%
mutate(
diagnosis_date2 = as.Date(diagnosis_date, format = "%Y-%m-%d"),  # yyyy-mm-dd
record_date2= as.Date(record_date, format = "%Y-%m-%d")         # dd-mm-yyyy
)
endpoints_medications$mapped_duration <- as.numeric(endpoints_medications$mapped_duration)
#trial to retain rows ?5y before diagnosis?
endpoints_medication_5y_filt <-  endpoints_medications %>%
mutate(
# Calculate the time difference in years between record_date and diagnosis_date
year_difference = as.numeric(difftime(record_date2, diagnosis_date2, units = "days")) / 365.25
) %>%
# Filter rows where the year difference is 5 years or less
filter(abs(year_difference) <= 5)
#trial to retain rows ?3y before diagnosis?
endpoints_medication_3y_filt <-  endpoints_medications %>%
mutate(
# Calculate the time difference in years between record_date and diagnosis_date
year_difference = as.numeric(difftime(record_date2, diagnosis_date2, units = "days")) / 365.25
) %>%
# Filter rows where the year difference is 5 years or less
filter(abs(year_difference) <= 3)
classify_drug_prescription_freq_duration_5y <- endpoints_medication_5y_filt %>%
group_by(subject_id, active_ingredient_groups) %>%
# Sum mapped_duration for each active_ingredient_group per subject_id
summarise(total_duration = sum(mapped_duration, na.rm = TRUE)) %>%
# Classify based on total_duration
mutate(
duration_category = case_when(
total_duration >= 24 ~ "chronic_use",   # 24 months or more
total_duration < 24 & total_duration >= 6 ~ "intermediate_use",  # 6 to less than 24 months
TRUE ~ "non_use"  # less than 6 months or no duration info
)
) %>%  # Count the number of prescriptions grouped by active_ingredient_groups and duration_category
count(active_ingredient_groups, duration_category, name = "prescription_count") %>%
# Spread the counts into separate columns for each duration category
pivot_wider(names_from = duration_category, values_from = prescription_count, values_fill = 0)
table(endpoints_medications$mapped_duration)
sum(is.na(endpoints_medications$mapped_duration))
missing_duration <-endpoints_medications %>%
filter(is.na(mapped_duration))
table(missing_duration$duration)
continuous <- endpoints_medications %>%
filter(duration=="continuous")
classify_drug_prescription_freq_events_5y <- endpoints_medication_5y_filt %>%
group_by(subject_id, active_ingredient_groups) %>%
summarise(total_prescriptions_5y = n(), .groups = "drop")
#now classify the counts
classify_drug_prescription_freq_events_5y <- classify_drug_prescription_freq_events_5y %>%
mutate(total_prescriptions_5y_cat = case_when(
total_prescriptions_5y >= 24 ~ "chronic_use",   # 24 months or more
total_prescriptions_5y< 24 & total_prescriptions_5y>= 6 ~ "intermediate_use",  # 6 to less than 24 months
TRUE ~ "non_use"  # less than 6 months or no info
)
)
# Pivot the table to wide format
classify_drug_prescription_freq_events_5y_wide <- classify_drug_prescription_freq_events_5y %>%
#remove the actual counts of useage from this table
dplyr::select(-total_prescriptions_5y)%>%
pivot_wider(
names_from = active_ingredient_groups,  # Make drug groups into column names
values_from = total_prescriptions_5y_cat,      # Fill columns with the counts
#for those with no use put down as non_use
values_fill = "non_use"                        # Replace NA with 0 for drug groups not prescribed
)
classify_drug_prescription_freq_events_3y <- endpoints_medication_3y_filt %>%
group_by(subject_id, active_ingredient_groups) %>%
summarise(total_prescriptions_3y = n(), .groups = "drop")
#now classify the counts
classify_drug_prescription_freq_events_3y <- classify_drug_prescription_freq_events_3y %>%
mutate(total_prescriptions_3y_cat = case_when(
total_prescriptions_3y >= 24 ~ "chronic_use",   # 24 months or more
total_prescriptions_3y< 24 & total_prescriptions_3y>= 6 ~ "intermediate_use",  # 6 to less than 24 months
TRUE ~ "non_use"  # less than 6 months or no info
)
)
# Pivot the table to wide format
classify_drug_prescription_freq_events_3y_wide <- classify_drug_prescription_freq_events_3y %>%
#remove the actual counts of useage from this table
dplyr::select(-total_prescriptions_3y)%>%
pivot_wider(
names_from = active_ingredient_groups,  # Make drug groups into column names
values_from = total_prescriptions_3y_cat,      # Fill columns with the counts
#for those with no use put down as non_use
values_fill = "non_use"                        # Replace NA with 0 for drug groups not prescribed
)
#trial to retain rows ?5y before diagnosis?
HSA_medication_5y_filt <-  HSA_medications %>%
group_by(subject_id) %>%
filter(year_in_study >= (year_in_study_diagnosis_or_final_record_year - 5))
# Step 1: Count occurrences per dog per active ingredient group
meds_per_dog <- HSA_medication_5y_filt %>%
group_by(subject_id, active_ingredient_groups) %>%
summarise(count = n(), .groups = "drop")
# Step 2: Compute quartiles *within* each active ingredient group
medication_summary <- meds_per_dog %>%
group_by(active_ingredient_groups) %>%
summarise(
Q1 = quantile(count, 0.25, na.rm = TRUE),
median_count_per_dog = quantile(count, 0.50, na.rm = TRUE),  # Use quantile for clarity
Q3 = quantile(count, 0.75, na.rm = TRUE),
.groups = "drop"
)
# Step 3: Join quartiles back to individual dog data and assign quartile categories
meds_per_dog_quart <- meds_per_dog %>%
left_join(medication_summary, by = "active_ingredient_groups") %>%
mutate(
quartile = case_when(
count <= Q1 ~ "Q1",
count > Q1 & count <= median_count_per_dog ~ "Q2",
count > median_count_per_dog & count <= Q3 ~ "Q3",
count > Q3 ~ "Q4"
),
# Assign halves based on median
half = ifelse(count <= median_count_per_dog, "lower_half", "upper_half")
) %>%
dplyr::select(c(subject_id, active_ingredient_groups, quartile, half))
# Step 4: Reshape so each medication group is a column with Q1-Q4 values per dog
meds_wide_quart <- meds_per_dog_quart %>%
pivot_wider(names_from = active_ingredient_groups, values_from = c(half,quartile))
# View the final data
meds_wide_quart
colSums(is.na(meds_wide_quart))
meds_wide_no_sub_quart <- meds_wide_quart %>%
dplyr::select(-subject_id)
lapply(meds_wide_no_sub_quart, function(x) table(x, useNA = "ifany"))
meds_wide_quart <- meds_wide_quart %>%
rename_with(~ paste0(.x, "_5y_prior_endpoint"), -1)
lifetime_meds_per_dog <- HSA_medications %>%
group_by(subject_id, active_ingredient_groups) %>%
summarise(count = n(), .groups = "drop")  # Count occurrences per dog per group
# Step 2: Get summary stats across all dogs for each medication group
lifetime_meds_summary <- lifetime_meds_per_dog %>%
group_by(active_ingredient_groups) %>%
summarise(
Q1 = quantile(count, 0.25, na.rm = TRUE),
median_count_per_dog = quantile(count, 0.50, na.rm = TRUE),  # Use quantile for clarity
Q3 = quantile(count, 0.75, na.rm = TRUE),
.groups = "drop"
)
# Step 3: Join quartiles back to individual dog data and assign quartile categories
lifetime_meds_per_dog_quart <- lifetime_meds_per_dog %>%
left_join(lifetime_meds_summary, by = "active_ingredient_groups") %>%
mutate(
quartile = case_when(
count <= Q1 ~ "Q1",
count > Q1 & count <= median_count_per_dog ~ "Q2",
count > median_count_per_dog & count <= Q3 ~ "Q3",
count > Q3 ~ "Q4"
),
# Assign halves based on median
half = ifelse(count <= median_count_per_dog, "lower_half", "upper_half")
) %>%
dplyr::select(c(subject_id, active_ingredient_groups, quartile, half))
# Step 4: Reshape so each medication group is a column with Q1-Q4 values per dog
lifetime_meds_wide_quart <- lifetime_meds_per_dog_quart %>%
pivot_wider(names_from = active_ingredient_groups, values_from = c(half,quartile))
# View the final data
lifetime_meds_wide_quart
lifetime_meds_wide_quart <- lifetime_meds_wide_quart %>%
rename_with(~ paste0(.x, "_lifetime"), -1)
NSAID_names<-c("carprofen","meloxicam","firocoxib","deracoxib","flurbiprofen","piroxicam","ketotifen","ketoprofen","rimadyl","metacam","meloxidyl","previcox","vetprofen","ketorolac opthalmic ointment","toradol","acular","voltaren
","diclofenac","flurbiprofen eye drops
","carprovet","carprieve","truprofen","ofloxacin ophthalmic ointment + nsaid
")
steroid_names<-c("dexamethasone, neomycin sulfate, thiabendazole
","prednisolone acetate
","betamethasone, clotrimazole, gentamicin sulfate
","betamethasone, gentamicin sulfate
","dexamethasone","dexamethasone, miconazole nitrate
","dexamethasone, miconazole nitrate
","methylprednisolone","prednisone","betamethasone, florfenicol, terbinafine
","clotrimazole, gentamicin sulfate, mometasone furoate
","dexamethasone, methylprednisolone
","mometasone furoate, orbifloxacin, posaconazole
","dexamethasone, neomycin sulfate, polymyxin b
","bacitracin zinc, dexamethasone, neomycin sulfate, polymyxin b
","miconazole nitrate, polymyxin b, prednisolone acetate
","hydrocortisone, gentamicin sulfate, miconazole nitrate
","gentamicin sulfate, hydrocortisone, miconazole nitrate
","burow's solution, hydrocortisone
","acetic acid, boric acid, hydrocortisone, ketoconazole
","hydrocortisone","bacitracin zinc, hydrocortisone, neomycin sulfate, polymyxin b
","dexamethasone, enrofloxacin, miconazole nitrate
","clotrimazole, dexamethasone, enrofloxacin
","hydrocortisone, ketoconazole
","dexamethasone, ketoconazole, phytosphingosine
","betamethasone","acetic acid, boric acid, ceramide complex, hydrocortisone, ketoconazole
","hydrocortisone, troleandomycin
","dexamethasone, enrofloxacin, ketoconazole, tris-edta
","bacitracin zinc, neomycin sulfate, polymyxin b, unspecified steroid
","clotrimazole, dexamethasone
","dexamethasone, ketoconazole, tris-edta
","dexamethasone, ketoconazole
","betamethasone, clotrimazole, gentamicin sulfate, mometasone furoate
","dexamethasone, diphenhydramine
","beclomethasone, clotrimazole, neomycin sulfate
","dexamethasone, enrofloxacin, ketoconazole
","dexamethasone, dimethyl sulfoxide, enrofloxacin, lidocaine
","dexamethasone, enrofloxacin
","betamethasone, gentamicin sulfate, miconazole nitrate
","chloramphenicol, dexamethasone
","hydrocortisone, pramoxine
","dexamethasone, penicillin
","betamethasone, chloramphenicol, ketoconazole
","dexamethasone, tobramycin
","enrofloxacin, dexamethasone, tris-edta
","dexamethasone, miconazole nitrate, neomycin sulfate, nystatin, thiostrepton, triamcinolone acetonide
","betamethasone, burow's solution, gentamicin sulfate, hydrocortisone, miconazole nitrate
","ketoconazole, hydrocortisone
","bacitracin, hydrocortisone
","dexamethasone, miconazole nitrate, tris-edta
","chlorhexidine gluconate, dexamethasone
","dexamethasone, enrofloxacin, tris-edta
","dexamethasone, enrofloxacin, silver sulfadiazine
","dexamethasone, miconazole nitrate, neomycin sulfate, polymyxin b, prednisolone acetate, thiabendazole
","betamethasone, enrofloxacin
","dexamethasone, ear cleaner (epi-otic advanced), enrofloxacin
","betamethasone, tobramycin
","dexamethasone ophthalmic ointment
","miconazole + dexamethasone ear solution
","amikacin + dexamethasone ear solution
","depo-medrol
","prednisolone acetate ophthalmic suspension
","neo-poly-dex ophthalmic ointment
","neo-poly-bac ophthalmic ointment + dexamethasone
","betamethasone + gentamicin ear solution
","conofite + dexamethasone ear solution
","neo-poly-bac ophthalmic ointment + hydrocortisone
","baytril + conofite + dexamethasone ear solution
","betamethasone + gentamicin spray
","baytil + clotrimazole + dexamethasone ear solution
","baytril + dexamethasone + miconazole ear solution
","baytril + conzol + dexamethasone ear solution
","trizulta + keto + baytril + dexamethasone flush
","clotrimazole + dexamethasone ear solution
","burow's solution + hydrocortisone
","betamethasone + clotrimazole + gentamicin ear solution
","trizulta + keto + dexamethasone flush
","cortalone
","baytril + dexamethasone + ketoconazole ear solution
","betamethasone + gentamicin sulfate + miconazole nitrate ear solution
","dexamethasone otic
","baytril + trizulta + dexamethasone ear solution
","neomycin sulfate + nystatin + triamcinolone acetonide
","chloramphenicol + ketoconazole + triamcinolone acetonide ear solution
","triamcinolone","trizedta + dexamethasone + miconazole flush
","chlorhexiderm + dexamethasone spray
","trizedta + baytril + dexamethasone flush
","neomycin sulfate + tetracaine + triamcinolone acetonide
","clotrimazole + gentamicin + mometasone ear solution
","baytril + dexamethasone + silvadene ear solution
","itraconazole + ketoconazole + triamcinolone acetonide ear solution
","baytril + triamcinolone acetonide
","troleandomycin + hydrocortisone
","neo-poly-bac ophthalmic ointment + steroid
","t8 keto flush + dexamethasone
","dexamethasone + miconazole
","dermacool + hydrocortisone
","trizchlor 4 + hydrocortisone
","dexamethasone + diphenhydramine
","tear stimulation forte + betamethasone + ofloxacin
","baytril + dexamethasone + dimethyl sulfoxide + lidocaine
","dexamethasone + baytril
","ketoconazole + mupirocin + triamcinolone acetonide
","penicillin + dexamethasone
","tobramycin + betamethasone ophthalmic ointment
","lotramin + dexamethasone
","bacitracin + hydrocortisone
")
fenbendazole_names<-c("fenbendazole","fenbendazole, maropitant citrate, metronidazole, omeprazole, sucralfate
","cerenia + fenbendazole + metronidazole + omeprazole + sucralfate
","panacur","safe-guard")
#NSAID
NSAID_ever<- HSA_medications %>%
mutate(NSAID_ever = apply(select(., medication_name, medication_name_specify, medication_ingredients),
1,
function(row) {
# Check each column in the row for a match with NSAID_names
any(tolower(str_trim(row)) %in% tolower(str_trim(NSAID_names)))
})) %>%
mutate(NSAID_ever= ifelse(NSAID_ever, 1, 0)) %>%
arrange(subject_id, desc(NSAID_ever)) %>%  # Ensure NSAID_5y = 1 rows come first
distinct(subject_id, .keep_all = TRUE) %>%  # Keep first row for each subject_id
select(subject_id, NSAID_ever)
#steroid
steroid_ever<- HSA_medications %>%
mutate(steroid_ever = apply(select(., medication_name, medication_name_specify, medication_ingredients),
1,
function(row) {
# Check each column in the row for a match with NSAID_names
any(tolower(str_trim(row)) %in% tolower(str_trim(steroid_names)))
})) %>%
mutate(steroid_ever = ifelse(steroid_ever, 1, 0)) %>%
arrange(subject_id, desc(steroid_ever)) %>%  # Ensure NSAID_ever = 1 rows come first
distinct(subject_id, .keep_all = TRUE) %>%  # Keep first row for each subject_id
select(subject_id, steroid_ever)
#fenbendazole
fenbendazole_ever <- HSA_medications %>%
mutate(fenbendazole_ever = apply(select(., medication_name, medication_name_specify, medication_ingredients),
1,
function(row) {
# Check each column in the row for a match with NSAID_names
any(tolower(str_trim(row)) %in% tolower(str_trim(fenbendazole_names)))
})) %>%
mutate(fenbendazole_ever = ifelse(fenbendazole_ever, 1, 0)) %>%
arrange(subject_id, desc(fenbendazole_ever)) %>%  # Ensure NSAID_ever = 1 rows come first
distinct(subject_id, .keep_all = TRUE) %>%  # Keep first row for each subject_id
select(subject_id, fenbendazole_ever)
#NSAID
NSAID_5y <-HSA_medication_5y_filt %>%
ungroup()%>%
mutate(NSAID_5y = apply(select(., medication_name, medication_name_specify, medication_ingredients),
1,
function(row) {
# Check each column in the row for a match with NSAID_names
any(tolower(str_trim(row)) %in% tolower(str_trim(NSAID_names)))
})) %>%
mutate(NSAID_5y = ifelse(NSAID_5y, 1, 0)) %>%
arrange(subject_id, desc(NSAID_5y)) %>%  # Ensure NSAID_5y = 1 rows come first
distinct(subject_id, .keep_all = TRUE) %>%  # Keep first row for each subject_id
select(subject_id, NSAID_5y)
#steroid
steroid_5y <- HSA_medication_5y_filt %>%
ungroup()%>%
mutate(steroid_5y = apply(select(., medication_name, medication_name_specify, medication_ingredients),
1,
function(row) {
# Check each column in the row for a match with NSAID_names
any(tolower(str_trim(row)) %in% tolower(str_trim(steroid_names)))
})) %>%
mutate(steroid_5y = ifelse(steroid_5y, 1, 0)) %>%
arrange(subject_id, desc(steroid_5y)) %>%  # Ensure NSAID_5y = 1 rows come first
distinct(subject_id, .keep_all = TRUE) %>%  # Keep first row for each subject_id
select(subject_id, steroid_5y)
#fenbendazole
fenbendazole_5y <- HSA_medication_5y_filt %>%
ungroup()%>%
mutate(fenbendazole_5y = apply(select(., medication_name, medication_name_specify, medication_ingredients),
1,
function(row) {
# Check each column in the row for a match with NSAID_names
any(tolower(str_trim(row)) %in% tolower(str_trim(fenbendazole_names)))
})) %>%
mutate(fenbendazole_5y = ifelse(fenbendazole_5y, 1, 0)) %>%
arrange(subject_id, desc(fenbendazole_5y)) %>%  # Ensure NSAID_5y = 1 rows come first
distinct(subject_id, .keep_all = TRUE) %>%  # Keep first row for each subject_id
select(subject_id, fenbendazole_5y)
combined_df <- reduce(list(NSAID_ever,NSAID_5y,steroid_ever,steroid_5y,fenbendazole_ever,fenbendazole_5y), full_join, by = "subject_id")
HSA_5y_and_lifetime <- lifetime_meds_wide_quart %>%
left_join(meds_wide_quart, by="subject_id")
#now replace Nas with
HSA_5y_and_lifetime <- HSA_5y_and_lifetime %>%
mutate_all(~ replace(., is.na(.), "drug_not_administered"))
#join to 3044 cohort
HSA_5y_and_lifetime_all_dogs <- HSA_cohort %>%
left_join(HSA_5y_and_lifetime,by="subject_id")
#add the combined df of the specific extra drugds
#now replace NA with not recorded
HSA_5y_and_lifetime_all_dogs <- HSA_5y_and_lifetime_all_dogs %>%
mutate_all(~ replace(., is.na(.), "drug_not_administered"))
write.csv(HSA_5y_and_lifetime_all_dogs,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/HSA_cohort_medications_5y_and_lifetime.csv")
lifetime_comorbs <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/HSA_cohort_comorbidities.csv")
#medication name
medication_names_unique <- unique(HSA_medications$medication_name)
medication_names_unique_2 <- unique(HSA_medications$medication_name_specify)
#combine list
#medication ingredient
medication_ingredients_unique <- unique(HSA_medications$medication_ingredients)
medication_ingredients_unique_2 <- unique(HSA_medications$medication_ingredients_100)
#combine these all together and export
all_unique_med_ingredients_or_names<-unique(c(medication_ingredients_unique,medication_ingredients_unique_2,medication_names_unique,medication_names_unique_2))
#as df for reading in here with ease as too long to print whole list
all_unique_med_ingredients_or_names_df <-as.data.frame(all_unique_med_ingredients_or_names)
write.csv(all_unique_med_ingredients_or_names,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/GRLS_all_unique_medication_names_or_ingredients.csv")
View(endpoints_medication_5y_filt)
write.csv(endpoints_medication_5y_filt,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/GRLS_endpoints_5y_prior_medications.csv")
lymphoma_dogs <-read.csv("C:/Users/ctaylor18/OneDrive - Royal Veterinary College/post doc/GRLS/GRLS lymphoma RP2 projects/clinical_records_coding_compiled_CT_tidy_and_original_columns.csv")
comorbs_all <-read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/all_cohort_all_comorbs_ever.csv")
comorbs_all <- comorbs_all %>%
dplyr::select(-X)
#rename so same patientID col name
lymphoma_dogs <- lymphoma_dogs %>%
rename(subject_id = PatientID)
#keep lymphoma IDs
lymphoma_ids <- unique(lymphoma_dogs$subject_id)
#keep relevant lymphoma records
lymphoma_dogs_abr <- lymphoma_dogs %>%
dplyr::select(c(subject_id,Co.morbidities_YN,Comorbidity.1,Comorbidity.2,Pre.existing.medications_YN,Pre.existing.medication.1,Pre.existing.medication.2,Pre.existing.medication.3))
lymphoma_comorbs<- comorbs_all%>%
dplyr::filter(subject_id %in% lymphoma_ids)
#now add in the RP2 read clinical record bits
lymphoma_comorbs_with_rp2 <- lymphoma_comorbs %>%
left_join(lymphoma_dogs_abr,by="subject_id")
write.csv(lymphoma_comorbs_with_rp2,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/GRLS_lymphoma_plus_records_comorbs3.csv")
records_crosschecked <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/GRLS_lymphoma_plus_records_comorbs3_annotated.csv")
records_crosschecked_abr <- records_crosschecked %>%
distinct(subject_id, .keep_all = TRUE)
table(records_crosschecked_abr$mismatch_YN)
table(records_crosschecked_abr$mismatch_OK_YN)
table(records_crosschecked_abr$reason_for_mismatch_OK)
#keep lymphoma only records
lymphoma_meds<- meds_endpoints_5y%>%
dplyr::filter(subject_id %in% lymphoma_ids)
meds_endpoints_5y<-read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/GRLS_endpoints_5y_prior_medications.csv")
#keep lymphoma only records
lymphoma_meds<- meds_endpoints_5y%>%
dplyr::filter(subject_id %in% lymphoma_ids)
colnames(lymphoma_meds)
lymphoma_meds_abr <- lymphoma_meds %>%
dplyr::select(c(subject_id,year_in_study.x,record_date,medication_name,medication_name_specify,medication_ingredients,medication_ingredients_100,administration_method,duration,active_ingredient_groups,active_ingredient_groups_100))
lymphoma_comorbs_with_rp2 <- lymphoma_meds_abr%>%
left_join(lymphoma_dogs_abr,by="subject_id")
write.csv(lymphoma_meds_with_rp2,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/GRLS_lymphoma_plus_records_medications.csv")
#now add in the RP2 read clinical record bits
lymphoma_meds_with_rp2 <- lymphoma_meds_abr%>%
left_join(lymphoma_dogs_abr,by="subject_id")
write.csv(lymphoma_meds_with_rp2,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/GRLS_lymphoma_plus_records_medications.csv")
lymphoma_meds_annotated<-read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/GRLS_lymphoma_plus_records_medications_annotated.csv")
lymhpoma_meds_annotated_unique <- lymphoma_meds_annotated %>%
distinct(subject_id, .keep_all = TRUE)
table(lymphoma_meds_annotated$agreement_YN)
table(lymphoma_meds_annotated_unique$agreement_YN)
lymhpoma_meds_annotated_unique <- lymphoma_meds_annotated %>%
distinct(subject_id, .keep_all = TRUE)
table(lymphoma_meds_annotated_unique$agreement_YN)
lymphoma_meds_annotated_unique <- lymphoma_meds_annotated %>%
distinct(subject_id, .keep_all = TRUE)
table(lymphoma_meds_annotated_unique$agreement_YN)
colnames(lymphoma_meds_annotated_unique)
table(lymphoma_meds_annotated_unique$mismatch_OK_YN)
table(lymphoma_meds_annotated_unique$reason_for_mismatch_OK
)
