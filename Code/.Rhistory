water_source_other %in% bottled ~ "bottled",
water_source_other %in% rainwater_cistern ~ "rainwater_cistern",
TRUE ~ water_source
))
table(house$water_source_2)
cols_interest <- c("area_type","house_type","water_source","pipes_metal_any","pipes_plastic_any","heating_fuel_primary","cooking_fuel_primary")
differences <- house %>%
group_by(subject_id) %>%
summarize(
across(
all_of(cols_interest),
~ n_distinct(.) > 1, # Check if there are multiple unique values
.names = "{.col}_different" # Name output columns dynamically
),
.groups = "drop"
)
proportions <- differences %>%
summarize(
across(
ends_with("_different"), # Select columns ending with "_different"
~ sum(.) / n(),          # Calculate proportion of TRUE values
.names = "{.col}_proportion" # Name output columns dynamically
)
)
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")
#early life
columns_to_check <- c("area_type","house_type","water_source","pipes_metal_any","pipes_plastic_any","heating_fuel_primary","cooking_fuel_primary","heating_fuel_secondary","cooking_fuel_secondary")
study_years <- c(0,1,2)
year_column <-"year_in_study"
house <- check_exposure_mode(house, columns_to_check, study_years,year_column)
#rest of life
study_years <- c(3,4,5,6,7,8,9,10)
year_column <-"year_in_study"
house <- check_exposure_mode(house, columns_to_check, study_years,year_column)
#late life
study_years <- c(0,1,2,3,4,5,6,7,8,9,10)
year_column <-"year_in_study"
house <- check_exposure_mode(house, columns_to_check, study_years,year_column)
View(house)
check_exposure_mode2 <- function(data, column_to_check, study_years, year_column) {
suffix <- paste(study_years, collapse = "_")
data %>%
group_by(subject_id) %>%
mutate(
mode_string = {
# Filter rows within the study years
values <- .[!!sym(year_column) %in% study_years, column_to_check, drop = TRUE]
# If no values, return NA
if (length(values) == 0) {
NA_character_
} else {
# Calculate mode
mode_val <- names(which.max(table(values)))
mode_val
}
}
) %>%
rename_with(~ paste0(column_to_check, "_mode_", suffix), "mode_string") %>%
ungroup()
}
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")
#early life
columns_to_check <- c("area_type","house_type","water_source","pipes_metal_any","pipes_plastic_any","heating_fuel_primary","cooking_fuel_primary","heating_fuel_secondary","cooking_fuel_secondary")
study_years <- c(0,1,2)
year_column <-"year_in_study"
house <- check_exposure_mode2(house, columns_to_check, study_years,year_column)
check_exposure_mode2 <- function(data, columns_to_check, study_years, year_column) {
suffix <- paste(study_years, collapse = "_")
data %>%
group_by(subject_id) %>%
mutate(across(
all_of(columns_to_check),
~ {
# Filter rows within the study years
values <- .[!!sym(year_column) %in% study_years, ., drop = TRUE]
# If no values, return NA
if (length(values) == 0) {
NA_character_
} else {
# Calculate mode
mode_val <- names(which.max(table(values)))
mode_val
}
},
.names = "{.col}_mode_{suffix}" # Dynamically create column names
)) %>%
ungroup()
}
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")
#early life
columns_to_check <- c("area_type","house_type","water_source","pipes_metal_any","pipes_plastic_any","heating_fuel_primary","cooking_fuel_primary","heating_fuel_secondary","cooking_fuel_secondary")
study_years <- c(0,1,2)
year_column <-"year_in_study"
house <- check_exposure_mode2(house, columns_to_check, study_years,year_column)
df <- data.frame(
subject_id = c(1, 1, 1, 2, 2, 3),
year_in_study = c(0, 1, 2, 0, 1, 0),
area_type = c("urban", "rural", "urban", "rural", "urban", "urban"),
house_type = c("detached", "detached", "semi", "semi", "semi", "detached"),
water_source = c("well", "city", "city", "city", "well", "well")
)
columns_to_check <- c("area_type", "house_type", "water_source")
study_years <- c(0, 1, 2)
year_column <- "year_in_study"
# Apply the function
result <- check_exposure_mode(df, columns_to_check, study_years, year_column)
print(result)
check_exposure_mode2 <- function(data, columns_to_check, study_years, year_column) {
suffix <- paste(study_years, collapse = "_")
data %>%
group_by(subject_id) %>%
mutate(across(
all_of(columns_to_check),
~ {
# Filter values within the study years
values <- .[!!sym(year_column) %in% study_years]
# Calculate mode (most frequent value)
if (length(values) == 0) {
NA_character_
} else {
mode_val <- names(which.max(table(values)))
mode_val
}
},
.names = "{.col}_mode_{suffix}" # Name new columns dynamically
)) %>%
ungroup()
}
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")
#early life
columns_to_check <- c("area_type","house_type","water_source","pipes_metal_any","pipes_plastic_any","heating_fuel_primary","cooking_fuel_primary","heating_fuel_secondary","cooking_fuel_secondary")
study_years <- c(0,1,2)
year_column <-"year_in_study"
house <- check_exposure_mode2(house, columns_to_check, study_years,year_column)
View(house)
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")
#early life
columns_to_check <- c("area_type","house_type","water_source","pipes_metal_any","pipes_plastic_any","heating_fuel_primary","cooking_fuel_primary","heating_fuel_secondary","cooking_fuel_secondary")
study_years <- c(0,1,2)
year_column <-"year_in_study"
house <- check_exposure_mode(house, columns_to_check, study_years,year_column)
#rest of life
study_years <- c(3,4,5,6,7,8,9,10)
year_column <-"year_in_study"
house <- check_exposure_mode(house, columns_to_check, study_years,year_column)
#late life
study_years <- c(0,1,2,3,4,5,6,7,8,9,10)
year_column <-"year_in_study"
house <- check_exposure_mode(house, columns_to_check, study_years,year_column)
View(house)
print(colnames(house))
result_df2 <- house %>%
rename_with(
~ gsub("_0_1_2$", "_early_life", .),
ends_with("_0_1_2")
)
result_df2 <- result_df2 %>%
rename_with(
~ gsub("_0_1_2_3_4_5_6_7_8_9_10$", "_whole_life", .),
ends_with("_0_1_2_3_4_5_6_7_8_9_10")
)
result_df2 <- result_df2 %>%
rename_with(
~ gsub("_3_4_5_6_7_8_9_10$","_rest_of_life",.),
ends_with("_3_4_5_6_7_8_9_10")
)
#check renaming all OK
print(colnames(result_df2))
result_df2<- result_df2 %>%
group_by(subject_id)%>%
mutate(avg_house_age = mean(house_age, na.rm = TRUE))
print(head(location))
cols_interest <- c("region_name","state","zip")
differences <-location %>%
group_by(subject_id) %>%
summarize(
across(
all_of(cols_interest),
~ n_distinct(.) > 1, # Check if there are multiple unique values
.names = "{.col}_different" # Name output columns dynamically
),
.groups = "drop"
)
proportions <- differences %>%
summarize(
across(
ends_with("_different"), # Select columns ending with "_different"
~ sum(.) / n(),          # Calculate proportion of TRUE values
.names = "{.col}_proportion" # Name output columns dynamically
)
)
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")
#early life
columns_to_check <- c("region_name","state","zip")
study_years <- c(0,1,2)
year_column <-"year_in_study"
location <- check_exposure_mode(location, columns_to_check, study_years,year_column)
#rest of life
study_years <- c(3,4,5,6,7,8,9,10)
year_column <-"year_in_study"
location <- check_exposure_mode(location, columns_to_check, study_years,year_column)
#late life
study_years <- c(0,1,2,3,4,5,6,7,8,9,10)
year_column <-"year_in_study"
location <- check_exposure_mode(location, columns_to_check, study_years,year_column)
result_df3 <- location %>%
rename_with(
~ gsub("_0_1_2$", "_early_life", .),
ends_with("_0_1_2")
)
result_df3 <- result_df3 %>%
rename_with(
~ gsub("_0_1_2_3_4_5_6_7_8_9_10$", "_whole_life", .),
ends_with("_0_1_2_3_4_5_6_7_8_9_10")
)
result_df3 <- result_df3 %>%
rename_with(
~ gsub("_3_4_5_6_7_8_9_10$","_rest_of_life",.),
ends_with("_3_4_5_6_7_8_9_10")
)
#check renaming all OK
print(colnames(result_df3))
#keep unique rows of result_df2 = house file
result_df2_unique <- result_df2 %>%
dplyr::select(-c(year_in_study,record_date))%>%
distinct(subject_id, .keep_all = TRUE)
#keep unique rows of result_df3 = location file
result_df3_unique <- result_df3 %>%
dplyr::select(-c(year_in_study,record_date))%>%
distinct(subject_id, .keep_all = TRUE)
result_combined <- result_df2_unique %>%
left_join(result_df3_unique,by="subject_id")
write.csv(result_combined,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/house_location_all_rows.csv")
# use the end_points dataset for now
end_points <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/study_endpoints.csv")
# sort dates
#get neoplasia diagnosis year month column into date format
end_points$diagnosis_year_month_date <- as.POSIXct(end_points$diagnosis_date)
end_points$diagnosis_year_month_date <- as.POSIXct(floor_date(end_points$diagnosis_year_month_date,unit="month"))
# HSA specific extraction
end_points_neoplasia <- end_points %>%
mutate(across(where(is.character), tolower))
end_HSA <- end_points_neoplasia %>% filter(grepl('hema',tracked_condition),ignore.case=TRUE)
end_HSA <- end_HSA %>%
mutate(had_HSA = 1)
#lymphoma specific
end_lymphoma <- end_points_neoplasia %>% filter(grepl('lymphoma',tracked_condition),ignore.case=TRUE)
end_lymphoma <- end_lymphoma %>%
mutate(had_lymphoma = 1)
#combine with endpoints all
end_points_all <- end_points %>%
left_join(result_combined, by="subject_id") %>%
distinct(subject_id,.keep_all=TRUE)
write.csv(end_points_all,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/endpoints_all_house_location.csv")
#end points lymphoma
end_points_lymphoma_join <- end_lymphoma %>%
left_join(result_combined,by="subject_id") %>%
distinct(subject_id,.keep_all=TRUE)
write.csv(end_points_lymphoma_join,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/endpoints_lymphoma_house_location.csv")
#end points HSA
end_points_HSA_join <- end_HSA %>%
left_join(result_combined,by="subject_id") %>%
distinct(subject_id,.keep_all=TRUE)
write.csv(end_points_HSA_join,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/endpoints_HSA_house_location.csv")
library(tidyverse)
library(ggplot2)
library(lubridate)
enviro_tidy <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/lifetime_sleep_smoking_enviro_lifestyle_enviro.csv")
enviro_tidy_abr <- enviro_tidy %>%
dplyr::select(-c(1,3:17))
#barplots for char variables:
for (col in names(enviro_tidy_abr)[-1]) {
p<- ggplot(enviro_tidy_abr, aes_string(x = col)) +
geom_bar() +
labs(title = paste("Bar plot of", col), x = col, y = "Count") +
theme_minimal()
print(p)# Print each plot
}
ggplot(enviro_tidy_abr, aes(x = hours_of_smoke_rest_of_life_total_dosage)) +
geom_histogram(bins = 20)
ggplot(enviro_tidy_abr, aes(x = hours_of_smoke_early_life_total_dosage)) +
geom_histogram(bins = 20)
ggplot(enviro_tidy_abr, aes(x = hours_of_smoke_whole_life_total_dosage)) +
geom_histogram(bins = 20)
dead_dogs <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/study_endpoints.csv")
lymphoma_dogs <- dead_dogs %>%
filter(grepl("lymphoma", tracked_condition, ignore.case = TRUE))
write.csv(lymphoma_dogs,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/lymphoma_endpoints.csv")
dead_dogs <- dead_dogs %>%
mutate(had_lymphoma = ifelse(grepl("lymphoma", tracked_condition, ignore.case = TRUE), "had_lymphoma", "no_lymphoma")) %>%
#only keeping unique IDs
distinct(subject_id, .keep_all = T) %>%
ungroup()
table(dead_dogs$had_lymphoma)
dead_subject_ids <- unique(dead_dogs$subject_id)
enviro_tidy_dead_only <- enviro_tidy_abr %>%
filter(subject_id %in% dead_subject_ids)
lymphoma_abr <- dead_dogs %>%
dplyr::select(c(subject_id,had_lymphoma,diagnosis_date))
enviro_tidy_dead_only <- enviro_tidy_dead_only %>%
left_join(lymphoma_abr,by="subject_id")
cols <- colnames(enviro_tidy_dead_only %>%
dplyr::select(c(-1,-86)))
for (col in cols) {
df_plot <- enviro_tidy_dead_only %>%
group_by(.data[[col]], had_lymphoma) %>%  # group by the current column and 'had_lymphoma'
count() %>%
group_by(had_lymphoma) %>%  # group by 'had_lymphoma' to calculate proportions within each category
mutate(proportion = n / sum(n) * 100)
# Create the plot
p <- ggplot(df_plot, aes_string(x = col, y = "proportion", fill = "had_lymphoma")) +
geom_bar(stat = "identity", position = "dodge") +  # 'dodge' to place bars side by side
labs(title = paste("Percentage of", col, "by had_lymphoma"), x = col, y = "Percentage") +
theme_minimal()
print(p)  # Explicitly print each plot
}
endpoints_house <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/endpoints_all_house_location.csv")
print(colnames(endpoints_house))
endpoints_house_abr <- endpoints_house%>%
dplyr::select(c(subject_id,house_type,area_type,asbestos_exposure, radon_exposure,68:149,152,162:189))
endpoints_house <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/endpoints_all_house_location.csv")
print(colnames(endpoints_house))
endpoints_house_abr <- endpoints_house%>%
dplyr::select(c(subject_id,house_type,area_type,asbestos_exposure, radon_exposure,68:149,152,162:171))
house_dead_only <- endpoints_house_abr %>%
filter(subject_id %in% dead_subject_ids)
house_dead_only <- house_dead_only %>%
left_join(lymphoma_abr,by="subject_id")
cols <- colnames(house_dead_only %>%
dplyr::select(c(-1,-117,-118)))
cols <- colnames(house_dead_only %>%
dplyr::select(c(-1,-99,-100)))
for (col in cols) {
df_plot <- house_dead_only %>%
group_by(.data[[col]], had_lymphoma) %>%  # group by the current column and 'had_lymphoma'
count() %>%
group_by(had_lymphoma) %>%  # group by 'had_lymphoma' to calculate proportions within each category
mutate(proportion = n / sum(n) * 100)
# Create the plot
p <- ggplot(df_plot, aes_string(x = col, y = "proportion", fill = "had_lymphoma")) +
geom_bar(stat = "identity", position = "dodge") +  # 'dodge' to place bars side by side
labs(title = paste("Percentage of", col, "by had_lymphoma"), x = col, y = "Percentage") +
theme_minimal()
print(p)  # Explicitly print each plot
}
endpoints_repro <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/endpoints_repro.csv")
print(colnames(endpoints_repro))
endpoints_repro_abr <- endpoints_repro%>%
dplyr::select(c(subject_id,sex,neuter,19:35))
repro_dead_only <- endpoints_repro_abr %>%
filter(subject_id %in% dead_subject_ids)
repro_dead_only <- repro_dead_only %>%
left_join(lymphoma_abr,by="subject_id")
cols <- colnames(repro_dead_only %>%
dplyr::select(c(-1,-21)))
for (col in cols) {
df_plot <- repro_dead_only %>%
group_by(.data[[col]], had_lymphoma) %>%  # group by the current column and 'had_lymphoma'
count() %>%
group_by(had_lymphoma) %>%  # group by 'had_lymphoma' to calculate proportions within each category
mutate(proportion = n / sum(n) * 100)
# Create the plot
p <- ggplot(df_plot, aes_string(x = col, y = "proportion", fill = "had_lymphoma")) +
geom_bar(stat = "identity", position = "dodge") +  # 'dodge' to place bars side by side
labs(title = paste("Percentage of", col, "by had_lymphoma"), x = col, y = "Percentage") +
theme_minimal()
print(p)  # Explicitly print each plot
}
endpoints_comorb<- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/endpoint_comorbidities.csv")
# Need to tidy up the NAs in certain columns to be an informative string
endpoints_comorb <- endpoints_comorb %>%
mutate(study_year_first_chronic_inflam = as.character(study_year_first_chronic_inflam)) %>%
mutate(study_year_first_chronic_inflam = replace_na(study_year_first_chronic_inflam, "no_chronic_inflam_recorded"))
endpoints_comorb <- endpoints_comorb %>%
mutate(first_chronic_inflam_condition = as.character(first_chronic_inflam_condition)) %>%
mutate(first_chronic_inflam_condition = replace_na(first_chronic_inflam_condition, "no_chronic_inflam_recorded"))
endpoints_comorb <- endpoints_comorb %>%
mutate(num_lifetime_chronic_inflam = replace_na(num_lifetime_chronic_inflam, 0))
endpoints_comorb <- endpoints_comorb %>%
mutate(all_comorbidities_ever= as.character(all_comorbidities_ever)) %>%
mutate(all_comorbidities_ever = replace_na(all_comorbidities_ever, "no_chronic_inflam_recorded"))
#remove irrel columns
endpoints_comorb <-endpoints_comorb %>%
dplyr::select(-X,-year_in_study_diagnosis,study_year_first_chronic_inflam)
endpoints_comorb<- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/endpoint_comorbidities.csv")
# Need to tidy up the NAs in certain columns to be an informative string
endpoints_comorb <- endpoints_comorb %>%
mutate(study_year_first_chronic_inflam = as.character(study_year_first_chronic_inflam)) %>%
mutate(study_year_first_chronic_inflam = replace_na(study_year_first_chronic_inflam, "no_chronic_inflam_recorded"))
endpoints_comorb <- endpoints_comorb %>%
mutate(first_chronic_inflam_condition = as.character(first_chronic_inflam_condition)) %>%
mutate(first_chronic_inflam_condition = replace_na(first_chronic_inflam_condition, "no_chronic_inflam_recorded"))
endpoints_comorb <- endpoints_comorb %>%
mutate(num_lifetime_chronic_inflam = replace_na(num_lifetime_chronic_inflam, 0))
endpoints_comorb <- endpoints_comorb %>%
mutate(all_comorbidities_ever= as.character(all_comorbidities_ever)) %>%
mutate(all_comorbidities_ever = replace_na(all_comorbidities_ever, "no_chronic_inflam_recorded"))
#remove irrel columns
endpoints_comorb <-endpoints_comorb %>%
dplyr::select(-X,-year_in_study_diagnosis,study_year_first_chronic_inflam)
enviro_repro <- enviro_tidy_dead_only %>%
left_join(repro_dead_only,by="subject_id")
#rm diagnosis date column
enviro_repro <- enviro_repro %>%
dplyr::select(-diagnosis_date.x,-diagnosis_date.y)
enviro_repro_house <- enviro_repro %>%
left_join(house_dead_only,by="subject_id")
enviro_repro_house <- enviro_repro_house %>%
dplyr::select(-diagnosis_date, - had_lymphoma.x,-had_lymphoma.y)
enviro_repro_house_comorb <- enviro_repro_house %>%
left_join(endpoints_comorb, by="subject_id") %>%
#keep only distinct rows in the join
distinct()
#how many records per patient:
num_sid <- enviro_repro_house_comorb %>%
group_by(subject_id) %>%
summarise(row_count = n())
#268 dogs with >1 row
condition_df <- enviro_repro_house_comorb %>%
group_by(subject_id) %>%
mutate(condition_number = row_number()) %>%
ungroup()
# Reshape data to wide format
enviro_repro_house_comorb_single_subjectid_wide <-condition_df %>%
pivot_wider(
id_cols = subject_id,
names_from = condition_number,
values_from = c(tracked_condition, diagnosis_date),
names_sep = "_"
)
#keep only single row for prev df where multi rows per subject id and remove diagnosis columns before merging this on
enviro_repro_house_comorb_dist <- enviro_repro_house_comorb %>%
distinct(subject_id,.keep_all = TRUE)
enviro_repro_house_comorb_dist_condition_cols <- enviro_repro_house_comorb_dist %>%
left_join(enviro_repro_house_comorb_single_subjectid_wide,by="subject_id") %>%
#remove this col as now have a col for each conditions diagnosis date
dplyr::select(-diagnosis_date)
#what to do for age for these dogs?
dog_profile <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/dog_profile.csv")
dog_profile <- dog_profile %>%
dplyr::select(c(subject_id,enrolled_date,birth_date,death_date))
enviro_repro_house_comorb_profile <- enviro_repro_house_comorb_dist_condition_cols %>%
left_join(dog_profile, by="subject_id")
#age at death
enviro_repro_house_comorb_profile  <- enviro_repro_house_comorb_profile  %>%
mutate(birth_date1 =as.POSIXct(birth_date,format="%Y-%m-%d"))
enviro_repro_house_comorb_profile  <- enviro_repro_house_comorb_profile  %>%
mutate(death_date1 =as.POSIXct(death_date,format="%Y-%m-%d"))
enviro_repro_house_comorb_profile  <- enviro_repro_house_comorb_profile  %>%
mutate(enrolled_date1 =as.POSIXct(enrolled_date,format="%Y-%m-%d"))
#age at death
enviro_repro_house_comorb_profile <- enviro_repro_house_comorb_profile %>%
mutate(age_at_death=as.numeric(difftime(as.POSIXct(enviro_repro_house_comorb_profile$death_date1), as.POSIXct(enviro_repro_house_comorb_profile$birth_date1, tz="UTC"), units="weeks"))) %>%
#convert weeks to years
mutate(age_at_death = age_at_death/52)
#age at endpoint diagnosis
enviro_repro_house_comorb_profile  <- enviro_repro_house_comorb_profile  %>%
mutate(diagnosis_date1 =as.POSIXct(diagnosis_date_1,format="%Y-%m-%d"))
enviro_repro_house_comorb_profile <- enviro_repro_house_comorb_profile %>%
mutate(age_at_endpoint_diagnosis = as.numeric(difftime(as.POSIXct(enviro_repro_house_comorb_profile$diagnosis_date1), as.POSIXct(enviro_repro_house_comorb_profile$birth_date1, tz="UTC"), units="weeks")))%>%
mutate(age_at_endpoint_diagnosis=age_at_endpoint_diagnosis/52)
#time enrolled in study
enviro_repro_house_comorb_profile <- enviro_repro_house_comorb_profile %>%
mutate(time_enrolled = as.numeric(difftime(as.POSIXct(enviro_repro_house_comorb_profile$death_date1), as.POSIXct(enviro_repro_house_comorb_profile$enrolled_date1, tz="UTC"), units="weeks")))%>%
mutate(time_enrolled=time_enrolled/52)
missing_death <- enviro_repro_house_comorb_profile %>%
dplyr::select(c(subject_id,birth_date,death_date,age_at_endpoint_diagnosis,had_lymphoma,tracked_condition_1)) %>%
filter(death_date =="")
enviro_repro_house_comorb_profile$multi_cancers_present <- 0  # Start with 0
# Specify the columns to check
columns_to_check <- c("tracked_condition_1","tracked_condition_2","tracked_condition_3","tracked_condition_4","tracked_condition_5","tracked_condition_6")
# Function to check if any cell in specified columns contains 'oma'
check_oma <- function(row) {
any(sapply(columns_to_check, function(col) {
grepl('oma', row[col], ignore.case = TRUE)
}))
}
# Apply the function to each row
enviro_repro_house_comorb_profile$multi_cancers_present <- apply(enviro_repro_house_comorb_profile, 1, check_oma)
#recode T and F
enviro_repro_house_comorb_profile$multi_cancers_present <- ifelse(enviro_repro_house_comorb_profile$multi_cancers_present == TRUE, 1, 0)
activity <-read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/GRLS_activity_modified_variables_endpoints_outof100.csv")
activity <- activity %>% dplyr::select(-c(X,public_id,tracked_condition,diagnosis_date,location,phenotype,status,tier_of_confidence,is_cause_of_death,is_recurrence,is_adjudicated)) %>%
distinct(subject_id,.keep_all = TRUE)
enviro_repro_house_comorb_profile_activity <- enviro_repro_house_comorb_profile %>%
left_join(activity,by="subject_id")
write.csv(enviro_repro_house_comorb_profile_activity,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/endpoints_demog_lifestyle_enviro_comorb.csv")
# Specify the column indices
column_indices <- c(2:87,89:97,101:194,223:228,229:243)
# Create a table for each specified column
tables <- lapply(enviro_repro_house_comorb_profile_activity[, column_indices, drop = FALSE], table)
demographics <- enviro_repro_house_comorb_profile_activity %>%
dplyr::select(c(subject_id,had_lymphoma,main_lifestyle_category,sex,neuter,age_at_neuter_years,age_at_endpoint_diagnosis, age_at_death,time_enrolled,heats_before_neutering,num_bred_before_neutering,neutered_reason,region_name_mode_whole_life,area_type))
write.csv(demographics,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/RP2_dataset1_lymphoma_demographics.csv")
View(tables)
early_years <- enviro_repro_house_comorb_profile_activity %>%
dplyr::select(c(subject_id,had_lymphoma,use_aerosol_study_years_early_life,use_air_cleaner_study_years_early_life,use_hepa_filter_study_years_early_life,use_moth_balls_study_years_early_life,use_incense_or_candles_study_years_early_life,smoke_exposure_study_years_early_life,any_treated_insects_study_years_early_life,hours_of_smoke_early_life_total_dosage,house_type_mode_early_life,area_type_mode_early_life,water_source_mode_early_life,pipes_metal_mode_early_life,pipes_plastic_mode_early_life,cooking_fuel_primary_mode_early_life,heating_fuel_primary_mode_early_life,state_mode_early_life,region_name_mode_early_life,avg_activity_duration_sy1_2,avg_activity_freq_sy1_2,avg_activity_intensity_sy1_2 ))
early_years <- enviro_repro_house_comorb_profile_activity %>%
dplyr::select(c(subject_id,had_lymphoma,use_aerosol_study_years_early_life,use_air_cleaner_study_years_early_life,use_hepa_filter_study_years_early_life,use_moth_balls_study_years_early_life,use_incense_or_candles_study_years_early_life,smoke_exposure_study_years_early_life,any_treated_insects_study_years_early_life,hours_of_smoke_early_life_total_dosage,house_type_mode_early_life,area_type_mode_early_life,water_source_mode_early_life,pipes_metal_any_mode_early_life,pipes_plastic_any_mode_early_life,cooking_fuel_primary_mode_early_life,heating_fuel_primary_mode_early_life,state_mode_early_life,region_name_mode_early_life,avg_activity_duration_sy1_2,avg_activity_freq_sy1_2,avg_activity_intensity_sy1_2 ))
write.csv(early_years,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/RP2_dataset2_lymphoma_earlyyears_enviro_lifestyle.csv")
rest_years <- enviro_repro_house_comorb_profile_activity %>%
dplyr::select(c(subject_id,had_lymphoma,use_aerosol_study_years_rest_of_life,use_air_cleaner_study_years_rest_of_life,use_hepa_filter_study_years_rest_of_life,use_moth_balls_study_years_rest_of_life,use_incense_or_candles_study_years_rest_of_life,smoke_exposure_study_years_rest_of_life,any_treated_insects_study_years_rest_of_life,hours_of_smoke_rest_of_life_total_dosage,house_type_mode_rest_of_life,area_type_mode_rest_of_life,water_source_mode_rest_of_life,pipes_metal_any_mode_rest_of_life,pipes_plastic_any_mode_rest_of_life,cooking_fuel_primary_mode_rest_of_life,heating_fuel_primary_mode_rest_of_life,state_mode_rest_of_life,region_name_mode_rest_of_life,avg_activity_freq_sy3,avg_activity_intensity_sy3 ))
write.csv(rest_years,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/RP2_dataset3_lymphoma_restyears_enviro_lifestyle.csv")
other <- enviro_repro_house_comorb_profile_activity %>%
dplyr::select(c(subject_id,had_lymphoma,multi_cancers_present,chronic_inflam_present,num_lifetime_chronic_inflam,first_chronic_inflam_condition, all_comorbidities_ever,diagnosis_after_comorb))
write.csv(other,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/RP2_dataset4_lymphoma_comorbidities.csv")
enviro_repro_house_comorb_profile_activity$heats_before_neutering
table(enviro_repro_house_comorb_profile_activity$num_bred_before_neutering)
table(enviro_repro_house_comorb_profile_activity$neutered_reason)
table(enviro_repro_house_comorb_profile$house_type_mode_early_life)
table(enviro_repro_house_comorb_profile_activity$main_lifestyle_category)
table(enviro_repro_house_comorb_profile_activity$region_name)
