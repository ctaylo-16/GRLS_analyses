---
title: "Haemangiosarcoma dog descriptive stats"
format: html
editor: visual
---

## Haemangiosarcoma GRLS cohort descriptives and MST

```{r}
library(tidyverse)
library(dplyr)
library(survival)
library(ggplot2)
library(tibble)
library(kableExtra)
#devtools::install_github("zabore/ezfun")
ezfun::set_ccf_palette("contrast")
library(lubridate)
library(ggsurvfit)
library(gtsummary)
library(tidycmprsk)
library(gtable)
#devtools::install_github("zabore/condsurv")
library(condsurv)
library(survminer)
library(cardx)
library(finalfit)
#whole grls cohort
cohort <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/HSA_cohort_all_RFs_data_tidied_from_cox.csv")
HSA_dogs <- cohort %>%
  filter(had_HSA==1)

endpoints <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/study_endpoints.csv")
#
#keeping only relevant columns from each df
HSA_dogs <- HSA_dogs %>%
  dplyr::select(c(subject_id,age_at_final_date))
endpoints <- endpoints %>%
  dplyr::select(c(subject_id,year_in_study,diagnosis_date,tracked_condition,location,phenotype,status,tier_of_confidence,is_cause_of_death))
HSA_dogs <- HSA_dogs %>%
  left_join(endpoints,by="subject_id")
#NB some HSA dogs have multi cancers - 606 rows but 490 unique IDs
#only keep haemangiosarcoma relevant rows - 502 dogs
HSA_dogs2<- HSA_dogs %>%
  filter(grepl("Hemangiosarc", tracked_condition))
#check the reason for 10 extra rows is that multi rows same dog - it is
multi_HSA <- HSA_dogs2 %>%
  add_count(subject_id, name = "count") %>%  # adds a count column while keeping all other cols
  filter(count > 1) %>%
  arrange(desc(count))


#incorp in survival time days - get date of diagnosis from endpoints and date of death from profile 
profile <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/dog_profile.csv")
profile <- profile %>%
  dplyr::select(c(subject_id,enrolled_date,death_date,is_euthanized,birth_date))

HSA_dogs2 <- HSA_dogs2 %>%
  left_join(profile,by="subject_id")

```

## Time enrolled in study, median age at enrollment

```{r}
study_times <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/HSA_study_pop_with_final_date.csv")

#link to dog profile to calc age at enrollment and time enrolled in study]

study_times_HSA_dogs2 <- profile %>% left_join(study_times, by="subject_id")


#calc difference between enrollment date and final date

#all dogs
study_times_HSA_dogs2 <- study_times_HSA_dogs2 %>%
mutate(
  start_date = as.Date(enrolled_date),
  end_date = as.Date(final_date),
  days_between = as.numeric(end_date -start_date)
)

study_times_HSA_dogs2 <- study_times_HSA_dogs2 %>%
  mutate(
    years_between = days_between / 365.25
  )

all_dogs <- study_times_HSA_dogs2 %>%
  summarise(
    median_years = median(years_between, na.rm = TRUE),
    min_years = min(years_between, na.rm = TRUE),
    max_years = max(years_between, na.rm = TRUE),
    IQR_years = IQR(years_between, na.rm = TRUE),
    q1_years = quantile(years_between, 0.25, na.rm = TRUE),
    q3_years = quantile(years_between, 0.75, na.rm = TRUE)
  )

#HSA dogs
HSA_dogs_summary <- study_times_HSA_dogs2 %>%
  filter(had_HSA==1)%>%
  summarise(
    median_years = median(years_between, na.rm = TRUE),
    min_years = min(years_between, na.rm = TRUE),
    max_years = max(years_between, na.rm = TRUE),
    IQR_years = IQR(years_between, na.rm = TRUE),
    q1_years = quantile(years_between, 0.25, na.rm = TRUE),
    q3_years = quantile(years_between, 0.75, na.rm = TRUE)
  )

#non-HSA dogs
non_HSA_dogs_summary <- study_times_HSA_dogs2 %>%
  filter(had_HSA==0)%>%
  summarise(
    median_years = median(years_between, na.rm = TRUE),
    min_years = min(years_between, na.rm = TRUE),
    max_years = max(years_between, na.rm = TRUE),
    IQR_years = IQR(years_between, na.rm = TRUE),
    q1_years = quantile(years_between, 0.25, na.rm = TRUE),
    q3_years = quantile(years_between, 0.75, na.rm = TRUE)
  )
```

Proportion of dogs still enrolled by Dec 31 2024

```{r}
#report number of dogs with Dec 31 2024 date
still_enrolled <- study_times_HSA_dogs2 %>%
  filter(final_date == "2024-12-31")
```

## Age

```{r}
non_HSA_dogs_summary_age <- cohort %>%
  filter(had_HSA==0)%>%
  summarise(
    median_years = median(age_at_final_date, na.rm = TRUE),
    min_years = min(age_at_final_date, na.rm = TRUE),
    max_years = max(age_at_final_date, na.rm = TRUE),
    IQR_years = IQR(age_at_final_date, na.rm = TRUE),
    q1_years = quantile(age_at_final_date, 0.25, na.rm = TRUE),
    q3_years = quantile(age_at_final_date, 0.75, na.rm = TRUE)
  )


HSA_dogs_summary_age <- cohort %>%
  filter(had_HSA==1)%>%
  summarise(
    median_years = median(age_at_final_date, na.rm = TRUE),
    min_years = min(age_at_final_date, na.rm = TRUE),
    max_years = max(age_at_final_date, na.rm = TRUE),
    IQR_years = IQR(age_at_final_date, na.rm = TRUE),
    q1_years = quantile(age_at_final_date, 0.25, na.rm = TRUE),
    q3_years = quantile(age_at_final_date, 0.75, na.rm = TRUE)
  )

all_HSA_dogs_summary_age <- cohort %>%
  summarise(
    median_years = median(age_at_final_date, na.rm = TRUE),
    min_years = min(age_at_final_date, na.rm = TRUE),
    max_years = max(age_at_final_date, na.rm = TRUE),
    IQR_years = IQR(age_at_final_date, na.rm = TRUE),
    q1_years = quantile(age_at_final_date, 0.25, na.rm = TRUE),
    q3_years = quantile(age_at_final_date, 0.75, na.rm = TRUE)
  )
```

## Haemangiosarcoma locations

```{r}
#these are the broader locations -cardiac, splenic, visceral, cutaneous
locations_main <- HSA_dogs2 %>%
  count(tracked_condition, name = "count") %>%
  mutate(percent = round(100 * count / sum(count), 1)) %>%
  arrange(desc(count))

#create table count of ALL locations from locations column NB. more than one location per dog
locations <- HSA_dogs2$location

# Step 1: Replace " and " with commas to standardize delimiters
locations_clean <- gsub(" and ", ", ", locations, ignore.case = TRUE)

# Step 2: Remove unwanted strings (e.g., "suspect", "presum", "likely", directional terms)
# Use regex and ignore case for better coverage
locations_clean <- tolower(locations_clean)  # convert early for consistent matching
locations_clean <- gsub("suspect[^,]*", "", locations_clean)
locations_clean <- gsub("presum[^,]*", "", locations_clean)
locations_clean <- gsub("likel[^,]*", "", locations_clean)
locations_clean <- gsub("probable[^,]*", "", locations_clean)
locations_clean <- gsub("\\bleft\\b", "", locations_clean)
locations_clean <- gsub("\\bright\\b", "", locations_clean)

# Optional: remove "mass on", "in the", etc. if those phrases occur
locations_clean <- gsub("mass on ", "", locations_clean)
locations_clean <- gsub("in the ", "", locations_clean)
locations_clean <- gsub("area of ", "", locations_clean)
locations_clean <- gsub("\\s+", " ", locations_clean)  # condense multiple spaces

# Step 3: Split into individual locations by comma
location_split <- strsplit(locations_clean, ",")

# Step 4: Trim and flatten into a vector
all_locations <- trimws(unlist(location_split))

# Step 5: Standardize common synonyms (e.g., "cardiac", "ventricle" â†’ "heart")
all_locations[all_locations %in% c("heart", "cardiac", "right atrial cavity", "ventricle", "right atrium","atrium","atrium/auricle","atrial","heart (atrium)","heart (ventricular wall)","heart (auricle)","subtle infiltration in section of atrium)","heart (mass","heart ( auricle)","ventricular free wall)","heart ( atrium)","heart ( auricle)", "near heart base","heart (atrium","heart (atrial tissue)" ,"heart (","heart base","heart; atrium","heart (interventricular septum just under the annulus of the posterior tricuspid valve leaflet)","myocardium/heart","myocardium","atrial cavity","atrio-ventricular groove", "atrium (","atrium of the heart","heart ( aricular)","heart; atrium","heart base","myocardium)","ventricle","heart ( auricle","ventricle)","auricle")] <- "heart"
all_locations[all_locations %in% c("skin (lower lip", "skin", "skin (abdomen)", "scrotum","dermal","haired skin")] <- "skin"
all_locations[all_locations %in% c("lungs", "lung", "thoracic cavity", "thorax","all lung lobes","lung.","lungs (","lungs (")] <- "lung"
all_locations[all_locations %in% c("liver", "hepatic","liver (","liver: disseminated hemangiosarcoma")] <- "liver"
all_locations[all_locations %in% c("spleen", "splenic","spleen (")] <- "spleen"
all_locations[all_locations %in% c("abdominal cavity", "abdomen")] <- "abdomen"
all_locations[all_locations %in% c("jejunum", "small intestine","intestinal serosa","intestines","small intestine (muscular wall)","small intestine (muscularis mucosa)")] <- "intestine"
all_locations[all_locations %in% c("kidneys", "kidney","kidney (possible)","bilateral kidneys"  )] <- "kidney"
all_locations[all_locations %in% c("retroperitoneal mass", "retroperitoneum ("  ,"retroperitoneal cavity","retroperitoneal","retroperitoneal space")] <- "retroperitoneum"
all_locations[all_locations %in% c("cerebellum","cerebreum","cerebrum","cerebellum)","brain (cerebrum","brain (cerebrum)")] <- "brain"
all_locations[all_locations %in% c("mesenteric adipose tissue","peripancreatic adipose","adipose tissue; cranial thigh","fibroadipose tissue:","fibroadipose tissue (","fat (mesentery?)","fat (tibial area)","adipose")] <- "adipose tissue"
all_locations[all_locations %in% c("gastric serosa","stomach (muscularis mucosa)")] <- "stomach"

all_locations[all_locations %in% c("to the urinary bladder caudal aspect of the abdomen","bladder","urinary bladder")] <- "bladder"
all_locations[all_locations %in% c("tricept","skeletal muscle/adipose tissue ","epaxial muscle","muscle","skeletal muscle/adipose tissue","muscle ( flank)","skeletal muscle")] <- "muscle"
all_locations[all_locations %in% c("adrenal")] <- "adrenal gland"
all_locations[all_locations %in% c("rib"," bone (proximal humerus)","bone (proximal humerus)","carpus","15 vertebral body","l5 vertebral body","tibial)","bone (proximal humerus)")] <- "bone"
all_locations[all_locations %in% c("muscle (diaphragm")] <- "diaphragm"
#NB skin techincally cutis
all_locations[all_locations %in% c("subcutaneous","subcutaneous mass ( flank)","lateral mid thorax","subcutis")] <- "skin"
all_locations[all_locations %in% c("adrenal glands")] <- "adrenal gland"
all_locations[all_locations %in% c("mesentery/omentum","mesenetery")] <- "mesentery"
#combine all the weird misc ones into "other" and "unknown"
all_locations[all_locations %in% c("abdomen)","abdominal fluid","abdominal mass","body wall","caudal abdominal mass","hindlimb amputation site","leg mass","mid abdomen -","mouth","mucosal lined tissue","side","shoulder mass", "shoulder/scapula","shoulder","front leg","thoaracic inlet","thoracic deep to scapula","chest","digit","abdomen")] <- "other"
all_locations[all_locations %in% c("(","masses","possibly spleen or liver","previously found in spleen","unspecified sites: tisse
","spleen previously removed","unspecified sites: tisse")] <- "unknown"


# Step 6: Remove empty strings (resulting from deleted words)
all_locations <- all_locations[all_locations != ""]

# Step 7: Create and print counts
location_counts <- sort(table(all_locations), decreasing = TRUE)
print(location_counts)



# Step 7: Create table of counts and percentages
location_counts <- sort(table(all_locations), decreasing = TRUE)

# Convert to data.frame
location_df <- as.data.frame(location_counts)
colnames(location_df) <- c("location", "count")

# Add percentage column
location_df$percent <- round(100 * location_df$count / sum(location_df$count), 1)

# View result
print(location_df)

# Combine count and percent into one column like "420 (80)"
location_df$count_percent <- paste0(location_df$count, " (", location_df$percent, ")")

# Optional: keep just location and the combined column
location_summary <- location_df[, c("location","count","count_percent", "count_percent")]

# View result
print(location_summary)
#write to csv for manuscript
write.csv(location_summary,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/GRLS_HSA_location_counts.csv")
```

Location barplot

```{r}

# Create the data
location_data <- tribble(
  ~Location, ~Number_percent,
  "spleen", "252 (23.9)",
  "cardiac", "240 (22.8)",
  "lung", "170 (16.1)",
  "liver", "155 (14.7)",
  "kidney", "59 (5.6)",
  "other", "31 (2.9)",
  "skin", "17 (1.6)",
  "omentum", "15 (1.4)",
  "adrenal gland", "14 (1.3)",
  "adipose tissue", "12 (1.1)",
  "unknown", "12 (1.1)",
  "muscle", "11 (1)",
  "brain", "9 (0.9)",
  "intestine", "9 (0.9)",
  "pancreas", "7 (0.7)",
  "bone", "6 (0.6)",
  "diaphragm", "6 (0.6)",
  "retroperitoneum", "6 (0.6)",
  "bladder", "4 (0.4)",
  "spine", "3 (0.3)",
  "stomach", "3 (0.3)",
  "thyroid", "3 (0.3)",
  "esophagus", "2 (0.2)",
  "lymph node", "2 (0.2)",
  "mesentery", "2 (0.2)",
  "spinal cord", "2 (0.2)",
  "prostate area", "1 (0.1)"
)

location_data2 <- location_data

# Extract count and percentage
location_data <- location_data %>%
  separate(Number_percent, into = c("Number", "Percent"), sep = " ", convert = TRUE) %>%
  mutate(Percent = parse_number(Percent))

# Plot
ggplot(location_data, aes(x = fct_reorder(Location, Number), y = Number)) +
  geom_col(fill = "steelblue") +
  coord_flip() +
  labs(
    title = "Distribution of Tumor Locations",
    x = NULL,
    y = "Number of Cases"
  ) +
  theme_minimal(base_size = 14)
```

```{r}
# Extract count and percentage as separate numeric columns
location_data2 <- location_data2 %>%
  separate(Number_percent, into = c("Number", "Percent"), sep = " ", convert = TRUE) %>%
  mutate(Percent = parse_number(Percent))

# Plot
ggplot(location_data2, aes(x = fct_reorder(Location, Number), y = Number)) +
  geom_col(fill = "steelblue") +
  geom_text(aes(label = paste0(Percent, "%")), 
            hjust = -0.1, size = 4) +
  coord_flip() +
  labs(
    title = "Haemangiosarcoma Locations by Frequency",
    x = NULL,
    y = "Number of Cases"
  ) +
  theme_minimal(base_size = 14) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.15)))  # extra space for labels



plot <- ggplot(location_data2, aes(x = fct_reorder(Location, Number), y = Number)) +
  geom_col(fill = "grey30", width = 0.7) +
  geom_text(aes(label = paste0(Percent, "%")), 
            hjust = -0.1, size = 4.2) +
  coord_flip() +
  labs(
    title = NULL,
    x = NULL,
    y = "Frequency of haemangiosarcoma locations"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.text = element_text(size = 12),
    axis.title.y = element_text(size = 13),
    axis.title.x = element_text(size = 13),
    plot.margin = margin(10, 30, 10, 10),
    axis.line = element_line(colour = "black")
  ) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.2)))


ggsave("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/GRLS_HSA_locations_barplot.tiff", plot = plot, width = 8, height = 6, dpi = 600)

```

## Haemangiosarcoma location MSTs

Survival time days calculation

```{r}
#funct to calc time between events
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/functions/age_calc_funct.R")

#convert char dates to date format
#HSA_dogs2$diagnosis_date2 <- as.Date(HSA_dogs2$diagnosis_date)
#HSA_dogs2$death_date2 <- as.Date(HSA_dogs2$death_date)


HSA_dogs3 <- age_calc(HSA_dogs2,"subject_id","diagnosis_date","death_date")

#across all these rows replace any negative values with 0
HSA_dogs3 <- HSA_dogs3 %>%
  mutate(across(13:16, ~ as.numeric(.))) %>%   # convert to numeric
  mutate(across(13:16, ~ ifelse(. < 0, 0, .))) # replace negatives with 0


#need to create a status variable for calc MST - status by 31/12/24. 0 = censored, 1=dead
#outcome where if do not have a death date = 0 and if do =1 
HSA_dogs3 <- HSA_dogs3 %>%
  mutate(outcome = if_else(time_between_diagnosis_date_death_date_days == "not recorded", 0, 1))



column_name <- "outcome"

HSA_dogs4 <- HSA_dogs3 %>%
  mutate(status = ifelse(is.na(.data[[column_name]]), 0, 1))

```

```{r}
splenic<- HSA_dogs4 %>%
  filter(grepl("splen",tracked_condition))
cardiac <- HSA_dogs4 %>%
  filter(grepl("card",tracked_condition))
visceral<- HSA_dogs4 %>%
  filter(grepl("visc",tracked_condition))
cutaneous<- HSA_dogs4 %>%
  filter(grepl("cut",tracked_condition))
other<- HSA_dogs4 %>%
  filter(grepl("other",tracked_condition))

```

### All HSA

```{r}
survfit(Surv(HSA_dogs4$time_between_diagnosis_date_death_date_days, HSA_dogs4$status) ~ 1, data = HSA_dogs4) %>% 
  ggsurvfit() +
  labs(
    x = "Days",
    y = "Overall survival probability"
  ) +  add_confidence_interval() +
  add_risktable()

summary(HSA_dogs4$time_between_diagnosis_date_death_date_days)

survfit(Surv(time_between_diagnosis_date_death_date_days, status) ~ 1, data = HSA_dogs4)
#probability of surviving to one year
summary(survfit(Surv(time_between_diagnosis_date_death_date_days, status) ~ 1, data = HSA_dogs4), times = 365.25)

#1 year survival rate
survfit(Surv(time_between_diagnosis_date_death_date_days, status) ~ 1, data = HSA_dogs4) %>% 
  tbl_survfit(
    times = 365.25,
    label_header = "**1-year survival (95% CI)**"
  )

quantile(HSA_dogs4$time_between_diagnosis_date_death_date_days, probs = c(0.25, 0.75), na.rm = TRUE)

```

### Splenic

```{r}
survfit(Surv(splenic$time_between_diagnosis_date_death_date_days, splenic$status) ~ 1, data = splenic) %>% 
  ggsurvfit() +
  labs(
    x = "Days",
    y = "Overall survival probability"
  ) +  add_confidence_interval() +
  add_risktable()

summary(splenic$time_between_diagnosis_date_death_date_days)
#median survival time is 5 days 

survfit(Surv(time_between_diagnosis_date_death_date_days, status) ~ 1, data = splenic)
#probability of surviving to one year
summary(survfit(Surv(time_between_diagnosis_date_death_date_days, status) ~ 1, data = splenic), times = 365.25)

#1 year survival rate
survfit(Surv(time_between_diagnosis_date_death_date_days, status) ~ 1, data = splenic) %>% 
  tbl_survfit(
    times = 365.25,
    label_header = "**1-year survival (95% CI)**"
  )

quantile(splenic$time_between_diagnosis_date_death_date_days, probs = c(0.25, 0.75), na.rm = TRUE)
range(splenic$time_between_diagnosis_date_death_date_days,na.rm = TRUE)
```

### Cardiac

```{r}
survfit(Surv(cardiac$time_between_diagnosis_date_death_date_days, cardiac$status) ~ 1, data = cardiac) %>% 
  ggsurvfit() +
  labs(
    x = "Days",
    y = "Overall survival probability"
  ) +  add_confidence_interval() +
  add_risktable()

summary(cardiac$time_between_diagnosis_date_death_date_days)
#median survival time is 5 days 

survfit(Surv(time_between_diagnosis_date_death_date_days, status) ~ 1, data = cardiac)
#probability of surviving to one year
summary(survfit(Surv(time_between_diagnosis_date_death_date_days, status) ~ 1, data = cardiac), times = 365.25)

#1 year survival rate
survfit(Surv(time_between_diagnosis_date_death_date_days, status) ~ 1, data = cardiac) %>% 
  tbl_survfit(
    times = 365.25,
    label_header = "**1-year survival (95% CI)**"
  )

quantile(cardiac$time_between_diagnosis_date_death_date_days, probs = c(0.25, 0.75), na.rm = TRUE)
range(cardiac$time_between_diagnosis_date_death_date_days,na.rm = TRUE)
```

### Visceral

```{r}
survfit(Surv(visceral$time_between_diagnosis_date_death_date_days, visceral$status) ~ 1, data = visceral) %>% 
  ggsurvfit() +
  labs(
    x = "Days",
    y = "Overall survival probability"
  ) +  add_confidence_interval() +
  add_risktable()

summary(visceral$time_between_diagnosis_date_death_date_days)

survfit(Surv(time_between_diagnosis_date_death_date_days, status) ~ 1, data = visceral)
#probability of surviving to one year
summary(survfit(Surv(time_between_diagnosis_date_death_date_days, status) ~ 1, data = visceral), times = 365.25)

#1 year survival rate
survfit(Surv(time_between_diagnosis_date_death_date_days, status) ~ 1, data = visceral) %>% 
  tbl_survfit(
    times = 365.25,
    label_header = "**1-year survival (95% CI)**"
  )

#errors with above attempts to problem solve - not working
fit <- survfit(Surv(time_between_diagnosis_date_death_date_days, status) ~ 1, data = visceral)

# Extract components
fit_df <- data.frame(
  time = fit$time,
  surv = fit$surv,
  lower = fit$lower,
  upper = fit$upper
)

# Check the structure of the new data frame
str(fit_df)

tbl_survfit(fit, times = 365.25, label_header = "**1-year survival (95% CI)**")



quantile(visceral$time_between_diagnosis_date_death_date_days, probs = c(0.25, 0.75), na.rm = TRUE)
range(visceral$time_between_diagnosis_date_death_date_days,na.rm = TRUE)
```

### Cutaneous

```{r}
survfit(Surv(cutaneous$time_between_diagnosis_date_death_date_days, cutaneous$status) ~ 1, data = cutaneous) %>% 
  ggsurvfit() +
  labs(
    x = "Days",
    y = "Overall survival probability"
  ) +  add_confidence_interval() +
  add_risktable()

summary(cutaneous$time_between_diagnosis_date_death_date_days)
#median survival time is 5 days 

survfit(Surv(time_between_diagnosis_date_death_date_days, status) ~ 1, data = cutaneous)
#probability of surviving to one year
summary(survfit(Surv(time_between_diagnosis_date_death_date_days, status) ~ 1, data = cutaneous), times = 365.25)

#1 year survival rate
survfit(Surv(time_between_diagnosis_date_death_date_days, status) ~ 1, data = cutaneous) %>% 
  tbl_survfit(
    times = 365.25,
    label_header = "**1-year survival (95% CI)**"
  )

quantile(cutaneous$time_between_diagnosis_date_death_date_days, probs = c(0.25, 0.75), na.rm = TRUE)
range(cutaneous$time_between_diagnosis_date_death_date_days,na.rm = TRUE)
```

### Other

```{r}
survfit(Surv(other$time_between_diagnosis_date_death_date_days, other$status) ~ 1, data = other) %>% 
  ggsurvfit() +
  labs(
    x = "Days",
    y = "Overall survival probability"
  ) +  add_confidence_interval() +
  add_risktable()

summary(other$time_between_diagnosis_date_death_date_days)
#median survival time is 5 days 

survfit(Surv(time_between_diagnosis_date_death_date_days, status) ~ 1, data = other)
#probability of surviving to one year
summary(survfit(Surv(time_between_diagnosis_date_death_date_days, status) ~ 1, data = other), times = 365.25)

#1 year survival rate
survfit(Surv(time_between_diagnosis_date_death_date_days, status) ~ 1, data = other) %>% 
  tbl_survfit(
    times = 365.25,
    label_header = "**1-year survival (95% CI)**"
  )
```

### Combined KM survival curve plot for all and all locations individual

```{r}
HSA_dogs4 <- HSA_dogs4 %>%
  mutate(cancer_group = recode(tracked_condition,
                               'Hemangiosarcoma - visceral'="Visceral",
                               'Hemangiosarcoma - splenic'= "Splenic",
                               'Hemangiosarcoma - cardiac'="Cardiac",
                               'Hemangiosarcoma - cutaneous'="Cutaneous",
                               'Hemangiosarcoma - other/not specified'="Other")
  )#


#set levels for cancer_group
HSA_dogs4 <- HSA_dogs4%>%
  mutate(cancer_group = factor(cancer_group, levels = c("Splenic","Cardiac"  ,"Visceral", "Cutaneous","Other")))

# Fit the survival model
fit <- survfit(Surv(time_between_diagnosis_date_death_date_days, status) ~ cancer_group, data = HSA_dogs4)

# Plot the Kaplan-Meier curves
ggsurvplot(fit, data = HSA_dogs4, palette = "Dark2", risk.table = TRUE)



library(RColorBrewer)

KM_plot_4 <- ggsurvplot(
  fit, 
  data = HSA_dogs4,
  palette = brewer.pal(n = 5, name = "Set1"),  # Use a scientific palette
  conf.int = TRUE,  # Add confidence intervals
  conf.int.alpha = 0.1,  # Adjust transparency (0 = fully transparent, 1 = fully opaque)
  risk.table = FALSE,  # Dont show risk table
  ggtheme = theme_minimal(),  # Use a clean theme for manuscripts
  legend.title = "Cancer Type",
  xlab = "Time (Days)",
  ylab = "Survival Probability"
)

KM_plot_4



ggsave(filename = "C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/km_hsa_grls.svg", plot = KM_plot_4$plot, width = 15, height = 10, dpi = 300)

ggsave(filename = "C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/km_hsa_grls.pdf", plot = KM_plot_4$plot, width = 15, height = 10, dpi = 300)


ggsave(filename = "C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/km_hsa_grls.tif", plot = KM_plot_4$plot, width = 15, height = 10, dpi = 300)



#remove "other category from plot as fairly uninformative
HSA_dogs5 <- HSA_dogs4 %>%
  filter(cancer_group != "Other")
fit <- survfit(Surv(time_between_diagnosis_date_death_date_days, status) ~ cancer_group, data = HSA_dogs5)
library(RColorBrewer)

KM_plot_5 <- ggsurvplot(
  fit, 
  data = HSA_dogs5,
  palette = brewer.pal(n = 5, name = "Set1"),  # Use a scientific palette
  conf.int = TRUE,  # Add confidence intervals
  conf.int.alpha = 0.1,  # Adjust transparency (0 = fully transparent, 1 = fully opaque)
  risk.table = FALSE,  # Dont show risk table
  ggtheme = theme_minimal(),  # Use a clean theme for manuscripts
  legend.title = "Cancer Type",
  xlab = "Time (Days)",
  ylab = "Survival Probability"
)

KM_plot_5



ggsave(filename = "C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/km_hsa_grls_no_other.svg", plot = KM_plot_5$plot, width = 15, height = 10, dpi = 300)

ggsave(filename = "C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/km_hsa_grls_no_other.pdf", plot = KM_plot_5$plot, width = 15, height = 10, dpi = 300)


ggsave(filename = "C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/km_hsa_grls_no_other.tif", plot = KM_plot_5$plot, width = 15, height = 10, dpi = 300)

```

## Incidence per 100 dog years

Use profile dataset to calculate time between enrolled date and death_date OR 31st Dec 2024 if not dead yet

```{r}
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/functions/age_calc_funct.R")

#add death date 31/12/24 for all dogs with no death date recorded into death_date_2
profile <- profile %>%
  mutate(death_date_2 = if_else(death_date == "", "2024-12-31", death_date))
time_in_study <- age_calc(profile,"subject_id","enrolled_date","death_date_2")

#as numeric
time_in_study$time_between_enrolled_date_death_date_2_years <-as.numeric(time_in_study$time_between_enrolled_date_death_date_2_years)

# Sum total dog-years
total_dog_years <- sum(time_in_study$time_between_enrolled_date_death_date_2_years, na.rm = TRUE)

# Number of cases
cases <- 490

# Incidence rate per 100 dog-years
incidence_rate <- (cases / total_dog_years) * 100

incidence_rate

#95%CI 
# Calculate 95% CI using Poisson distribution
alpha <- 0.05

lower_limit <- 0.5 * qchisq(alpha / 2, 2 * cases)   # lower bound for cases
upper_limit <- 0.5 * qchisq(1 - alpha / 2, 2 * (cases + 1)) # upper bound for cases

lower_rate <- (lower_limit / total_dog_years) * 100
upper_rate <- (upper_limit / total_dog_years) * 100

# Print results
cat("Incidence rate per 100 dog-years:", round(incidence_rate, 3), "\n")
cat("95% CI:", round(lower_rate, 3), "to", round(upper_rate, 3), "\n")
```
