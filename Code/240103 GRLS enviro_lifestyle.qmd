---
title: "GRLS enviro"
format: html
editor: visual
---

## Environmental exposures for all endpoints

Several datasets available from GRLS questionaires:

-   environment_conditions - binary YN did they use X potential exposure chemical from O questrionaire

-   environment_sleep_location - free text on bedding/crate/bed/furniture and where dogs slept

-   

```{r}
library(tidyverse)
library(ggplot2)
library(lubridate)
#exposures dataset
environment_exposures<-read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/environment_conditions.csv",na.strings=c ("","NA"))
environment_exposures <- environment_exposures %>% mutate(across(where(is.character), tolower))
sleep_environment <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/environment_sleep_location.csv",na.strings=c("","NA"))
sleep_environment <- sleep_environment %>% mutate(across(where(is.character), tolower))

```

indoors exposures =

'use_aerosol','use_air_cleaner','use_hepa_filter,'use_moth_balls','use_incense_or_candles','smoke_exposure'

outside house exposures=

'any_treated_weeds','any_treated_insects','any_treated_fertilizer'

## Environmental exposures creating binary variables

### Indoors

```{r}
#indoor variables to keep
indoors <- environment_exposures %>% select(c(subject_id,year_in_study,record_date,use_aerosol,use_air_cleaner,use_hepa_filter,use_moth_balls,use_incense_or_candles,smoke_exposure))
##create a 2nd variable for each of the 6 variables for exposure to that ever eg. aerosol ever Y N
aerosol <- environment_exposures %>% 
  group_by(subject_id) %>%
  mutate(aerosol_ever = if_else(any(use_aerosol == 1), 1, 0))

#exposures ever for all of the indoors variables
environment_exposures_2 <- environment_exposures %>% 
  group_by(subject_id) %>%
#go across each column and if the subject has a 1 in any of its rows for each column then put it as a 1 in the new column else it is a 0
  mutate(across(use_aerosol:smoke_exposure,~if_else(any(.==1),1,0),.names="ever_{.col}")) %>% ungroup()

#check with histogram these exposures are more than all 1s
#relevant variables
variables <- environment_exposures_2 %>% 
  select(c(ever_use_aerosol,ever_use_air_cleaner,
         ever_use_hepa_filter,ever_use_moth_balls,
         ever_use_incense_or_candles,ever_smoke_exposure))
variables <- variables %>% 
  mutate(across(everything(), as.character))%>%
  mutate_if(is.character, as.factor)
#now plot
gathered_data <- variables %>%
  gather(key = "column_name", value = "value")

#bar plot of binary variables
binary_var <- ggplot(gathered_data, aes(x = factor(value), fill = factor(value), group = interaction(column_name, value))) +
  geom_bar(position = "dodge", color = "black") +
  facet_wrap(~column_name, scales = "free_x", ncol = 3) +
  labs(title = "Breakdown of variable values environmental locations",
       x = "Value",
       y = "Count") +
  theme_minimal()
binary_var

# 

```

### Outdoors

```{r}
#outdoors variables to keep
outdoors <- environment_exposures %>% select(c(subject_id,year_in_study,record_date,any_treated_weeds,any_treated_insects,any_treated_fertilizer))
##create a 2nd variable for each of the 6 variables for exposure to that ever eg. aerosol ever Y N

#exposures ever for all of the outdoors variables
environment_exposures_out <- outdoors %>% 
  group_by(subject_id) %>%
#go across each column and if the subject has a 1 in any of its rows for each column then put it as a 1 in the new column else it is a 0
  mutate(across(any_treated_weeds:any_treated_fertilizer,~if_else(any(.==1),1,0),.names="ever_{.col}")) %>% ungroup()

#check with histogram these exposures are more than all 1s
#relevant variables
variables <- environment_exposures_out %>% 
  select(c(any_treated_weeds,any_treated_insects,
           any_treated_fertilizer))
variables <- variables %>% 
  mutate(across(everything(), as.character))%>%
  mutate_if(is.character, as.factor)
#now plot
gathered_data <- variables %>%
  gather(key = "column_name", value = "value")

#bar plot of binary variables
binary_var <- ggplot(gathered_data, aes(x = factor(value), fill = factor(value), group = interaction(column_name, value))) +
  geom_bar(position = "dodge", color = "black") +
  facet_wrap(~column_name, scales = "free_x", ncol = 3) +
  labs(title = "Breakdown of variable values environmental locations",
       x = "Value",
       y = "Count") +
  theme_minimal()
binary_var
```

```{r}
# combine indoors and outdoors (cant combine sleeping as is different length)
indoors_outdoors <- environment_exposures %>% select(c(subject_id,year_in_study,record_date,use_aerosol,use_air_cleaner,use_hepa_filter,use_moth_balls,use_incense_or_candles,smoke_exposure,hours_of_smoke,any_treated_weeds,any_treated_insects,any_treated_fertilizer))

#set indoors outdoors date column as date then parse year from it
indoors_outdoors$date_2 <-parse_date_time(indoors_outdoors$record_date,"ym")
#parse year from
indoors_outdoors <- indoors_outdoors %>% mutate(exposure_year = as.numeric(format(date_2, "%Y")))
```

Now need to do for:

-   exposure in the 5 y prior to endpoint

-   exposure in the 3 y prior to endpoint

-   exposure in the 1 y prior to endpoint

NB. this is only for endpoint dataset which excludes \~1000 dogs still (have not died yet)

Load in endpoint file:

```{r}
# use the end_points dataset for now 
end_points<- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/data version Feb 2024/study_endpoints.csv")
end_points2 <- end_points
#get neoplasia diagnosis year month column into date format - check its in YMD or in MDY and if is split by - or /
end_points2$diagnosis_year_month_date <- as.Date(end_points2$diagnosis_date, format = "%m/%d/%Y")
# create a year column in  file so can do calculations on year (no point being more precise as questionaire done annually and may not match diagnosis time)
end_points2$diagnosis_year <- as.numeric(format(end_points2$diagnosis_year_month_date,"%Y"))

# set to month level (not day of month) = all on 1st day of month
end_points2$diagnosis_year_month_date2 <- as.POSIXct(floor_date(end_points2$diagnosis_year_month_date,unit="month"))

# get year month bit from column
# set to month level (not day of month) = all on 1st day of month
end_points2$diagnosis_year_month <- format(end_points2$diagnosis_year_month_date, "%Y-%m")

```

### Keep the last recorded endpoint record for each patient only

```{r}
end_points2 <- end_points2 %>%
  group_by(subject_id)%>%
  filter(diagnosis_year_month_date2 == max(diagnosis_year_month_date2)) %>%      # Filter for the most recent date in each group
  ungroup()     
```

### Exposure in 5y prior to endpoint

```{r}
#read in function file for all GRLS functions:
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")

#new dataframe to combine  diagnosis date and exposure
end_points2 <- end_points2 %>%
  select(c(subject_id,diagnosis_year_month,diagnosis_year,diagnosis_year_month_date2))
#delete rows with NA of record date in it in the indoors_outdoors
indoors_outdoors2 <- indoors_outdoors %>%
  filter(!is.na(record_date))
#join records - do it this way so that each of the years of study for enviro exposures are retained 
exposure <- left_join(indoors_outdoors2,end_points2,by="subject_id")

#then fill in all rows for that patient with its diagnosis date (or else lose all the rwos except 1 for each dog)
exposure <- exposure %>%
  group_by(subject_id)%>%
  fill(diagnosis_year_month,.direction="downup")
exposure <- exposure %>%
  group_by(subject_id)%>%
  fill(diagnosis_year,.direction="downup")
exposure <- exposure %>%
  group_by(subject_id)%>%
  fill(diagnosis_year_month_date2,.direction="downup")


end_points2 <- years_prior_to(end_points2,diagnosis_year,5)
# Specify the columns to check
columns_to_check <- c("use_aerosol", "use_air_cleaner", "use_hepa_filter",
                       "use_moth_balls", "use_incense_or_candles", "smoke_exposure",
                       "any_treated_weeds", "any_treated_insects", "any_treated_fertilizer")

#code to check for all relevant columns 
exposure_years <-5
merged_df <- check_exposure(exposure, columns_to_check, diagnosis_year, exposure_years)
```

```         
```

### Exposure in 3y prior to diagnosis

```{r}
#  apply check exposure function
columns_to_check <- c("use_aerosol", "use_air_cleaner", "use_hepa_filter",
                       "use_moth_balls", "use_incense_or_candles", "smoke_exposure",
                       "any_treated_weeds", "any_treated_insects", "any_treated_fertilizer")

exposure_years <- 3

result_df <- check_exposure(merged_df, columns_to_check, diagnosis_year, exposure_years)
```

### Exposure in 1y prior to diagnosis

```{r}
# apply check exposure function
columns_to_check <- c("use_aerosol", "use_air_cleaner", "use_hepa_filter",
                       "use_moth_balls", "use_incense_or_candles", "smoke_exposure",
                       "any_treated_weeds", "any_treated_insects", "any_treated_fertilizer")

exposure_years <- 1

result_df <- check_exposure(result_df, columns_to_check, diagnosis_year, exposure_years)
```

### Exposure in early years of life (SY1-2)

```{r}

#read in function file for all GRLS functions:
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")


# apply check exposure function
columns_to_check <- c("use_aerosol", "use_air_cleaner", "use_hepa_filter",
                       "use_moth_balls", "use_incense_or_candles", "smoke_exposure",
                       "any_treated_weeds", "any_treated_insects", "any_treated_fertilizer")

study_years <- c(0,1,2)

year_column <-"year_in_study"


result_df<- check_exposure2(result_df, columns_to_check, study_years,year_column)
    

```

### Exposure in mid-later years (SY3+)

```{r}
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")

enviro_early <- environment_exposures_2 %>%
  filter(year_in_study ==3 |year_in_study ==4 |year_in_study ==5|year_in_study ==6|year_in_study ==7|year_in_study ==8|year_in_study ==9|year_in_study ==10)



# apply check exposure function
columns_to_check <- c("use_aerosol", "use_air_cleaner", "use_hepa_filter",
                       "use_moth_balls", "use_incense_or_candles", "smoke_exposure",
                       "any_treated_weeds", "any_treated_insects", "any_treated_fertilizer")

study_years <- c(3,4,5,6,7,8,9,10)

year_column <-"year_in_study"


result_df <- check_exposure2(result_df, columns_to_check, study_years,year_column)
    
#count how many years exposed for (sum up the 1s)
```

### Exposure over whole life

```{r}
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")

# apply check exposure function
columns_to_check <- c("use_aerosol", "use_air_cleaner", "use_hepa_filter",
                       "use_moth_balls", "use_incense_or_candles", "smoke_exposure",
                       "any_treated_weeds", "any_treated_insects", "any_treated_fertilizer")

study_years <- c(0,1,2,3,4,5,6,7,8,9,10)

year_column <-"year_in_study"


result_df <- check_exposure2(result_df, columns_to_check, study_years,year_column)
```

Tidy column outputs from these functions:

Want to recode study years 0,1,2,3,4,5,6,7,8,9,10 = whole study period, 0,1,2 = early life, 3,4,5,6,7,8,9,10 = rest of life

```{r}
print(colnames(result_df))

result_df3 <- result_df %>%
    rename_with(
      ~ gsub("_0_1_2$", "_early_life", .), 
      ends_with("_0_1_2")
    ) 

result_df3 <- result_df3 %>%
  rename_with(
      ~ gsub("_0_1_2_3_4_5_6_7_8_9_10$", "_whole_life", .), 
      ends_with("_0_1_2_3_4_5_6_7_8_9_10")
    ) 
  
result_df3 <- result_df3 %>%
    rename_with(
      ~ gsub("_3_4_5_6_7_8_9_10$","_rest_of_life",.),
      ends_with("_3_4_5_6_7_8_9_10")
    )
#check renaming all OK
print(colnames(result_df3))

```

## Smoke exposure

#### Calculate hours of smoke exposure before diagnosis:

```{r}

#remove rows that say see detail rows as these are meaningless - this may have been done in an earlier tidying step
smoking_df <- result_df3%>%
  filter(!grepl("see detail rows", hours_of_smoke))
#convert column to numeric now
smoking_df <- smoking_df %>% 
  mutate(hours_of_smoke= as.numeric(hours_of_smoke))

#create a record_year variable 
#had to use lubridate not as.POSIX for getting character string into date
smoking_df <- smoking_df %>% 
  mutate(record_date2=ym(record_date)) %>%
  mutate(record_year = as.numeric(format(record_date2, "%Y")))
  
# function to calculate hours of smoke exposed to prior to diagnosis 
#dosage function applied 
smoking_df2 <- exposure_dosage(smoking_df,"hours_of_smoke","record_year","diagnosis_year")


#check if any records lost
#not_in_2 <- setdiff(exposure$subject_id,smoking_df2$subject_id)

```

Could also create a further function to calculate dosage 1,3,5y before diagnosis or similar - if needed.

### Hours of smoke exposure SY1-2

```{r}
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")


study_years <- c(0,1,2)
smoking_df2 <- exposure_dosage2(smoking_df2,"hours_of_smoke",study_years)


```

### Hours of smoke exposure SY3

```{r}
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")


study_years <- c(3,4,5,6,7,8,9,10)
smoking_df2 <- exposure_dosage2(smoking_df2,"hours_of_smoke",study_years)

```

### Lifetime hours of smoke exposure

```{r}
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")


study_years <- c(0,1,2,3,4,5,6,7,8,9,10)
smoking_df2 <- exposure_dosage2(smoking_df2,"hours_of_smoke",study_years)

```

```{r}
print(colnames(smoking_df2))
```

Tidy column names

```{r}
smoking_df2 <- smoking_df2 %>%
  rename("hours_of_smoke_early_life_total_dosage"= "hours_of_smoke_0_1_2_total_dosage") %>%
  rename("hours_of_smoke_rest_of_life_total_dosage" = "hours_of_smoke_3_4_5_6_7_8_9_10_total_dosage") %>%
  rename("hours_of_smoke_whole_life_total_dosage"= "hours_of_smoke_0_1_2_3_4_5_6_7_8_9_10_total_dosage")

print(colnames(smoking_df2))
```

## Sleep location

NB. Lots of dogs have multiple 'specific_sleep_location' for same record year. Not sure how of interest specific sleep location is so for now will just do sleep location in previous 5/3/1y

```{r}
sleep <- sleep_environment %>% select(c(subject_id,year_in_study,record_date,sleep_location,specific_sleep_location))


#set indoors outdoors date column as date then parse year from it
sleep$record_date2 <-parse_date_time(sleep$record_date,"ym")
#parse year from
sleep <- sleep %>% 
  mutate(exposure_year = as.numeric(format(record_date2, "%Y")))

#how many sleep locations are there
table(sleep_environment$sleep_location)

#some patients have duplicate rows within a year ?/there are no differences between the rows so going to remove all rows where the row above is identical

sleep <- unique(sleep)

# 3 locations , need to create 3 columns with a Y/N for each location before then calculating exposure to it

# Specify outcomes for the function
desired_outcomes <- c("in the garage", "in the house", "outside")

# Applying the function
sleep2 <- split_column(sleep, sleep$sleep_location, desired_outcomes)

```

Can easily apply the exposed every Y N in 1,3,5y prior to diagnosis function for the environmental exposures above but perhaps more meaningful would be to determine some sort of % of each location in the 1,3,5y prior to diagnosis eg. 80% of sleep locations in garage 5y prior to diagnosis OR report the majority location in the 1,3,5,y prior to diagnosis

5,3,1y Y N exposed:

```{r}
#join sleep to our smoking dataframe to then calculate sleep location information 
sleep_smoking_enviro <- left_join(smoking_df2,sleep2,by=c("subject_id","year_in_study"))

#check no  patients lost in this 
#again check all remain 
not_in_2 <- setdiff(sleep_smoking_enviro$subject_id,end_points2$subject_id)


# remove the .x suffix
sleep_smoking_enviro <- sleep_smoking_enviro %>%
  rename_at('exposure_year.x',~'exposure_year')
#5,3,1y variables
#5
columns_to_check <- c("in the garage_YN","in the house_YN","outside_YN")

exposure_years <- 5

result_df4 <- check_exposure(sleep_smoking_enviro, columns_to_check, diagnosis_year, exposure_years)
#3y
columns_to_check <- c("in the garage_YN","in the house_YN","outside_YN")

exposure_years <- 3

result_df4 <- check_exposure(result_df4, columns_to_check, diagnosis_year, exposure_years)
#1
columns_to_check <- c("in the garage_YN","in the house_YN","outside_YN")

exposure_years <- 1

result_df4 <- check_exposure(result_df4, columns_to_check, diagnosis_year, exposure_years)
```

Calculate early life, rest of life and later life exposure

```{r}

#read in function file for all GRLS functions:
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")


# apply check exposure function
columns_to_check <- c("in the garage_YN","in the house_YN","outside_YN")

study_years <- c(0,1,2)

year_column <-"year_in_study"


result_df4<- check_exposure2(result_df4, columns_to_check, study_years,year_column)
    

```

### Exposure in mid-later years (SY3+)

```{r}
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")

enviro_early <- environment_exposures_2 %>%
  filter(year_in_study ==3 |year_in_study ==4 |year_in_study ==5|year_in_study ==6|year_in_study ==7|year_in_study ==8|year_in_study ==9|year_in_study ==10)



# apply check exposure function
columns_to_check <- c("in the garage_YN","in the house_YN","outside_YN")

study_years <- c(3,4,5,6,7,8,9,10)

year_column <-"year_in_study"


result_df4 <- check_exposure2(result_df4, columns_to_check, study_years,year_column)
    
```

### Exposure over whole life

```{r}
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")

# apply check exposure function
columns_to_check <- c("in the garage_YN","in the house_YN","outside_YN")

study_years <- c(0,1,2,3,4,5,6,7,8,9,10)

year_column <-"year_in_study"


result_df4 <- check_exposure2(result_df4, columns_to_check, study_years,year_column)
```

Tidy column outputs from these functions:

Want to recode study years 0,1,2,3,4,5,6,7,8,9,10 = whole study period, 0,1,2 = early life, 3,4,5,6,7,8,9,10 = rest of life

```{r}
print(colnames(result_df4))

result_df5 <- result_df4 %>%
    rename_with(
      ~ gsub("_0_1_2$", "_early_life", .), 
      ends_with("_0_1_2")
    ) 

result_df5 <- result_df5 %>%
  rename_with(
      ~ gsub("_0_1_2_3_4_5_6_7_8_9_10$", "_whole_life", .), 
      ends_with("_0_1_2_3_4_5_6_7_8_9_10")
    ) 
  
result_df5 <- result_df5 %>%
    rename_with(
      ~ gsub("_3_4_5_6_7_8_9_10$","_rest_of_life",.),
      ends_with("_3_4_5_6_7_8_9_10")
    )
#check renaming all OK
print(colnames(result_df5))

```

### Majority sleep location

(NB. this is not done for the 5y prior to diagnosis, just across all records for each dog - could ammend this for diagnosis if seems important)

Still to do:

-   sort indexing for this code (rather than +1, need to make sure it correctly indexes)

-   apply it to the 5y possible exposure gap

-   turn into a function to apply to wider range of exposure variables (e.g. all the weird bedding types etc, different kinds of activity etc)

```{r}
#initially checking that there is variation in locaiton for the dogs sleep location
multi_location_count <- result_df5 %>%
  group_by(subject_id,sleep_location) %>%
   summarise(count = n())
print(multi_location_count)
#there is, although infrequent 
# edit above code to determine majority location
columns_to_count <- c("in the garage_YN","in the house_YN","outside_YN")
# initial code before function created
#result_df2 <- result_df %>%
  #group_by(subject_id) %>%
#  summarise(across(all_of(columns_to_count), ~sum(. == 1, na.rm = TRUE))) %>%  # Count occurrences of 1s in specified columns
 # mutate(majority_location = names(.)[max.col(select(., all_of(columns_to_count)))+1])
#which is max of the columns in list and gives numeric index of maximal column in the list of 3 columns, add the +1 so that when added back to main df it fits in with the whole index 

#remove the YN of column name in the rows
#result_df2$majority_location <- gsub("_YN$", "", result_df2$majority_location)



result_df6 <- majority_location(result_df5,columns_to_count)
```

```{r}
#re add majority location information back to main df once have kept the relevant columns
result_df6 <- result_df6%>%
  select(c(subject_id,majority_location))

# renaming majority sleep column whilst cant work dynamic col naming aspect of majority location function
result_df6 <- result_df6 %>%
  rename_at('majority_location',~'majority_sleep_location_lifetime')


sleep_smoking_enviro_all <- merge(result_df5,result_df6,by="subject_id")



```

## Location classifying

```{r}
enviro_time <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/environment_spend_time_location.csv",na.strings=c("","NA"))
enviro_time <- enviro_time %>% mutate(across(where(is.character), tolower))
```

```{r}
enviro_time <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/environment_spend_time_location.csv",na.strings=c("","NA"))
enviro_time <- enviro_time %>% mutate(across(where(is.character), tolower))

```

These variables are all very not mutually exclusive eg. carpet vs lino flooring indoors - possibly good component for PCA (already effectively One Hot Encoded for this). or could also modify majority location % location functions from above

Can create variables something along the lines of *exposure to each flooring type/outdoor location/furniture type in the previous X (5,3,1y) prior to diagnosis*

```{r}

```

## Wash groom products?

```{r}

```

## Activity details

-   analyses for this in seperate activity script
-   3 files- activity_details_through_SY2.csv, activity_details_SY3_beyond.csv and activity_overview.csv
    -   all dogs have study year 1-2 records
    -   missing records for \~400 dogs in years 3+ records
    -   overview all records present

```{r}
#activity data from study y 1 and 2
activity_sy1_2 <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/activity_details_through_SY2.csv")
#check # dogs in it
act_1_2 <- unique(activity_sy1_2$subject_id)
#activity data from study y 3 + 
activity_sy3_beyond <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/activity_details_SY3_beyond.csv")
act_3_plus<- unique(activity_sy3_beyond$subject_id)
#activity overview dataset
activity_overview<- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/activity_overview.csv")
act_over<-unique(activity_overview$subject_id)
```

Summary/overview of what activity datasets contain:

-   col names of each

SY1-2

-   details on aerobic activity length,pace frequency and how often walked

-   enrolment and 2y beyond this in this dataset -

SY3+

-   activity type and how often and how long

-   surface activity occurs on (eg.grass, concrete)

-   total time spent doing activity

-   3y till end of life

Overview

-   swimming activities

-   sun exposure

```{r}
print(colnames(activity_sy1_2))
print(colnames(activity_sy3_beyond))
print(colnames(activity_overview))
```

Check number of records average for each dataset:

-   sy1_2 median is 3 = quite complete records
-   sy3 median 7 = also quite complete
-   overview median 9 = also quite com\[plete - this one seems to cover whole study period ?

```{r}
sy1_2 <- activity_sy1_2 %>%
  group_by(subject_id) %>%
  summarise(count = n()) %>%  # Count rows per subject_id
  summarise(
    median_count = median(count),
    mean_count = mean(count)
  )

print(sy1_2)


sy3 <- activity_sy3_beyond%>%
  group_by(subject_id) %>%
  summarise(count = n()) %>%  # Count rows per subject_id
  summarise(
    median_count = median(count),
    mean_count = mean(count)
  )


print(sy3)


overview <- activity_overview%>%
  group_by(subject_id) %>%
  summarise(count = n()) %>%  # Count rows per subject_id
  summarise(
    median_count = median(count),
    mean_count = mean(count)
  )


print(overview)
```

## Lifestyle/job/function

Read in dataset on what the dog is primarily used for (e.g. showing, breeding, agility):

```{r}
lifestyle <-read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Data/lifestyle.csv",na.strings=c ("","NA"))
```

What are all the categories of lifestyle? and what are most common ones?

All lifestyle categories (41):

```{r}
lifestyle_categories <-unique(lifestyle$lifestyle)
print(lifestyle_categories)
```

Most common (NB. this is per row of dataset, not by only keeping one value for each dog):

```{r}
multi_lifestyle_count <- lifestyle %>%
  group_by(lifestyle) %>%
   summarise(count = n()) %>%
  arrange(desc(count))

print(multi_lifestyle_count)
```

How many dogs have \>1 lifestyle class?

-   Most, 2925 of the \~3044 dogs

```{r}
dogs_2_or_more_class <- lifestyle %>%
  group_by(subject_id)%>%
    summarise(unique_lifestyles = n_distinct(lifestyle), # Count unique lifestyles
            .groups = 'drop')  %>%
  filter(unique_lifestyles >=2)

print((dogs_2_or_more_class))
```

```{r}

###


unique_lifestyles_eachdog <-lifestyle %>%
  group_by(subject_id) %>%                                   # Group by subject_id
  summarise(
    lifestyles = str_c(unique(lifestyle), collapse = ", "), # Concatenate unique lifestyles
    count = n_distinct(lifestyle),                           # Count unique lifestyles
    .groups = 'drop'                                        # Drop grouping after summarising
  )

print(unique_lifestyles_eachdog$lifestyles)
```

Number of unique combined ones (looks like lots are "Companion/Pet, None")

```{r}
unique_lifestyles <- unique_lifestyles_eachdog %>%
  group_by(lifestyles) %>%
     summarise(count = n()) %>%
  arrange(desc(count))

print(unique_lifestyles)
```

-   Almost all have 'companion/pet' as a category = 2962

```{r}
unique_lifestyles_with_null <- lifestyle %>%
  group_by(subject_id, lifestyle) %>%               # Group by subject_id and lifestyle
 summarise(count = n(), .groups = 'drop') %>%      # Count occurrences (optional, can be omitted)
 mutate(row = row_number()) %>%                     # Create a row number for each unique lifestyle
 pivot_wider(names_from = lifestyle, values_from = lifestyle, 
           values_fn = list(lifestyle = list),   # Create lists of lifestyles
            values_fill = list(lifestyle = NA)) %>% # Fill missing values with NA
  select(-row)    

companion_pet <- unique_lifestyles_with_null %>%
  filter(`companion/pet` == "companion/pet") 

```

How to group lifestyles?

-   since almost all have companion/pet recorded might be more meaningful to recode as:

    -   Companion/Pet only = "Companion/Pet" and "Companion/Pet, None"

    -   therapy role= therapy dog, service dog, greeter, retired from AKC activities, blood donor, ambassador

    -   breeding role = breeder and retired breeder

    -   competitive role = dog athlete, show, agility, obedience, rally, field trials, hunt test

    -   hunting role = dock diving, barn hunt, scent work, tracking work, search and rescue

-   alternatively could go broader and just have companion/pet, hunting, competition?

-   other possibles - group by majority recorded lifestyle over lifetime records? - think this is perhaps most logical

Grouping:

```{r,eval=FALSE}
#not currently in camel case but in case is:
companion <- c("Companion/Pet")

therapy <-c("Therapy dog","Greeter","Service dog","Blood Donor","Ambassador","Service dog, Therapy dog")
breeding <-c("Breeder","Retired Breeder")
competitive <-c("Dog Athlete","Show","Agility","Field Trials", "Rally","Field Trials, Obedience", "Barn Hunt, Rally, Scent Work","Agility, Companion/Pet, Rally, Tracking","Agility, Scent Work","Agility, Hunt Test, Obedience, Scent Work",
                "Hunt Test, Obedience, Scent Work","Agility, Companion/Pet, Hunt Test", "Obedience", "Hunt Test", "Actor/Model", "Dock Diving","Dock Diving, Scent Work","Barn Hunt","Scent Work","Dock Diving, Scent Work", "Barn Hunt, Scent Work","Hunt Test, Scent Work", "Scent Work, Therapy dog")
working <- c("Tracking","Search and Rescue", "Hunting","Fishing Dog", "Scent Work, Tracking")
no_lifestyle_misc <- c("None",NA,"Other","Receiving medical treatment", "Retired from AKC Activities")
all_groups <- c(companion, therapy, breeding, competitive, working,no_lifestyle_misc)
```

```{r}

# groupings


companion <- c("companion/pet")

therapy <- c("therapy dog", "greeter", "service dog", "blood donor", "ambassador", "service dog, therapy dog")

breeding <- c("breeder", "retired breeder")

competitive <- c("dog athlete", "show", "agility", "field trials", "rally", 
                 "field trials, obedience", "barn hunt, rally, scent work", 
                 "agility, companion/pet, rally, tracking", "agility, scent work", 
                 "agility, hunt test, obedience, scent work", 
                 "hunt test, obedience, scent work", "agility, companion/pet, hunt test", 
                 "obedience", "hunt test", "actor/model", "dock diving", 
                 "dock diving, scent work", "barn hunt", "scent work", 
                 "dock diving, scent work", "barn hunt, scent work", 
                 "hunt test, scent work", "scent work, therapy dog")

working <- c("tracking", "search and rescue", "hunting", "fishing dog", "scent work, tracking")

no_lifestyle_misc <- c("none", NA, "other", "receiving medical treatment", "retired from akc activities")

all_groups <- c(companion, therapy, breeding, competitive, working, no_lifestyle_misc)

# JL paper - seperate show group vs other competitive (possibly also down to level of companion vs working )
# Do iteratively to check for those that are not in any group
unclassified_lifestyle <- setdiff(lifestyle_categories, all_groups)

# Display unclassified to check all classified
print(unclassified_lifestyle)

```

Majority lifestyle classifier:

-   main lifestyle classifier

```{r}
main_lifestyle <- lifestyle %>%
  count(subject_id, lifestyle) %>%                       # Count occurrences of each lifestyle per subject
  group_by(subject_id) %>%                                # Group by subject_id
  slice_max(n, with_ties = FALSE) %>%                    # Get the lifestyle with the max count, no ties
  ungroup() %>%                                           # Ungroup for a clean output
  select(subject_id, lifestyle)                           # Select relevant columns

# View the result
print(main_lifestyle)

main_lifestyle <- main_lifestyle %>%
  rename(main_lifestyle = lifestyle)
```

-   with these 12 categories can then group further into working, competitive categories etc

```{r}
competitive <-c("agility","dog athlete", "field trials","obedience","hunt test","demonstration dog","tracking")
working <-c("hunting","search and rescue","service dog")
breed_showing <- c("breeder","show")
misc <- c("other","therapy dog")
companion <- "companion/pet"


all_groups <- c(competitive, working,breed_showing,misc,companion)

# Do iteratively to check for those that are not in any group
unclassified_lifestyle <- setdiff(main_lifestyle$main_lifestyle, all_groups)

# Display unclassified to check all classified
print(unclassified_lifestyle)

```

-   main 2 lifestyle classes

    -   this gets really messy with \~100s of combinations

    -   trial how first one with just main category works

```{r}


main_lifestyles_combined <- lifestyle %>%
  count(subject_id, lifestyle) %>%                       # Count occurrences of each lifestyle per subject
  group_by(subject_id) %>%                                # Group by subject_id
  slice_max(n, n = 2, with_ties = TRUE) %>%              # Get the top 2 lifestyles by count, allowing ties
  summarise(main_lifestyles = paste(lifestyle, collapse = ", "), # Combine into a single string
            .groups = 'drop')                             # Drop grouping

# View the result
print(main_lifestyles_combined)
print(table(main_lifestyles_combined$main_lifestyles))

```

Determine what is main lifestyle across all records for each and reclass into further groups then add to main df:

```{r}
# add main lifestyle df in left join to original lifestyle df


lifestyle2 <- lifestyle %>%
  left_join(main_lifestyle, by = "subject_id")  

lifestyle2 <- lifestyle2 %>%
  dplyr::select(c(subject_id,year_in_study,record_date,lifestyle,main_lifestyle,main_lifestyle))

  
  
lifestyle3 <- lifestyle2 %>%
  mutate(main_lifestyle_category = case_when(
    str_detect(main_lifestyle, paste(competitive, collapse = "|")) ~ "competitive",
    str_detect(main_lifestyle, paste(working, collapse = "|")) ~ "working",
    str_detect(main_lifestyle, paste(breed_showing, collapse = "|")) ~ "breed/showing",
    str_detect(main_lifestyle, paste(misc, collapse = "|")) ~ "miscellaneous",
    main_lifestyle == companion ~ "companion/pet",
    TRUE ~ "other"  # For any lifestyle not matching the above categories
  ))

# View the updated dataframe
print(lifestyle3)

table(lifestyle3$main_lifestyle_category)

  
```

Dataframe with overall lifestyle category for each dog:

```{r}
lifestyle_by_dog <- lifestyle3 %>%
  distinct(subject_id, .keep_all = TRUE)

table(lifestyle_by_dog$main_lifestyle_category)
```

Add back to main df:

```{r}
sleep_smoking_enviro_lifestyle_all <- sleep_smoking_enviro_all %>%
  left_join(lifestyle_by_dog,by="subject_id")
```

#### Tidying up of some category names before export:

```{r}
#replace all not withins
sleep_smoking_enviro_lifestyle_all <- sleep_smoking_enviro_lifestyle_all %>%
    mutate(across(everything(), ~str_replace_all(., "Not within 3,4,5,6,7,8,9,10 years", "Not within rest of life")))

sleep_smoking_enviro_lifestyle_all <- sleep_smoking_enviro_lifestyle_all %>%
    mutate(across(everything(), ~str_replace_all(., "Not within 0,1,2 years", "Not within early life")))

sleep_smoking_enviro_lifestyle_all <- sleep_smoking_enviro_lifestyle_all %>%
    mutate(across(everything(), ~str_replace_all(., "Not within 0,1,2,3,4,5,6,7,8,9,10 years", "Not within whole life")))

#all withins
sleep_smoking_enviro_lifestyle_all <- sleep_smoking_enviro_lifestyle_all %>%
    mutate(across(everything(), ~str_replace_all(., "Within 3,4,5,6,7,8,9,10 years", "Within rest of life")))

sleep_smoking_enviro_lifestyle_all <- sleep_smoking_enviro_lifestyle_all %>%
    mutate(across(everything(), ~str_replace_all(., "Within 0,1,2 years", "Within early life")))

sleep_smoking_enviro_lifestyle_all <- sleep_smoking_enviro_lifestyle_all %>%
    mutate(across(everything(), ~str_replace_all(., "Within 0,1,2,3,4,5,6,7,8,9,10 years", "Within whole life")))


```

#### Export datasets

-   Data for final endpoint date for dogs in endpoint dataset (\~1k dogs):

```{r}
#check only have the row/s with latest diagnosis date 
sleep_smoking_enviro_all_final_date <- sleep_smoking_enviro_lifestyle_all %>%
  group_by(subject_id)%>%
  filter(diagnosis_year_month_date2 == max(diagnosis_year_month_date2)) %>%      # Filter for the most recent date in each group
  ungroup() 

sleep_smoking_enviro_all_final_date<- sleep_smoking_enviro_all_final_date%>%
  distinct(subject_id, .keep_all = TRUE)

#NB change to final file name when file done
write.csv(sleep_smoking_enviro_all_final_date,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/endpoints_sleep_smoking_enviro_lifestyle_enviro.csv")

```

Environmental data for all dogs without endpoint data:

-   remove all endpoint assoc rows and instead just keep those calcs from early life, rest, end

-   create one df that is every single row and one with just single row for each subject_id

```{r}
print(colnames(sleep_smoking_enviro_lifestyle_all))
sleep_smoking_enviro_all_no_endpoints <- sleep_smoking_enviro_lifestyle_all %>%
  dplyr::select(c(1:18,46:99,103:105,107,108,111:113,123:141,143:146))

```

Keeping all rows:

```{r}


#NB change to final file name when file done
write.csv(sleep_smoking_enviro_all_no_endpoints,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/allrows_sleep_smoking_enviro_lifestyle_enviro.csv")

```

Keeping only single row per dog and removing record date, year in study cols

```{r}
print(colnames(sleep_smoking_enviro_all_no_endpoints))
sleep_smoking_enviro_all_no_endpoints2 <- sleep_smoking_enviro_all_no_endpoints %>%
  dplyr::select(-c(year_in_study.x,record_date.x,record_date))

sleep_smoking_enviro_all_no_endpoints2 <- sleep_smoking_enviro_all_no_endpoints2 %>%
  distinct(subject_id, .keep_all = TRUE)

write.csv(sleep_smoking_enviro_all_no_endpoints2,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/lifetime_sleep_smoking_enviro_lifestyle_enviro.csv")
```

## Add in HSA cohort time specific data

```{r}
HSA_cohort <- read.csv("C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/HSA_study_pop_with_final_date_with_final_study_record_year.csv")
```

Combine HSA data with:

```{r}
HSA_cohort_sleep_smoking_enviro_all_no_endpoints<- sleep_smoking_enviro_all_no_endpoints %>%
  left_join(HSA_cohort, by="subject_id")

```

Things to calculate:

-   lifestyle - mode class of dog 'job'

```{r}
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")
columns_to_check <- c("main_lifestyle_category","sleep_location")
HSA_cohort_sleep_smoking_enviro_all_no_endpoints2 <- check_exposure_mode_X_prev_years(
  data = HSA_cohort_sleep_smoking_enviro_all_no_endpoints,
  columns_to_check = columns_to_check,
  year_range = 5, # Number of years prior to consider
  year_column = "year_in_study_diagnosis_or_final_record_year",
  study_year_column = "year_in_study.x"
)

```

Remaining variables its a Y/N exposure in prev 5 y calculation

```{r}
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")
columns_to_check <- c("use_aerosol","use_air_cleaner","use_hepa_filter","use_moth_balls","use_incense_or_candles","smoke_exposure","any_treated_weeds","any_treated_insects","any_treated_fertilizer")

source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")


# Specify the columns to check
columns_to_check <- c("use_aerosol", "use_air_cleaner", "use_hepa_filter",
                       "use_moth_balls", "use_incense_or_candles", "smoke_exposure",
                       "any_treated_weeds", "any_treated_insects", "any_treated_fertilizer")

HSA_cohort_sleep_smoking_enviro_all_no_endpoints2 <- check_exposure_binary(
  data = HSA_cohort_sleep_smoking_enviro_all_no_endpoints2,
  columns_to_check = columns_to_check,
  year_range = 5, # Number of years prior
  year_column = "year_in_study_diagnosis_or_final_record_year",
  study_year_column = "year_in_study.x"
)

```

Calculate hours of smoke exposure in prev 5 y

```{r}
source("C:/Users/ctaylor18/GitHub/GRLS_analyses/Code/GRLS_functions.R")
#make smoke into numeric
HSA_cohort_sleep_smoking_enviro_all_no_endpoints2$hours_of_smoke <- as.numeric(HSA_cohort_sleep_smoking_enviro_all_no_endpoints2$hours_of_smoke)
result <- check_exposure_hours(
  data = HSA_cohort_sleep_smoking_enviro_all_no_endpoints2,
  columns_to_check = c("hours_of_smoke"),
  year_range = 5, # Number of years prior
  year_column = "year_in_study_diagnosis_or_final_record_year",
  study_year_column = "year_in_study.x"
)
```

Now keeping only single row for each patient:

```{r}
HSA_cohort_sleep_smoking_enviro_all_single_row <- result %>%
  distinct(subject_id,.keep_all = TRUE)
#remove irrel cols
HSA_cohort_sleep_smoking_enviro_all_single_row2 <- HSA_cohort_sleep_smoking_enviro_all_single_row %>%
  dplyr::select(-c(2:18))

write.csv(HSA_cohort_sleep_smoking_enviro_all_single_row2,"C:/Users/ctaylor18/GitHub/GRLS_analyses/Output/HSA_cohort_lifestyle_exposures.csv")
```
